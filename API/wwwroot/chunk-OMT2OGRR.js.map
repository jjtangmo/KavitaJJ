{
  "version": 3,
  "sources": ["src/app/admin/license/license.component.ts", "src/app/admin/license/license.component.html", "src/app/admin/manage-tasks-settings/manage-tasks-settings.component.ts", "src/app/admin/manage-tasks-settings/manage-tasks-settings.component.html", "src/app/statistics/_components/publication-status-stats/publication-status-stats.component.ts", "src/app/statistics/_components/publication-status-stats/publication-status-stats.component.html", "src/app/statistics/_components/file-breakdown-stats/file-breakdown-stats.component.ts", "src/app/statistics/_components/file-breakdown-stats/file-breakdown-stats.component.html", "src/app/statistics/_components/kavitaplus-metadata-breakdown-stats/kavitaplus-metadata-breakdown-stats.component.ts", "src/app/statistics/_components/kavitaplus-metadata-breakdown-stats/kavitaplus-metadata-breakdown-stats.component.html", "src/app/statistics/_components/server-stats/server-stats.component.ts", "src/app/statistics/_components/server-stats/server-stats.component.html", "src/app/admin/manage-system/manage-system.component.ts", "src/app/admin/manage-system/manage-system.component.html", "src/app/_pipes/library-type.pipe.ts", "src/app/admin/manage-library/manage-library.component.ts", "src/app/admin/manage-library/manage-library.component.html", "src/app/admin/_modals/reset-password-modal/reset-password-modal.component.ts", "src/app/admin/_modals/reset-password-modal/reset-password-modal.component.html", "src/app/admin/library-selector/library-selector.component.ts", "src/app/admin/library-selector/library-selector.component.html", "src/app/admin/role-selector/role-selector.component.ts", "src/app/admin/role-selector/role-selector.component.html", "src/app/admin/invite-user/invite-user.component.ts", "src/app/admin/invite-user/invite-user.component.html", "src/app/admin/edit-user/edit-user.component.ts", "src/app/admin/edit-user/edit-user.component.html", "src/app/admin/manage-users/manage-users.component.ts", "src/app/admin/manage-users/manage-users.component.html", "src/app/admin/_models/encode-format.ts", "src/app/admin/manage-scrobble-errors/manage-scrobble-errors.component.ts", "src/app/admin/manage-scrobble-errors/manage-scrobble-errors.component.html", "src/app/admin/_models/cover-image-size.ts", "src/app/admin/manage-media-settings/manage-media-settings.component.ts", "src/app/admin/manage-media-settings/manage-media-settings.component.html", "src/app/admin/manage-email-settings/manage-email-settings.component.ts", "src/app/admin/manage-email-settings/manage-email-settings.component.html", "src/app/admin/manage-settings/manage-settings.component.ts", "src/app/admin/manage-settings/manage-settings.component.html", "src/app/admin/dashboard/dashboard.component.ts", "src/app/admin/dashboard/dashboard.component.html", "src/app/_routes/admin-routing.module.ts"],
  "sourcesContent": ["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, inject,\n  OnInit\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators, ReactiveFormsModule } from \"@angular/forms\";\nimport {AccountService} from \"../../_services/account.service\";\nimport {ScrobblingService} from \"../../_services/scrobbling.service\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {ConfirmService} from \"../../shared/confirm.service\";\nimport { LoadingComponent } from '../../shared/loading/loading.component';\nimport { NgbTooltip, NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\nimport { NgIf } from '@angular/common';\nimport {environment} from \"../../../environments/environment\";\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {catchError} from \"rxjs\";\nimport {WikiLink} from \"../../_models/wiki\";\n\n@Component({\n  selector: 'app-license',\n  templateUrl: './license.component.html',\n  styleUrls: ['./license.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [NgbTooltip, LoadingComponent, NgbCollapse, ReactiveFormsModule, TranslocoDirective]\n})\nexport class LicenseComponent implements OnInit {\n\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly toastr = inject(ToastrService);\n  private readonly confirmService = inject(ConfirmService);\n  protected readonly accountService = inject(AccountService);\n  protected readonly WikiLink = WikiLink;\n\n  formGroup: FormGroup = new FormGroup({});\n  isViewMode: boolean = true;\n\n  hasValidLicense: boolean = false;\n  hasLicense: boolean = false;\n  isChecking: boolean = true;\n  isSaving: boolean = false;\n\n  buyLink = environment.buyLink;\n  manageLink = environment.manageLink;\n\n\n\n\n  ngOnInit(): void {\n    this.formGroup.addControl('licenseKey', new FormControl('', [Validators.required]));\n    this.formGroup.addControl('email', new FormControl('', [Validators.required]));\n    this.formGroup.addControl('discordId', new FormControl('', [Validators.pattern(/\\d+/)]));\n\n    this.isChecking = true;\n    this.cdRef.markForCheck();\n\n    this.accountService.hasAnyLicense().subscribe(res => {\n      this.hasLicense = res;\n      this.cdRef.markForCheck();\n\n      if (this.hasLicense) {\n        this.accountService.hasValidLicense().subscribe(res => {\n          this.hasValidLicense = res;\n          this.isChecking = false;\n          this.cdRef.markForCheck();\n        });\n      }\n    });\n  }\n\n\n  resetForm() {\n    this.formGroup.get('licenseKey')?.setValue('');\n    this.formGroup.get('email')?.setValue('');\n    this.formGroup.get('discordId')?.setValue('');\n    this.cdRef.markForCheck();\n  }\n\n  saveForm() {\n    this.isSaving = true;\n    this.cdRef.markForCheck();\n    this.accountService.updateUserLicense(this.formGroup.get('licenseKey')!.value.trim(), this.formGroup.get('email')!.value.trim(), this.formGroup.get('discordId')!.value.trim())\n      .subscribe(() => {\n      this.accountService.hasValidLicense(true).subscribe(isValid => {\n        this.hasValidLicense = isValid;\n        if (!this.hasValidLicense) {\n          this.toastr.info(translate('toasts.k+-license-saved'));\n        } else {\n          this.toastr.success(translate('toasts.k+-unlocked'));\n        }\n        this.hasLicense = this.formGroup.get('licenseKey')!.value.length > 0;\n        this.resetForm();\n        this.isViewMode = true;\n        this.isSaving = false;\n        this.cdRef.markForCheck();\n      });\n    }, err => {\n        this.isSaving = false;\n        this.cdRef.markForCheck();\n        if (err.hasOwnProperty('error')) {\n          this.toastr.error(JSON.parse(err['error']));\n        } else {\n          this.toastr.error(translate('toasts.k+-error'));\n        }\n    });\n  }\n\n  async deleteLicense() {\n    if (!await this.confirmService.confirm(translate('toasts.k+-delete-key'))) {\n      return;\n    }\n\n    this.accountService.deleteLicense().subscribe(() => {\n      this.resetForm();\n      this.toggleViewMode();\n      this.validateLicense();\n    });\n  }\n\n  async resetLicense() {\n    if (!await this.confirmService.confirm(translate('toasts.k+-reset-key'))) {\n      return;\n    }\n\n    this.accountService.resetLicense(this.formGroup.get('licenseKey')!.value.trim(), this.formGroup.get('email')!.value.trim()).subscribe(() => {\n      this.toastr.success(translate('toasts.k+-reset-key-success'));\n    });\n  }\n\n\n  toggleViewMode() {\n    this.isViewMode = !this.isViewMode;\n    this.resetForm();\n  }\n\n  validateLicense() {\n    this.isChecking = true;\n    this.accountService.hasValidLicense(true).subscribe(res => {\n      this.hasValidLicense = res;\n      this.isChecking = false;\n      this.cdRef.markForCheck();\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'license'\">\n  <div class=\"card mt-2\">\n    <div class=\"card-body\">\n      <div class=\"card-title\">\n        <div class=\"container-fluid row mb-2\">\n          <div class=\"col-10 col-sm-10\">\n            <h4 id=\"license-key-header\">{{t('title')}}</h4>\n          </div>\n          <div class=\"col-2 text-end\">\n            @if (hasLicense) {\n              @if (hasValidLicense) {\n                <a class=\"btn btn-primary btn-sm me-1\" [href]=\"manageLink\" target=\"_blank\" rel=\"noreferrer nofollow\">{{t('manage')}}</a>\n              } @else {\n                <a class=\"btn btn-primary btn-sm me-1\"\n                   [ngbTooltip]=\"t('invalid-license-tooltip')\"\n                   href=\"mailto:kavitareader@gmail.com?subject=Kavita+Subscription+Renewal&body=Description%3A%0D%0A%0D%0ALicense%20Key%3A%0D%0A%0D%0AYour%20Email%3A\"\n                >{{t('renew')}}</a>\n              }\n              <button class=\"btn btn-secondary btn-sm me-1\" style=\"width: 58px\" (click)=\"validateLicense()\">\n                @if (isChecking) {\n                  <app-loading [loading]=\"isChecking\" size=\"spinner-border-sm\"></app-loading>\n                } @else {\n                  <span>{{t('check')}}</span>\n                }\n              </button>\n              <button class=\"btn btn-secondary btn-sm\" style=\"width: 62px\" (click)=\"toggleViewMode()\">\n                @if (isViewMode) {\n                  <span>{{t('edit')}}</span>\n                } @else {\n                  <span>{{t('cancel')}}</span>\n                }\n              </button>\n            } @else {\n              <a class=\"btn btn-secondary btn-sm me-1\" [href]=\"buyLink\" target=\"_blank\" rel=\"noreferrer nofollow\">{{t('buy')}}</a>\n              <button class=\"btn btn-primary btn-sm\" (click)=\"toggleViewMode()\">{{isViewMode ? t('activate') : t('cancel')}}</button>\n            }\n          </div>\n        </div>\n      </div>\n\n      @if (isViewMode) {\n        <div class=\"container-fluid row\">\n          <span class=\"col-12\">\n            @if (hasLicense) {\n              <span class=\"me-1\">*********</span>\n              @if (isChecking) {\n                <div class=\"spinner-border spinner-border-sm text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">{{t('loading')}}</span>\n                </div>\n              } @else {\n                @if (hasValidLicense) {\n                  <i [ngbTooltip]=\"t('license-valid')\" class=\"fa-solid fa-check-circle successful-validation ms-1\">\n                    <span class=\"visually-hidden\">{{t('license-valid')}}</span>\n                  </i>\n                }\n\n                @if (!hasValidLicense) {\n                  <i class=\"error fa-solid fa-exclamation-circle ms-1\" [ngbTooltip]=\"t('license-not-valid')\">\n                      <span class=\"visually-hidden\">{{t('license-not-valid')}}</span>\n                    </i>\n                }\n              }\n            }\n            @else {\n              {{t('no-license-key')}}\n            }\n          </span>\n        </div>\n      }\n\n\n      <div #collapse=\"ngbCollapse\" [(ngbCollapse)]=\"isViewMode\">\n        <form [formGroup]=\"formGroup\">\n          <p>{{t('activate-description')}}</p>\n          <div class=\"form-group mb-3\">\n            <label for=\"license-key\">{{t('activate-license-label')}}</label>\n            <input id=\"license-key\" type=\"text\" class=\"form-control\" formControlName=\"licenseKey\" autocomplete=\"off\"/>\n          </div>\n          <div class=\"form-group mb-3\">\n            <label for=\"email\">{{t('activate-email-label')}}</label>\n            <input id=\"email\" type=\"email\" class=\"form-control\" formControlName=\"email\" autocomplete=\"off\"/>\n          </div>\n          <div class=\"form-group mb-3\">\n            <label for=\"discordId\">{{t('activate-discordId-label')}}</label>\n            <i class=\"fa fa-circle-info ms-1\" aria-hidden=\"true\" [ngbTooltip]=\"t('activate-discordId-tooltip')\"></i>\n            <a class=\"ms-1\" [href]=\"WikiLink.KavitaPlusDiscordId\" target=\"_blank\" rel=\"noopener noreferrer\">Help</a>\n            <input id=\"discordId\" type=\"text\" class=\"form-control\" formControlName=\"discordId\" autocomplete=\"off\" [class.is-invalid]=\"formGroup.get('discordId')?.invalid && formGroup.get('discordId')?.touched\"/>\n            @if (formGroup.dirty || formGroup.touched) {\n              <div id=\"inviteForm-validations\" class=\"invalid-feedback\">\n                @if (formGroup.get('discordId')?.errors?.pattern) {\n                  <div>\n                    {{t('discord-validation')}}\n                  </div>\n                }\n              </div>\n            }\n          </div>\n        </form>\n        <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end mb-3\">\n          <button type=\"button\" class=\"flex-fill btn btn-danger me-1\" aria-describedby=\"license-key-header\"\n                  (click)=\"deleteLicense()\">\n            {{t('activate-delete')}}\n          </button>\n          <button type=\"button\" class=\"flex-fill btn btn-danger me-1\" aria-describedby=\"license-key-header\"\n                  [ngbTooltip]=\"t('activate-reset-tooltip')\"\n                  [disabled]=\"!formGroup.get('email')?.value || !formGroup.get('licenseKey')?.value\" (click)=\"resetLicense()\">\n            {{t('activate-reset')}}\n          </button>\n          <button type=\"submit\" class=\"flex-fill btn btn-primary\" aria-describedby=\"license-key-header\"\n                  [disabled]=\"!formGroup.get('email')?.value || !formGroup.get('licenseKey')?.value\" (click)=\"saveForm()\">\n            @if (!isSaving) {\n              <span>{{t('activate-save')}}</span>\n            }\n\n            <app-loading [loading]=\"isSaving\" size=\"spinner-border-sm\"></app-loading>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {SettingsService} from '../settings.service';\nimport {ServerSettings} from '../_models/server-settings';\nimport {shareReplay, take} from 'rxjs/operators';\nimport {debounceTime, defer, distinctUntilChanged, forkJoin, Observable, of, switchMap, tap} from 'rxjs';\nimport {ServerService} from 'src/app/_services/server.service';\nimport {Job} from 'src/app/_models/job/job';\nimport {UpdateNotificationModalComponent} from 'src/app/shared/update-notification/update-notification-modal.component';\nimport {NgbModal, NgbTooltip} from '@ng-bootstrap/ng-bootstrap';\nimport {DownloadService} from 'src/app/shared/_services/download.service';\nimport {DefaultValuePipe} from '../../_pipes/default-value.pipe';\nimport {AsyncPipe, DatePipe, NgFor, NgIf, NgTemplateOutlet, TitleCasePipe} from '@angular/common';\nimport {translate, TranslocoModule} from \"@ngneat/transloco\";\nimport {TranslocoLocaleModule} from \"@ngneat/transloco-locale\";\nimport {UtcToLocalTimePipe} from \"../../_pipes/utc-to-local-time.pipe\";\n\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\n\ninterface AdhocTask {\n  name: string;\n  description: string;\n  api: Observable<any>;\n  successMessage: string;\n  successFunction?: (data: any) => void;\n}\n\n@Component({\n  selector: 'app-manage-tasks-settings',\n  templateUrl: './manage-tasks-settings.component.html',\n  styleUrls: ['./manage-tasks-settings.component.scss'],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgIf, ReactiveFormsModule, NgbTooltip, NgFor, AsyncPipe, TitleCasePipe, DatePipe, DefaultValuePipe,\n    TranslocoModule, NgTemplateOutlet, TranslocoLocaleModule, UtcToLocalTimePipe]\n})\nexport class ManageTasksSettingsComponent implements OnInit {\n\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n\n  serverSettings!: ServerSettings;\n  settingsForm: FormGroup = new FormGroup({});\n  taskFrequencies: Array<string> = [];\n  taskFrequenciesForCleanup: Array<string> = [];\n  logLevels: Array<string> = [];\n\n  recurringTasks$: Observable<Array<Job>> = of([]);\n  // noinspection JSVoidFunctionReturnValueUsed\n  adhocTasks: Array<AdhocTask> = [\n    {\n      name: 'convert-media-task',\n      description: 'convert-media-task-desc',\n      api: this.serverService.convertMedia(),\n      successMessage: 'convert-media-task-success'\n    },\n    {\n      name: 'bust-locale-task',\n      description: 'bust-locale-task-desc',\n      api: defer(() => {\n        localStorage.removeItem('@transloco/translations/timestamp');\n        localStorage.removeItem('@transloco/translations');\n        localStorage.removeItem('translocoLang');\n        return of();\n      }),\n      successMessage: 'bust-locale-task-success',\n    },\n    {\n      name: 'clear-reading-cache-task',\n      description: 'clear-reading-cache-task-desc',\n      api: this.serverService.clearCache(),\n      successMessage: 'clear-reading-cache-task-success'\n    },\n    {\n      name: 'clean-up-want-to-read-task',\n      description: 'clean-up-want-to-read-task-desc',\n      api: this.serverService.cleanupWantToRead(),\n      successMessage: 'clean-up-want-to-read-task-success'\n    },\n    {\n      name: 'backup-database-task',\n      description: 'backup-database-task-desc',\n      api: this.serverService.backupDatabase(),\n      successMessage: 'backup-database-task-success'\n    },\n    {\n      name: 'download-logs-task',\n      description: 'download-logs-task-desc',\n      api: defer(() => of(this.downloadService.download('logs', undefined))),\n      successMessage: ''\n    },\n    {\n      name: 'analyze-files-task',\n      description: 'analyze-files-task-desc',\n      api: this.serverService.analyzeFiles(),\n      successMessage: 'analyze-files-task-success'\n    },\n    {\n      name: 'check-for-updates-task',\n      description: 'check-for-updates-task-desc',\n      api: this.serverService.checkForUpdate(),\n      successMessage: '',\n      successFunction: (update) => {\n        if (update === null) {\n          this.toastr.info(translate('toasts.no-updates'));\n          return;\n        }\n        const modalRef = this.modalService.open(UpdateNotificationModalComponent, { scrollable: true, size: 'lg' });\n        modalRef.componentInstance.updateData = update;\n      }\n    },\n  ];\n  customOption = 'custom';\n\n  constructor(private settingsService: SettingsService, private toastr: ToastrService,\n    private serverService: ServerService, private modalService: NgbModal,\n    private downloadService: DownloadService) { }\n\n  ngOnInit(): void {\n    forkJoin({\n      frequencies: this.settingsService.getTaskFrequencies(),\n      levels: this.settingsService.getLoggingLevels(),\n      settings: this.settingsService.getServerSettings()\n    }).subscribe(result => {\n      this.taskFrequencies = result.frequencies;\n      this.taskFrequencies.push(this.customOption);\n\n      this.taskFrequenciesForCleanup = this.taskFrequencies.filter(f => f !== 'disabled');\n\n      this.logLevels = result.levels;\n      this.serverSettings = result.settings;\n      this.settingsForm.addControl('taskScan', new FormControl(this.serverSettings.taskScan, [Validators.required]));\n      this.settingsForm.addControl('taskBackup', new FormControl(this.serverSettings.taskBackup, [Validators.required]));\n      this.settingsForm.addControl('taskCleanup', new FormControl(this.serverSettings.taskCleanup, [Validators.required]));\n\n      if (!this.taskFrequencies.includes(this.serverSettings.taskScan)) {\n        this.settingsForm.get('taskScan')?.setValue(this.customOption);\n        this.settingsForm.addControl('taskScanCustom', new FormControl(this.serverSettings.taskScan, [Validators.required]));\n      } else {\n        this.settingsForm.addControl('taskScanCustom', new FormControl('', [Validators.required]));\n      }\n\n      if (!this.taskFrequencies.includes(this.serverSettings.taskBackup)) {\n        this.settingsForm.get('taskBackup')?.setValue(this.customOption);\n        this.settingsForm.addControl('taskBackupCustom', new FormControl(this.serverSettings.taskBackup, [Validators.required]));\n      } else {\n        this.settingsForm.addControl('taskBackupCustom', new FormControl('', [Validators.required]));\n      }\n\n      if (!this.taskFrequenciesForCleanup.includes(this.serverSettings.taskCleanup)) {\n        this.settingsForm.get('taskCleanup')?.setValue(this.customOption);\n        this.settingsForm.addControl('taskCleanupCustom', new FormControl(this.serverSettings.taskCleanup, [Validators.required]));\n      } else {\n        this.settingsForm.addControl('taskCleanupCustom', new FormControl('', [Validators.required]));\n      }\n\n      this.settingsForm.get('taskScanCustom')?.valueChanges.pipe(\n        debounceTime(100),\n        switchMap(val => this.settingsService.isValidCronExpression(val)),\n        tap(isValid => {\n          if (isValid) {\n            this.settingsForm.get('taskScanCustom')?.setErrors(null);\n          } else {\n            this.settingsForm.get('taskScanCustom')?.setErrors({invalidCron: true})\n          }\n          this.cdRef.markForCheck();\n        }),\n        takeUntilDestroyed(this.destroyRef)\n      ).subscribe();\n\n      this.settingsForm.get('taskBackupCustom')?.valueChanges.pipe(\n        debounceTime(100),\n        switchMap(val => this.settingsService.isValidCronExpression(val)),\n        tap(isValid => {\n          if (isValid) {\n            this.settingsForm.get('taskBackupCustom')?.setErrors(null);\n          } else {\n            this.settingsForm.get('taskBackupCustom')?.setErrors({invalidCron: true})\n          }\n          this.cdRef.markForCheck();\n        }),\n        takeUntilDestroyed(this.destroyRef)\n      ).subscribe();\n\n      this.settingsForm.get('taskCleanupCustom')?.valueChanges.pipe(\n        debounceTime(100),\n        switchMap(val => this.settingsService.isValidCronExpression(val)),\n        tap(isValid => {\n          if (isValid) {\n            this.settingsForm.get('taskCleanupCustom')?.setErrors(null);\n          } else {\n            this.settingsForm.get('taskCleanupCustom')?.setErrors({invalidCron: true})\n          }\n          this.cdRef.markForCheck();\n        }),\n        takeUntilDestroyed(this.destroyRef)\n      ).subscribe();\n\n      this.cdRef.markForCheck();\n    });\n\n    this.recurringTasks$ = this.serverService.getRecurringJobs().pipe(shareReplay());\n    this.cdRef.markForCheck();\n  }\n\n\n  resetForm() {\n    this.settingsForm.get('taskScan')?.setValue(this.serverSettings.taskScan);\n    this.settingsForm.get('taskBackup')?.setValue(this.serverSettings.taskBackup);\n    this.settingsForm.get('taskCleanup')?.setValue(this.serverSettings.taskCleanup);\n\n    if (!this.taskFrequencies.includes(this.serverSettings.taskScan)) {\n      this.settingsForm.get('taskScanCustom')?.setValue(this.serverSettings.taskScan);\n    } else {\n      this.settingsForm.get('taskScanCustom')?.setValue('');\n    }\n\n    if (!this.taskFrequencies.includes(this.serverSettings.taskBackup)) {\n      this.settingsForm.get('taskBackupCustom')?.setValue(this.serverSettings.taskBackup);\n    } else {\n      this.settingsForm.get('taskBackupCustom')?.setValue('');\n    }\n\n    if (!this.taskFrequencies.includes(this.serverSettings.taskCleanup)) {\n      this.settingsForm.get('taskCleanupCustom')?.setValue(this.serverSettings.taskCleanup);\n    } else {\n      this.settingsForm.get('taskCleanupCustom')?.setValue('');\n    }\n\n    this.settingsForm.markAsPristine();\n    this.cdRef.markForCheck();\n  }\n\n  async saveSettings() {\n    const modelSettings = Object.assign({}, this.serverSettings);\n    modelSettings.taskBackup = this.settingsForm.get('taskBackup')?.value;\n    modelSettings.taskScan = this.settingsForm.get('taskScan')?.value;\n    modelSettings.taskCleanup = this.settingsForm.get('taskCleanup')?.value;\n\n    if (modelSettings.taskBackup === this.customOption) {\n      modelSettings.taskBackup = this.settingsForm.get('taskBackupCustom')?.value;\n    }\n\n    if (modelSettings.taskScan === this.customOption) {\n      modelSettings.taskScan = this.settingsForm.get('taskScanCustom')?.value;\n    }\n\n    if (modelSettings.taskCleanup === this.customOption) {\n      modelSettings.taskCleanup = this.settingsForm.get('taskCleanupCustom')?.value;\n    }\n\n\n    this.settingsService.updateServerSettings(modelSettings).pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.recurringTasks$ = this.serverService.getRecurringJobs().pipe(shareReplay());\n      this.toastr.success(translate('toasts.server-settings-updated'));\n      this.cdRef.markForCheck();\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetToDefaults() {\n    this.settingsService.resetServerSettings().pipe(take(1)).subscribe(async (settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  runAdhoc(task: AdhocTask) {\n    task.api.subscribe((data: any) => {\n      if (task.successMessage.length > 0) {\n        this.toastr.success(translate('manage-tasks-settings.' + task.successMessage));\n      }\n\n      if (task.successFunction) {\n        task.successFunction(data);\n      }\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n\n}\n", "<ng-container *transloco=\"let t; read: 'manage-tasks-settings'\">\n  <div class=\"container-fluid\">\n    <form [formGroup]=\"settingsForm\" *ngIf=\"serverSettings !== undefined\">\n      <h4>{{t('title')}}</h4>\n      <div class=\"mb-3\">\n        <label for=\"settings-tasks-scan\" class=\"form-label\">{{t('library-scan-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"taskScanTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #taskScanTooltip>{{t('library-scan-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-tasks-scan-help\"><ng-container [ngTemplateOutlet]=\"taskScanTooltip\"></ng-container></span>\n        <select class=\"form-select\" aria-describedby=\"settings-tasks-scan-help\" formControlName=\"taskScan\" id=\"settings-tasks-scan\">\n          <option *ngFor=\"let freq of taskFrequencies\" [value]=\"freq\">{{t(freq)}}</option>\n        </select>\n\n        @if (settingsForm.get('taskScan')!.value === customOption) {\n          <div class=\"mt-3\">\n            <label for=\"custom-task-scan\" class=\"form-label\">{{t('custom-label')}}</label>\n            <input class=\"form-control\" type=\"text\"\n                   id=\"custom-task-scan\" formControlName=\"taskScanCustom\"\n                   [class.is-invalid]=\"settingsForm.get('taskScanCustom')?.invalid && settingsForm.get('taskScanCustom')?.touched\"\n                   aria-describedby=\"task-scan-validations\">\n\n            @if (settingsForm.dirty || settingsForm.touched) {\n              <div id=\"task-scan-validations\" class=\"invalid-feedback\">\n                <div *ngIf=\"settingsForm.get('taskScanCustom')?.errors?.required\">\n                  {{t('required')}}\n                </div>\n                <div *ngIf=\"settingsForm.get('taskScanCustom')?.errors?.invalidCron\">\n                  {{t('cron-notation')}}\n                </div>\n              </div>\n            }\n          </div>\n        }\n\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"settings-tasks-backup\" class=\"form-label\">{{t('library-database-backup-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"taskBackupTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #taskBackupTooltip>{{t('library-database-backup-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-tasks-backup-help\"><ng-container [ngTemplateOutlet]=\"taskBackupTooltip\"></ng-container></span>\n        <select class=\"form-select\" aria-describedby=\"settings-tasks-backup-help\" formControlName=\"taskBackup\" id=\"settings-tasks-backup\">\n          <option *ngFor=\"let freq of taskFrequencies\" [value]=\"freq\">{{t(freq)}}</option>\n        </select>\n\n        @if (settingsForm.get('taskBackup')!.value === customOption) {\n          <div class=\"mt-3\">\n            <label for=\"custom-task-backup\" class=\"form-label\">{{t('custom-label')}}</label>\n            <input class=\"form-control\"  type=\"text\"\n                   id=\"custom-task-backup\" formControlName=\"taskBackupCustom\"\n                   [class.is-invalid]=\"settingsForm.get('taskBackupCustom')?.invalid && settingsForm.get('taskBackupCustom')?.touched\"\n                   aria-describedby=\"task-backup-validations\">\n\n            @if (settingsForm.dirty || settingsForm.touched) {\n              <div id=\"task-backup-validations\" class=\"invalid-feedback\">\n                <div *ngIf=\"settingsForm.get('taskBackupCustom')?.errors?.required\">\n                  {{t('required')}}\n                </div>\n                <div *ngIf=\"settingsForm.get('taskBackupCustom')?.errors?.invalidCron\">\n                  {{t('cron-notation')}}\n                </div>\n              </div>\n            }\n          </div>\n        }\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"settings-tasks-cleanup\" class=\"form-label\">{{t('cleanup-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"taskCleanupTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #taskCleanupTooltip>{{t('cleanup-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-tasks-cleanup-help\"><ng-container [ngTemplateOutlet]=\"taskCleanupTooltip\"></ng-container></span>\n        <select class=\"form-select\" aria-describedby=\"settings-tasks-cleanup-help\" formControlName=\"taskCleanup\" id=\"settings-tasks-cleanup\">\n          <option *ngFor=\"let freq of taskFrequenciesForCleanup\" [value]=\"freq\">{{t(freq)}}</option>\n        </select>\n\n        @if (settingsForm.get('taskCleanup')!.value === customOption) {\n          <div class=\"mt-3\">\n            <label for=\"custom-task-cleanup\" class=\"form-label\">{{t('custom-label')}}</label>\n            <input class=\"form-control\"  type=\"text\"\n                   id=\"custom-task-cleanup\" formControlName=\"taskCleanupCustom\"\n                   [class.is-invalid]=\"settingsForm.get('taskCleanupCustom')?.invalid && settingsForm.get('taskCleanupCustom')?.touched\"\n                   aria-describedby=\"task-cleanup-validations\">\n\n            @if (settingsForm.dirty || settingsForm.touched) {\n              <div id=\"task-cleanup-validations\" class=\"invalid-feedback\">\n                <div *ngIf=\"settingsForm.get('taskCleanupCustom')?.errors?.required\">\n                  {{t('required')}}\n                </div>\n                <div *ngIf=\"settingsForm.get('taskCleanupCustom')?.errors?.invalidCron\">\n                  {{t('cron-notation')}}\n                </div>\n              </div>\n            }\n          </div>\n        }\n      </div>\n\n      <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end\">\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetToDefaults()\">{{t('reset-to-default')}}</button>\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetForm()\">{{t('reset')}}</button>\n        <button type=\"submit\" class=\"flex-fill btn btn-primary\" (click)=\"saveSettings()\" [disabled]=\"!settingsForm.dirty\">{{t('save')}}</button>\n      </div>\n\n      <h4>{{t('adhoc-tasks-title')}}</h4>\n      <table class=\"table table-striped\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{t('job-title-header')}}</th>\n          <th scope=\"col\">{{t('description-header')}}</th>\n          <th scope=\"col\">{{t('action-header')}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let task of adhocTasks; let idx = index;\">\n          <td id=\"adhoctask--{{idx}}\">\n            {{t(task.name)}}\n          </td>\n          <td>\n            {{t(task.description)}}\n          </td>\n          <td>\n            <button class=\"btn btn-primary\" (click)=\"runAdhoc(task)\" attr.aria-labelledby=\"adhoctask--{{idx}}\">Run</button>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n\n      <h4>{{t('recurring-tasks-title')}}</h4>\n      <table class=\"table table-striped\">\n        <thead>\n        <tr>\n          <th scope=\"col\">{{t('job-title-header')}}</th>\n          <th scope=\"col\">{{t('last-executed-header')}}</th>\n          <th scope=\"col\">{{t('cron-header')}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let task of recurringTasks$ | async; index as i\">\n          <td>\n            {{task.title | titlecase}}\n          </td>\n          <td>\n            {{task.lastExecutionUtc | utcToLocalTime | defaultValue }}\n          </td>\n          <td>{{task.cron}}</td>\n        </tr>\n        </tbody>\n      </table>\n    </form>\n  </div>\n\n</ng-container>\n", "import {\n  ChangeDetectionStrategy,\n  Component,\n  DestroyRef,\n  inject,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { PieChartModule } from '@swimlane/ngx-charts';\nimport { Observable, map, combineLatest, BehaviorSubject } from 'rxjs';\nimport { StatisticsService } from 'src/app/_services/statistics.service';\nimport { compare, SortableHeader, SortEvent } from 'src/app/_single-module/table/_directives/sortable-header.directive';\nimport { PieDataItem } from '../../_models/pie-data-item';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { SortableHeader as SortableHeader_1 } from '../../../_single-module/table/_directives/sortable-header.directive';\nimport { NgIf, NgFor, AsyncPipe, DecimalPipe } from '@angular/common';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-publication-status-stats',\n    templateUrl: './publication-status-stats.component.html',\n    styleUrls: ['./publication-status-stats.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [ReactiveFormsModule, NgIf, PieChartModule, SortableHeader_1, NgFor, AsyncPipe, DecimalPipe, TranslocoDirective]\n})\nexport class PublicationStatusStatsComponent {\n\n  @ViewChildren(SortableHeader<PieDataItem>) headers!: QueryList<SortableHeader<PieDataItem>>;\n\n  publicationStatues$!: Observable<Array<PieDataItem>>;\n\n  currentSort = new BehaviorSubject<SortEvent<PieDataItem>>({column: 'value', direction: 'asc'});\n  currentSort$: Observable<SortEvent<PieDataItem>> = this.currentSort.asObservable();\n\n  view: [number, number] = [700, 400];\n\n  private readonly destroyRef = inject(DestroyRef);\n\n  formControl: FormControl = new FormControl(true, []);\n\n\n  constructor(private statService: StatisticsService) {\n    this.publicationStatues$ = combineLatest([this.currentSort$, this.statService.getPublicationStatus()]).pipe(\n      map(([sortConfig, data]) => {\n        return (sortConfig.column) ? data.sort((a: PieDataItem, b: PieDataItem) => {\n          if (sortConfig.column === '') return 0;\n          const res = compare(a[sortConfig.column], b[sortConfig.column]);\n          return sortConfig.direction === 'asc' ? res : -res;\n        }) : data;\n      }),\n      takeUntilDestroyed(this.destroyRef)\n    );\n  }\n\n  onSort(evt: SortEvent<PieDataItem>) {\n    this.currentSort.next(evt);\n\n    // Must clear out headers here\n    this.headers.forEach((header) => {\n      if (header.sortable !== evt.column) {\n        header.direction = '';\n      }\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'publication-status-stats'\">\n  <div class=\"dashboard-card-content\">\n\n    <div class=\"row g-0 mb-2\">\n      <div class=\"col-8\">\n        <h4><span>{{t('title')}}</span>\n        </h4>\n      </div>\n      <div class=\"col-4\">\n        <form>\n          <div class=\"form-check form-switch mt-2\">\n            <input id=\"pub-status-viz\" type=\"checkbox\" class=\"form-check-input\" [formControl]=\"formControl\" role=\"switch\">\n            <label for=\"pub-status-viz\" class=\"form-check-label\">{{formControl.value ? t('visualisation-label') : t('data-table-label') }}</label>\n          </div>\n        </form>\n      </div>\n    </div>\n\n\n    <ng-container *ngIf=\"publicationStatues$ | async as statuses\">\n      <ng-container *ngIf=\"formControl.value; else tableLayout\">\n        <ngx-charts-advanced-pie-chart\n          [results]=\"statuses\"\n        >\n        </ngx-charts-advanced-pie-chart>\n      </ng-container>\n      <ng-template #tableLayout>\n        <table class=\"table table-striped table-hover table-striped table-sm scrollable\">\n          <thead>\n          <tr>\n            <th scope=\"col\" sortable=\"name\" (sort)=\"onSort($event)\">\n              {{t('year-header')}}\n            </th>\n            <th scope=\"col\" sortable=\"value\" (sort)=\"onSort($event)\">\n              {{t('count-header')}}\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr *ngFor=\"let item of statuses; let idx = index;\">\n            <td id=\"adhoctask--{{idx}}\">\n              {{item.name}}\n            </td>\n            <td>\n              {{item.value | number:'1.0-0'}}\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </ng-template>\n    </ng-container>\n  </div>\n\n\n\n\n</ng-container>\n", "import {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  QueryList, TemplateRef, ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { PieChartModule } from '@swimlane/ngx-charts';\nimport {Observable, BehaviorSubject, combineLatest, map, shareReplay, switchMap} from 'rxjs';\nimport { StatisticsService } from 'src/app/_services/statistics.service';\nimport { SortableHeader, SortEvent, compare } from 'src/app/_single-module/table/_directives/sortable-header.directive';\nimport { FileExtension, FileExtensionBreakdown } from '../../_models/file-breakdown';\nimport { PieDataItem } from '../../_models/pie-data-item';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { MangaFormatPipe } from '../../../_pipes/manga-format.pipe';\nimport { BytesPipe } from '../../../_pipes/bytes.pipe';\nimport { SortableHeader as SortableHeader_1 } from '../../../_single-module/table/_directives/sortable-header.directive';\nimport { NgIf, NgFor, AsyncPipe, DecimalPipe } from '@angular/common';\nimport {NgbModal, NgbTooltip} from '@ng-bootstrap/ng-bootstrap';\nimport {translate, TranslocoDirective, TranslocoService} from \"@ngneat/transloco\";\nimport {filter, tap} from \"rxjs/operators\";\nimport {GenericTableModalComponent} from \"../_modals/generic-table-modal/generic-table-modal.component\";\n\nexport interface StackedBarChartDataItem {\n  name: string,\n  series: Array<PieDataItem>;\n}\n\n@Component({\n    selector: 'app-file-breakdown-stats',\n    templateUrl: './file-breakdown-stats.component.html',\n    styleUrls: ['./file-breakdown-stats.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [NgbTooltip, ReactiveFormsModule, NgIf, PieChartModule, SortableHeader_1, NgFor, AsyncPipe, DecimalPipe, BytesPipe, MangaFormatPipe, TranslocoDirective]\n})\nexport class FileBreakdownStatsComponent {\n\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly cdRef = inject(ChangeDetectorRef);\n\n  @ViewChildren(SortableHeader<PieDataItem>) headers!: QueryList<SortableHeader<PieDataItem>>;\n  @ViewChild('tablelayout') tableTemplate!: TemplateRef<any>;\n\n  rawData$!: Observable<FileExtensionBreakdown>;\n  files$!: Observable<Array<FileExtension>>;\n  vizData2$!: Observable<Array<PieDataItem>>;\n\n  currentSort = new BehaviorSubject<SortEvent<FileExtension>>({column: 'extension', direction: 'asc'});\n  currentSort$: Observable<SortEvent<FileExtension>> = this.currentSort.asObservable();\n\n  view: [number, number] = [700, 400];\n\n  formControl: FormControl = new FormControl(true, []);\n\n  private readonly statService = inject(StatisticsService);\n  private readonly translocoService = inject(TranslocoService);\n  private readonly ngbModal = inject(NgbModal);\n\n  constructor() {\n    this.rawData$ = this.statService.getFileBreakdown().pipe(takeUntilDestroyed(this.destroyRef), shareReplay());\n\n    this.files$ = combineLatest([this.currentSort$, this.rawData$]).pipe(\n      map(([sortConfig, data]) => {\n        return {sortConfig, fileBreakdown: data.fileBreakdown};\n      }),\n      map(({ sortConfig, fileBreakdown }) => {\n        return (sortConfig.column) ? fileBreakdown.sort((a: FileExtension, b: FileExtension) => {\n          if (sortConfig.column === '') return 0;\n          const res = compare(a[sortConfig.column], b[sortConfig.column]);\n          return sortConfig.direction === 'asc' ? res : -res;\n        }) : fileBreakdown;\n      }),\n      takeUntilDestroyed(this.destroyRef)\n    );\n\n\n    this.vizData2$ = this.files$.pipe(takeUntilDestroyed(this.destroyRef), map(data => data.map(d => {\n      return {name: d.extension || this.translocoService.translate('file-breakdown-stats.not-classified'), value: d.totalFiles, extra: d.totalSize};\n    })));\n\n    // TODO: See if you can figure this out\n    // this.formControl.valueChanges.pipe(filter(v => !v), takeUntilDestroyed(this.destroyRef), switchMap(_ => {\n    //   const ref = this.ngbModal.open(GenericTableModalComponent);\n    //   ref.componentInstance.title = translate('file-breakdown-stats.format-title');\n    //   ref.componentInstance.bodyTemplate = this.tableTemplate;\n    //   return ref.dismissed;\n    // }, tap(_ => {\n    //   this.formControl.setValue(true);\n    //   this.cdRef.markForCheck();\n    // }))).subscribe();\n  }\n\n  onSort(evt: SortEvent<FileExtension>) {\n    this.currentSort.next(evt);\n\n    // Must clear out headers here\n    this.headers.forEach((header) => {\n      if (header.sortable !== evt.column) {\n        header.direction = '';\n      }\n    });\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'file-breakdown-stats'\">\n  <div class=\"dashboard-card-content\">\n    <div class=\"row g-0 mb-2\">\n      <div class=\"col-8\">\n        <h4><span>{{t('format-title')}}</span>\n          <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"tooltip\" role=\"button\" tabindex=\"0\"></i>\n        </h4>\n      </div>\n      <div class=\"col-4\">\n        <form>\n          <div class=\"form-check form-switch mt-2\">\n            <input id=\"pub-file-breakdown-viz\" type=\"checkbox\" class=\"form-check-input\" [formControl]=\"formControl\" role=\"switch\">\n            <label for=\"pub-file-breakdown-viz\" class=\"form-check-label\">{{formControl.value ? t('visualisation-label') : t('data-table-label') }}</label>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <ng-template #tooltip>{{t('format-tooltip')}}</ng-template>\n\n\n    <ng-container *ngIf=\"files$ | async as files\">\n      <ng-container *ngIf=\"formControl.value; else tableLayout\">\n        <ngx-charts-advanced-pie-chart [results]=\"vizData2$ | async\"></ngx-charts-advanced-pie-chart>\n      </ng-container>\n\n      <ng-template #tableLayout>\n        <table class=\"table table-striped table-striped table-hover table-sm scrollable\">\n          <thead>\n          <tr>\n            <th scope=\"col\" sortable=\"extension\" (sort)=\"onSort($event)\">\n              {{t('extension-header')}}\n            </th>\n            <th scope=\"col\" sortable=\"format\" (sort)=\"onSort($event)\">\n              {{t('format-header')}}\n            </th>\n            <th scope=\"col\" sortable=\"totalSize\" (sort)=\"onSort($event)\">\n              {{t('total-size-header')}}\n            </th>\n            <th scope=\"col\" sortable=\"totalFiles\" (sort)=\"onSort($event)\">\n              {{t('total-files-header')}}\n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr *ngFor=\"let item of files; let idx = index;\">\n            <td id=\"adhoctask--{{idx}}\">\n              {{item.extension || t('not-classified')}}\n            </td>\n            <td>\n              {{item.format | mangaFormat}}\n            </td>\n            <td>\n              {{item.totalSize | bytes}}\n            </td>\n            <td>\n              {{item.totalFiles | number:'1.0-0'}}\n            </td>\n          </tr>\n          </tbody>\n          <tfoot>\n          <tr>\n            <td>{{t('total-file-size-title')}}</td>\n            <td></td>\n            <td></td>\n            <td>{{((rawData$ | async)?.totalFileSize || 0) | bytes}}</td>\n          </tr>\n          </tfoot>\n        </table>\n      </ng-template>\n    </ng-container>\n\n\n  </div>\n\n\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject} from '@angular/core';\nimport {StatisticsService} from \"../../../_services/statistics.service\";\nimport {KavitaPlusMetadataBreakdown} from \"../../_models/kavitaplus-metadata-breakdown\";\nimport {TranslocoDirective} from \"@ngneat/transloco\";\nimport {PercentPipe} from \"@angular/common\";\nimport {NgbProgressbar, NgbProgressbarStacked, NgbTooltip} from \"@ng-bootstrap/ng-bootstrap\";\n\n@Component({\n  selector: 'app-kavitaplus-metadata-breakdown-stats',\n  standalone: true,\n  imports: [\n    TranslocoDirective,\n    PercentPipe,\n    NgbProgressbarStacked,\n    NgbProgressbar,\n    NgbTooltip\n  ],\n  templateUrl: './kavitaplus-metadata-breakdown-stats.component.html',\n  styleUrl: './kavitaplus-metadata-breakdown-stats.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class KavitaplusMetadataBreakdownStatsComponent {\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly statsService = inject(StatisticsService);\n\n  breakdown: KavitaPlusMetadataBreakdown | undefined;\n\n  errorPercent!: number;\n  completedPercent!: number;\n\n\n  constructor() {\n    this.statsService.getKavitaPlusMetadataBreakdown().subscribe(res => {\n      this.breakdown = res;\n\n      this.errorPercent = (res.erroredSeries / res.totalSeries) * 100;\n      this.completedPercent = ((res.seriesCompleted - res.erroredSeries) / res.totalSeries) * 100;\n\n      this.cdRef.markForCheck();\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'kavitaplus-metadata-breakdown-stats'\">\n  <div class=\"dashboard-card-content\">\n    <h4>{{t('title')}}</h4>\n    <p>{{t('description')}}</p>\n\n    @if(breakdown) {\n      @if(breakdown.totalSeries === 0 || breakdown.seriesCompleted === 0) {\n        <div>{{t('no-data')}}</div>\n      } @else {\n        <ngb-progressbar-stacked>\n          <ngb-progressbar type=\"danger\" [showValue]=\"true\" [value]=\"errorPercent\" [ngbTooltip]=\"t('errored-series-label') + ' ' + breakdown.erroredSeries\"></ngb-progressbar>\n          <ngb-progressbar type=\"success\" [showValue]=\"true\" [value]=\"completedPercent\" [ngbTooltip]=\"t('completed-series-label') + ' ' + breakdown.seriesCompleted\"></ngb-progressbar>\n        </ngb-progressbar-stacked>\n        @if (breakdown.seriesCompleted >= breakdown.totalSeries) {\n          <p>{{t('complete') }}\n            @if (breakdown.erroredSeries > 0) {\n              {{t('errored-series-label') }} {{breakdown.erroredSeries}}\n            }\n          </p>\n        }\n      }\n    }\n  </div>\n</ng-container>\n", "import {ChangeDetectionStrategy, Component, DestroyRef, HostListener, inject} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport {map, Observable, ReplaySubject, shareReplay} from 'rxjs';\nimport {FilterUtilitiesService} from 'src/app/shared/_services/filter-utilities.service';\nimport {Breakpoint, UtilityService} from 'src/app/shared/_services/utility.service';\nimport {Series} from 'src/app/_models/series';\nimport {ImageService} from 'src/app/_services/image.service';\nimport {MetadataService} from 'src/app/_services/metadata.service';\nimport {StatisticsService} from 'src/app/_services/statistics.service';\nimport {PieDataItem} from '../../_models/pie-data-item';\nimport {ServerStatistics} from '../../_models/server-statistics';\nimport {GenericListModalComponent} from '../_modals/generic-list-modal/generic-list-modal.component';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport {BytesPipe} from '../../../_pipes/bytes.pipe';\nimport {TimeDurationPipe} from '../../../_pipes/time-duration.pipe';\nimport {CompactNumberPipe} from '../../../_pipes/compact-number.pipe';\nimport {DayBreakdownComponent} from '../day-breakdown/day-breakdown.component';\nimport {ReadingActivityComponent} from '../reading-activity/reading-activity.component';\nimport {PublicationStatusStatsComponent} from '../publication-status-stats/publication-status-stats.component';\nimport {FileBreakdownStatsComponent} from '../file-breakdown-stats/file-breakdown-stats.component';\nimport {TopReadersComponent} from '../top-readers/top-readers.component';\nimport {StatListComponent} from '../stat-list/stat-list.component';\nimport {IconAndTitleComponent} from '../../../shared/icon-and-title/icon-and-title.component';\nimport {AsyncPipe, DecimalPipe, NgIf} from '@angular/common';\nimport {translate, TranslocoDirective, TranslocoService} from \"@ngneat/transloco\";\nimport {FilterComparison} from \"../../../_models/metadata/v2/filter-comparison\";\nimport {FilterField} from \"../../../_models/metadata/v2/filter-field\";\nimport {\n  KavitaplusMetadataBreakdownStatsComponent\n} from \"../kavitaplus-metadata-breakdown-stats/kavitaplus-metadata-breakdown-stats.component\";\nimport {AccountService} from \"../../../_services/account.service\";\n\n@Component({\n    selector: 'app-server-stats',\n    templateUrl: './server-stats.component.html',\n    styleUrls: ['./server-stats.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [NgIf, IconAndTitleComponent, StatListComponent, TopReadersComponent, FileBreakdownStatsComponent,\n    PublicationStatusStatsComponent, ReadingActivityComponent, DayBreakdownComponent, AsyncPipe, DecimalPipe,\n    CompactNumberPipe, TimeDurationPipe, BytesPipe, TranslocoDirective, KavitaplusMetadataBreakdownStatsComponent]\n})\nexport class ServerStatsComponent {\n\n  private readonly destroyRef = inject(DestroyRef);\n  protected readonly accountService = inject(AccountService);\n\n  releaseYears$!: Observable<Array<PieDataItem>>;\n  mostActiveUsers$!: Observable<Array<PieDataItem>>;\n  mostActiveLibrary$!: Observable<Array<PieDataItem>>;\n  mostActiveSeries$!: Observable<Array<PieDataItem>>;\n  recentlyRead$!: Observable<Array<PieDataItem>>;\n  stats$!: Observable<ServerStatistics>;\n  seriesImage: (data: PieDataItem) => string;\n  openSeries = (data: PieDataItem) => {\n    const series = data.extra as Series;\n    this.router.navigate(['library', series.libraryId, 'series', series.id]);\n  }\n\n  breakpointSubject = new ReplaySubject<Breakpoint>(1);\n  breakpoint$: Observable<Breakpoint> = this.breakpointSubject.asObservable();\n\n\n\n  @HostListener('window:resize', ['$event'])\n  @HostListener('window:orientationchange', ['$event'])\n  onResize() {\n    this.breakpointSubject.next(this.utilityService.getActiveBreakpoint());\n  }\n\n  get Breakpoint() { return Breakpoint; }\n\n  constructor(private statService: StatisticsService, private router: Router, private imageService: ImageService,\n    private metadataService: MetadataService, private modalService: NgbModal, private utilityService: UtilityService,\n    private filterUtilityService: FilterUtilitiesService) {\n    this.seriesImage = (data: PieDataItem) => {\n      if (data.extra) return this.imageService.getSeriesCoverImage(data.extra.id);\n      return '';\n    }\n\n    this.breakpointSubject.next(this.utilityService.getActiveBreakpoint());\n\n    this.stats$ = this.statService.getServerStatistics().pipe(takeUntilDestroyed(this.destroyRef), shareReplay());\n    this.releaseYears$ = this.statService.getTopYears().pipe(takeUntilDestroyed(this.destroyRef));\n    this.mostActiveUsers$ = this.stats$.pipe(\n      map(d => d.mostActiveUsers),\n      map(userCounts => userCounts.map(count => {\n        return {name: count.value.username, value: count.count};\n      })),\n      takeUntilDestroyed(this.destroyRef)\n    );\n\n    this.mostActiveLibrary$ = this.stats$.pipe(\n      map(d => d.mostActiveLibraries),\n      map(counts => counts.map(count => {\n        return {name: count.value.name, value: count.count};\n      })),\n      takeUntilDestroyed(this.destroyRef)\n    );\n\n    this.mostActiveSeries$ = this.stats$.pipe(\n      map(d => d.mostReadSeries),\n      map(counts => counts.map(count => {\n        return {name: count.value.name, value: count.count, extra: count.value};\n      })),\n      takeUntilDestroyed(this.destroyRef)\n    );\n\n    this.recentlyRead$ = this.stats$.pipe(\n      map(d => d.recentlyRead),\n      map(counts => counts.map(count => {\n        return {name: count.name, value: -1, extra: count};\n      })),\n      takeUntilDestroyed(this.destroyRef)\n    );\n  }\n\n  openGenreList() {\n    this.metadataService.getAllGenres().subscribe(genres => {\n      const ref = this.modalService.open(GenericListModalComponent, { scrollable: true });\n      ref.componentInstance.items = genres.map(t => t.title);\n      ref.componentInstance.title = translate('server-stats.genres');\n      ref.componentInstance.clicked = (item: string) => {\n        this.filterUtilityService.applyFilter(['all-series'], FilterField.Genres, FilterComparison.Contains, genres.filter(g => g.title === item)[0].id + '').subscribe();\n      };\n    });\n  }\n\n  openTagList() {\n    this.metadataService.getAllTags().subscribe(tags => {\n      const ref = this.modalService.open(GenericListModalComponent, { scrollable: true });\n      ref.componentInstance.items = tags.map(t => t.title);\n      ref.componentInstance.title = translate('server-stats.tags');\n      ref.componentInstance.clicked = (item: string) => {\n        this.filterUtilityService.applyFilter(['all-series'], FilterField.Tags, FilterComparison.Contains, tags.filter(g => g.title === item)[0].id + '').subscribe();\n      };\n    });\n  }\n\n  openPeopleList() {\n    this.metadataService.getAllPeople().subscribe(people => {\n      const ref = this.modalService.open(GenericListModalComponent, { scrollable: true });\n      ref.componentInstance.items = [...new Set(people.map(person => person.name))];\n      ref.componentInstance.title = translate('server-stats.people');\n    });\n  }\n\n\n\n}\n", "<ng-container *transloco=\"let t; read:'server-stats'\">\n  <div class=\"container-fluid\">\n    <div class=\"row g-0 mt-4 mb-3 d-flex justify-content-around\" *ngIf=\"stats$ | async as stats\">\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-series-label')\" [clickable]=\"false\" fontClasses=\"fa-solid fa-book-open\" [title]=\"t('total-series-tooltip', {count: stats.seriesCount | number})\">\n            {{t('series-count', {num: stats.seriesCount | number})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container >\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-volumes-label')\" [clickable]=\"false\" fontClasses=\"fas fa-book\" [title]=\"t('total-volumes-tooltip', {count: stats.volumeCount | number})\">\n            {{t('volume-count', {num: stats.volumeCount | number})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-files-label')\" [clickable]=\"false\" fontClasses=\"fa-regular fa-file\" [title]=\"t('total-files-tooltip', {count: stats.totalFiles | number})\">\n            {{t('file-count', {num: stats.totalFiles | number})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-size-label')\" [clickable]=\"false\" fontClasses=\"fa-solid fa-scale-unbalanced\" [title]=\"t('total-size-label')\">\n            {{stats.totalSize | bytes}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-genres-label')\" [clickable]=\"true\" fontClasses=\"fa-solid fa-tags\" [title]=\"t('total-genres-tooltip', {count: stats.totalGenres | number})\" (click)=\"openGenreList();$event.stopPropagation();\">\n            {{t('genre-count', {num: stats.totalGenres | compactNumber})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-tags-label')\" [clickable]=\"true\" fontClasses=\"fa-solid fa-tags\" [title]=\"t('total-tags-tooltip', {count: stats.totalTags | number})\" (click)=\"openTagList();$event.stopPropagation();\">\n            {{t('tag-count', {num: stats.totalTags | compactNumber})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-people-label')\" [clickable]=\"true\" fontClasses=\"fa-solid fa-user-tag\" [title]=\"t('total-people-tooltip', {count: stats.totalPeople | number})\" (click)=\"openPeopleList();$event.stopPropagation();\">\n            {{t('people-count', {num: stats.totalPeople | compactNumber})}}\n          </app-icon-and-title>\n        </div>\n        <div class=\"vr d-none d-lg-block m-2\"></div>\n      </ng-container>\n\n      <ng-container>\n        <div class=\"col-auto mb-2\">\n          <app-icon-and-title [label]=\"t('total-read-time-label')\" [clickable]=\"false\" fontClasses=\"fas fa-eye\" [title]=\"t('total-read-time-tooltip', {count: stats.totalReadingTime | number})\">\n            {{stats.totalReadingTime | timeDuration}}\n          </app-icon-and-title>\n        </div>\n      </ng-container>\n    </div>\n\n    <div class=\"grid row g-0 pt-2 pb-2 d-flex justify-content-around\">\n      <div class=\"col-auto\">\n        <app-stat-list [data$]=\"releaseYears$\" [title]=\"t('release-years-title')\" [label]=\"t('series')\"></app-stat-list>\n      </div>\n      <div class=\"col-auto\">\n        <app-stat-list [data$]=\"mostActiveUsers$\" [title]=\"t('most-active-users-title')\" [label]=\"t('reads')\"></app-stat-list>\n      </div>\n      <div class=\"col-auto\">\n        <app-stat-list [data$]=\"mostActiveLibrary$\" [title]=\"t('popular-libraries-title')\" [label]=\"t('reads')\"></app-stat-list>\n      </div>\n      <div class=\"col-auto\">\n        <app-stat-list [data$]=\"mostActiveSeries$\" [title]=\"t('popular-series-title')\" [image]=\"seriesImage\" [handleClick]=\"openSeries\">\n        </app-stat-list>\n      </div>\n      <div class=\"col-auto\">\n        <app-stat-list [data$]=\"recentlyRead$\" [title]=\"t('recently-read-title')\" [image]=\"seriesImage\" [handleClick]=\"openSeries\"></app-stat-list>\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"breakpoint$ | async as bp\">\n      <div class=\"row g-0 pt-2 pb-2\">\n        <app-top-readers></app-top-readers>\n      </div>\n\n      <div class=\"row g-0 pt-4 pb-2\">\n        <div class=\"col-lg-6 col-md-12 mb-md-5\">\n          <app-file-breakdown-stats></app-file-breakdown-stats>\n        </div>\n        <div class=\"col-lg-6 col-md-12\">\n          <app-publication-status-stats></app-publication-status-stats>\n        </div>\n      </div>\n\n      <div class=\"row g-0 pt-4 pb-2\">\n        <div class=\"col-md-12 col-sm-12 mt-4 pt-2\">\n          <app-reading-activity [isAdmin]=\"true\"></app-reading-activity>\n        </div>\n      </div>\n\n      <div class=\"row g-0 pt-4 pb-2\">\n        <div class=\"col-md-6 col-sm-12 mt-4 pt-2\">\n          <app-day-breakdown></app-day-breakdown>\n        </div>\n        @if (accountService.hasValidLicense$ | async) {\n          <div class=\"col-md-4 col-md-offset-2 col-sm-12 mt-4 pt-2\">\n            <app-kavitaplus-metadata-breakdown-stats></app-kavitaplus-metadata-breakdown-stats>\n          </div>\n        }\n      </div>\n    </ng-container>\n\n  </div>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {ServerService} from 'src/app/_services/server.service';\nimport {ServerInfoSlim} from '../_models/server-info';\nimport {NgIf} from '@angular/common';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\nimport {ChangelogComponent} from \"../../announcements/_components/changelog/changelog.component\";\n\n@Component({\n    selector: 'app-manage-system',\n    templateUrl: './manage-system.component.html',\n    styleUrls: ['./manage-system.component.scss'],\n    standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgIf, TranslocoDirective, ChangelogComponent]\n})\nexport class ManageSystemComponent implements OnInit {\n\n  serverInfo!: ServerInfoSlim;\n  private readonly cdRef = inject(ChangeDetectorRef);\n\n\n  constructor(public serverService: ServerService) { }\n\n  ngOnInit(): void {\n\n    this.serverService.getServerInfo().subscribe(info => {\n      this.serverInfo = info;\n      this.cdRef.markForCheck();\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-system'\">\n  <div class=\"container-fluid\">\n\n    <div class=\"mb-3\" *ngIf=\"serverInfo\">\n      <h3>{{t('title')}}</h3>\n      <dl>\n        <dt>{{t('version-title')}}</dt>\n        <dd>{{serverInfo.kavitaVersion}}</dd>\n\n        <dt>{{t('installId-title')}}</dt>\n        <dd>{{serverInfo.installId}}</dd>\n      </dl>\n    </div>\n\n    <div class=\"mb-3\">\n      <h3>{{t('more-info-title')}}</h3>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('home-page-title')}}</div>\n        <div class=\"col\"><a href=\"https://www.kavitareader.com\" target=\"_blank\" rel=\"noopener noreferrer\">kavitareader.com</a></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('wiki-title')}}</div>\n        <div class=\"col\"><a href=\"https://wiki.kavitareader.com\" target=\"_blank\" rel=\"noopener noreferrer\">wiki.kavitareader.com</a></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('discord-title')}}</div>\n        <div class=\"col\"><a href=\"https://discord.gg/b52wT37kt7\" target=\"_blank\" rel=\"noopener noreferrer\">discord.gg/b52wT37kt7</a></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('donations-title')}}</div>\n        <div class=\"col\"><a href=\"https://opencollective.com/kavita\" target=\"_blank\" rel=\"noopener noreferrer\">opencollective.com/kavita</a></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('source-title')}}</div>\n        <div class=\"col\"><a href=\"https://github.com/Kareadita/Kavita\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/Kareadita/Kavita</a></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('localization-title')}}</div>\n        <div class=\"col\"><a href=\"https://hosted.weblate.org/engage/kavita/\" target=\"_blank\" rel=\"noopener noreferrer\">Weblate</a><br/></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-4\">{{t('feature-request-title')}}</div>\n        <div class=\"col\"><a href=\"https://github.com/Kareadita/Kavita/discussions/2529\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Kareadita/Kavita/discussions/</a><br/></div>\n      </div>\n    </div>\n\n    <div class=\"mb-3\">\n      <h3>{{t('updates-title')}}</h3>\n      <app-changelog></app-changelog>\n    </div>\n\n  </div>\n\n</ng-container>\n", "import {inject, Pipe, PipeTransform} from '@angular/core';\nimport { LibraryType } from '../_models/library/library';\nimport {TranslocoService} from \"@ngneat/transloco\";\n\n/**\n * Returns the name of the LibraryType\n */\n@Pipe({\n  name: 'libraryType',\n  standalone: true\n})\nexport class LibraryTypePipe implements PipeTransform {\n\n  translocoService = inject(TranslocoService);\n  transform(libraryType: LibraryType): string {\n    switch (libraryType) {\n      case LibraryType.Book:\n        return this.translocoService.translate('library-type-pipe.book');\n      case LibraryType.Comic:\n        return this.translocoService.translate('library-type-pipe.comic');\n      case LibraryType.ComicVine:\n        return this.translocoService.translate('library-type-pipe.comicVine');\n      case LibraryType.Images:\n        return this.translocoService.translate('library-type-pipe.image');\n      case LibraryType.Manga:\n        return this.translocoService.translate('library-type-pipe.manga');\n      case LibraryType.LightNovel:\n        return this.translocoService.translate('library-type-pipe.lightNovel');\n      default:\n        return '';\n    }\n  }\n\n}\n", "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnInit\n} from '@angular/core';\nimport { NgbModal, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { distinctUntilChanged, filter, take } from 'rxjs/operators';\nimport { ConfirmService } from 'src/app/shared/confirm.service';\nimport { LibrarySettingsModalComponent } from 'src/app/sidenav/_modals/library-settings-modal/library-settings-modal.component';\nimport { NotificationProgressEvent } from 'src/app/_models/events/notification-progress-event';\nimport { ScanSeriesEvent } from 'src/app/_models/events/scan-series-event';\nimport { Library } from 'src/app/_models/library/library';\nimport { LibraryService } from 'src/app/_services/library.service';\nimport { EVENTS, Message, MessageHubService } from 'src/app/_services/message-hub.service';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { SentenceCasePipe } from '../../_pipes/sentence-case.pipe';\nimport { TimeAgoPipe } from '../../_pipes/time-ago.pipe';\nimport { LibraryTypePipe } from '../../_pipes/library-type.pipe';\nimport { RouterLink } from '@angular/router';\nimport { NgFor, NgIf } from '@angular/common';\nimport {translate, TranslocoModule} from \"@ngneat/transloco\";\nimport {DefaultDatePipe} from \"../../_pipes/default-date.pipe\";\nimport {ActionService} from \"../../_services/action.service\";\n\n@Component({\n    selector: 'app-manage-library',\n    templateUrl: './manage-library.component.html',\n    styleUrls: ['./manage-library.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [NgFor, RouterLink, NgbTooltip, NgIf, LibraryTypePipe, TimeAgoPipe, SentenceCasePipe, TranslocoModule, DefaultDatePipe]\n})\nexport class ManageLibraryComponent implements OnInit {\n\n  private readonly actionService = inject(ActionService);\n  private readonly libraryService = inject(LibraryService);\n  private readonly modalService = inject(NgbModal);\n  private readonly toastr = inject(ToastrService);\n  private readonly confirmService = inject(ConfirmService);\n  private readonly hubService = inject(MessageHubService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n\n  libraries: Library[] = [];\n  loading = false;\n  /**\n   * If a deletion is in progress for a library\n   */\n  deletionInProgress: boolean = false;\n  libraryTrackBy = (index: number, item: Library) => `${item.name}_${item.lastScanned}_${item.type}_${item.folders.length}`;\n\n\n\n  ngOnInit(): void {\n    this.getLibraries();\n\n    // when a progress event comes in, show it on the UI next to library\n    this.hubService.messages$.pipe(takeUntilDestroyed(this.destroyRef),\n      filter(event => event.event === EVENTS.ScanSeries || event.event === EVENTS.NotificationProgress),\n      distinctUntilChanged((prev: Message<ScanSeriesEvent | NotificationProgressEvent>, curr: Message<ScanSeriesEvent | NotificationProgressEvent>) =>\n        this.hasMessageChanged(prev, curr)))\n      .subscribe((event: Message<ScanSeriesEvent | NotificationProgressEvent>) => {\n        let libId = 0;\n        if (event.event === EVENTS.ScanSeries) {\n          libId = (event.payload as ScanSeriesEvent).libraryId;\n        } else {\n          if ((event.payload as NotificationProgressEvent).body.hasOwnProperty('libraryId')) {\n            libId = (event.payload as NotificationProgressEvent).body.libraryId;\n          }\n        }\n\n        this.libraryService.getLibraries().pipe(take(1)).subscribe(libraries => {\n          const newLibrary = libraries.find(lib => lib.id === libId);\n          const existingLibrary = this.libraries.find(lib => lib.id === libId);\n          if (existingLibrary !== undefined) {\n            existingLibrary.lastScanned = newLibrary?.lastScanned || existingLibrary.lastScanned;\n            this.cdRef.markForCheck();\n          }\n        });\n    });\n  }\n\n  hasMessageChanged(prev: Message<ScanSeriesEvent | NotificationProgressEvent>, curr: Message<ScanSeriesEvent | NotificationProgressEvent>) {\n    if (curr.event !== prev.event) return true;\n    if (curr.event === EVENTS.ScanSeries) {\n      return (prev.payload as ScanSeriesEvent).libraryId === (curr.payload as ScanSeriesEvent).libraryId;\n    }\n    if (curr.event === EVENTS.NotificationProgress) {\n      return (prev.payload as NotificationProgressEvent).eventType != (curr.payload as NotificationProgressEvent).eventType;\n    }\n    return false;\n  }\n\n  getLibraries() {\n    this.loading = true;\n    this.cdRef.markForCheck();\n    this.libraryService.getLibraries().pipe(take(1), takeUntilDestroyed(this.destroyRef)).subscribe(libraries => {\n      this.libraries = [...libraries];\n      this.loading = false;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  editLibrary(library: Library) {\n    const modalRef = this.modalService.open(LibrarySettingsModalComponent, {  size: 'xl', fullscreen: 'md' });\n    modalRef.componentInstance.library = library;\n    modalRef.closed.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(refresh => {\n      if (refresh) {\n        this.getLibraries();\n      }\n    });\n  }\n\n  addLibrary() {\n    const modalRef = this.modalService.open(LibrarySettingsModalComponent, {  size: 'xl', fullscreen: 'md' });\n    modalRef.closed.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(refresh => {\n      if (refresh) {\n        this.getLibraries();\n      }\n    });\n  }\n\n  async deleteLibrary(library: Library) {\n    if (await this.confirmService.confirm(translate('toasts.confirm-library-delete', {name: library.name}))) {\n      this.deletionInProgress = true;\n      this.libraryService.delete(library.id).pipe(take(1)).subscribe(() => {\n        this.deletionInProgress = false;\n        this.cdRef.markForCheck();\n        this.getLibraries();\n        this.toastr.success(translate('toasts.library-deleted', {name: library.name}));\n      });\n    }\n  }\n\n  scanLibrary(library: Library) {\n    this.libraryService.scan(library.id).pipe(take(1)).subscribe(() => {\n      this.toastr.info(translate('toasts.scan-queued', {name: library.name}));\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-library'\">\n  <div class=\"container-fluid\">\n    <div class=\"row mb-2\">\n      <div class=\"col-8\"><h3>{{t('title')}}</h3></div>\n      <div class=\"col-4\"><button class=\"btn btn-primary float-end\" (click)=\"addLibrary()\" [title]=\"t('add-library')\">\n        <i class=\"fa fa-plus\" aria-hidden=\"true\"></i><span class=\"phone-hidden ms-1\">{{t('add-library')}}</span></button>\n      </div>\n    </div>\n    <ul class=\"list-group\">\n      <li *ngFor=\"let library of libraries; let idx = index; trackBy: libraryTrackBy\" class=\"list-group-item no-hover\">\n        <div>\n          <h4>\n            <span id=\"library-name--{{idx}}\"><a [routerLink]=\"'/library/' + library.id\">{{library.name}}</a></span>&nbsp;\n            <div class=\"float-end\">\n              <button class=\"btn btn-secondary me-2 btn-sm\" (click)=\"scanLibrary(library)\" placement=\"top\" [ngbTooltip]=\"t('scan-library')\" [attr.aria-label]=\"t('scan-library')\"><i class=\"fa fa-sync-alt\" aria-hidden=\"true\"></i></button>\n              <button class=\"btn btn-danger me-2 btn-sm\" [disabled]=\"deletionInProgress\" (click)=\"deleteLibrary(library)\"><i class=\"fa fa-trash\" placement=\"top\" [ngbTooltip]=\"t('delete-library')\" [attr.aria-label]=\"t('delete-library-by-name', {name: library.name | sentenceCase})\"></i></button>\n              <button class=\"btn btn-primary btn-sm\" (click)=\"editLibrary(library)\"><i class=\"fa fa-pen\" placement=\"top\" [ngbTooltip]=\"t('edit-library')\" [attr.aria-label]=\"t('edit-library-by-name', {name: library.name | sentenceCase})\"></i></button>\n            </div>\n          </h4>\n        </div>\n        <div>{{t('type-title')}} {{library.type | libraryType}}</div>\n        <div>{{t('shared-folders-title')}} {{library.folders.length + ' folders'}}</div>\n        <div>\n          {{t('last-scanned-title')}}\n          <span *ngIf=\"library.lastScanned === '0001-01-01T00:00:00'; else activeDate\">Never</span>\n          <ng-template #activeDate>\n            {{library.lastScanned | timeAgo | defaultDate}}\n          </ng-template>\n        </div>\n      </li>\n      <li *ngIf=\"loading\" class=\"list-group-item\">\n        <div class=\"spinner-border text-primary\" role=\"status\">\n          <span class=\"invisible\">{{t('loading')}}</span>\n        </div>\n      </li>\n      <li class=\"list-group-item\" *ngIf=\"libraries.length === 0 && !loading\">\n        {{t('no-data')}}\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", "import {Component, inject, Input} from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Member } from 'src/app/_models/auth/member';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { SentenceCasePipe } from '../../../_pipes/sentence-case.pipe';\nimport { NgIf } from '@angular/common';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {ToastrService} from \"ngx-toastr\";\n\n@Component({\n    selector: 'app-reset-password-modal',\n    templateUrl: './reset-password-modal.component.html',\n    styleUrls: ['./reset-password-modal.component.scss'],\n    standalone: true,\n    imports: [ReactiveFormsModule, NgIf, SentenceCasePipe, TranslocoDirective]\n})\nexport class ResetPasswordModalComponent {\n\n  private readonly toastr = inject(ToastrService);\n  private readonly accountService = inject(AccountService);\n  public readonly modal = inject(NgbActiveModal);\n\n  @Input({required: true}) member!: Member;\n\n  errorMessage = '';\n  resetPasswordForm: FormGroup = new FormGroup({\n    password: new FormControl('', [Validators.required]),\n  });\n\n\n  save() {\n    this.accountService.resetPassword(this.member.username, this.resetPasswordForm.value.password,'').subscribe(() => {\n      this.toastr.success(translate('toasts.password-updated'))\n      this.modal.close();\n    });\n  }\n\n  close() {\n    this.modal.close();\n  }\n\n}\n", "<ng-container *transloco=\"let t; read:'reset-password-modal'\">\n  <form [formGroup]=\"resetPasswordForm\">\n    <div class=\"modal-header\">\n      <h4 class=\"modal-title\" id=\"modal-basic-title\">{{t('title', {username: member.username | sentenceCase})}}</h4>\n      <button type=\"button\" class=\"btn-close\" [attr.aria-label]=\"t('close')\" (click)=\"close()\">\n\n      </button>\n    </div>\n    <div class=\"modal-body\">\n      <div class=\"alert alert-info\" *ngIf=\"errorMessage !== ''\">\n        <strong>{{t('error-label')}}</strong> {{errorMessage}}\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"password\" class=\"form-label\">{{t('new-password-label')}}</label>\n        <input id=\"password\" class=\"form-control\" minlength=\"4\" formControlName=\"password\" type=\"password\">\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">{{t('cancel')}}</button>\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"resetPasswordForm.value.password.length === 0\" (click)=\"save()\">{{t('save')}}</button>\n    </div>\n  </form>\n</ng-container>\n", "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Library } from 'src/app/_models/library/library';\nimport { Member } from 'src/app/_models/auth/member';\nimport { LibraryService } from 'src/app/_services/library.service';\nimport { SelectionModel } from 'src/app/typeahead/_components/typeahead.component';\nimport { NgIf, NgFor } from '@angular/common';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-library-selector',\n    templateUrl: './library-selector.component.html',\n    styleUrls: ['./library-selector.component.scss'],\n    standalone: true,\n  imports: [NgIf, ReactiveFormsModule, FormsModule, NgFor, TranslocoDirective]\n})\nexport class LibrarySelectorComponent implements OnInit {\n\n  @Input() member: Member | undefined;\n  @Output() selected: EventEmitter<Array<Library>> = new EventEmitter<Array<Library>>();\n\n  allLibraries: Library[] = [];\n  selectedLibraries: Array<{selected: boolean, data: Library}> = [];\n  selections!: SelectionModel<Library>;\n  selectAll: boolean = false;\n  isLoading: boolean = false;\n\n  get hasSomeSelected() {\n    return this.selections != null && this.selections.hasSomeSelected();\n  }\n\n  constructor(private libraryService: LibraryService, private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.libraryService.getLibraries().subscribe(libs => {\n      this.allLibraries = libs;\n      this.setupSelections();\n    });\n  }\n\n\n  setupSelections() {\n    this.selections = new SelectionModel<Library>(false, this.allLibraries);\n    this.isLoading = false;\n\n    // If a member is passed in, then auto-select their libraries\n    if (this.member !== undefined) {\n      this.member.libraries.forEach(lib => {\n        this.selections.toggle(lib, true, (a, b) => a.name === b.name);\n      });\n      this.selectAll = this.selections.selected().length === this.allLibraries.length;\n      this.selected.emit(this.selections.selected());\n    }\n  }\n\n  toggleAll() {\n    this.selectAll = !this.selectAll;\n    this.allLibraries.forEach(s => this.selections.toggle(s, this.selectAll));\n    this.selected.emit(this.selections.selected());\n  }\n\n  handleSelection(item: Library) {\n    this.selections.toggle(item);\n    const numberOfSelected = this.selections.selected().length;\n    if (numberOfSelected == 0) {\n      this.selectAll = false;\n    } else if (numberOfSelected == this.selectedLibraries.length) {\n      this.selectAll = true;\n    }\n\n    this.selected.emit(this.selections.selected());\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'library-selector'\">\n  <h4>{{t('title')}}</h4>\n  <div class=\"list-group\" *ngIf=\"!isLoading\">\n    <div class=\"form-check\" *ngIf=\"allLibraries.length > 0\">\n      <input id=\"select-all\" type=\"checkbox\" class=\"form-check-input\"\n             [ngModel]=\"selectAll\" (change)=\"toggleAll()\" [indeterminate]=\"hasSomeSelected\">\n      <label for=\"select-all\" class=\"form-check-label\">{{selectAll ? t('deselect-all') : t('select-all')}}</label>\n    </div>\n    <ul>\n      <li class=\"list-group-item\" *ngFor=\"let library of allLibraries; let i = index\">\n        <div class=\"form-check\">\n          <input id=\"library-{{i}}\" type=\"checkbox\" class=\"form-check-input\"\n                 [ngModel]=\"selections.isSelected(library)\" (change)=\"handleSelection(library)\">\n          <label for=\"library-{{i}}\" class=\"form-check-label\">{{library.name}}</label>\n        </div>\n      </li>\n      <li class=\"list-group-item\" *ngIf=\"allLibraries.length === 0\">\n        {{t('no-data')}}\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Member } from 'src/app/_models/auth/member';\nimport { User } from 'src/app/_models/user';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { NgFor } from '@angular/common';\nimport {TranslocoDirective,} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-role-selector',\n    templateUrl: './role-selector.component.html',\n    styleUrls: ['./role-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [NgFor, ReactiveFormsModule, FormsModule, TranslocoDirective]\n})\nexport class RoleSelectorComponent implements OnInit {\n\n  /**\n   * This must have roles\n   */\n  @Input() member: Member | undefined | User;\n  /**\n   * Allows the selection of Admin role\n   */\n  @Input() allowAdmin: boolean = false;\n  @Output() selected: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  allRoles: string[] = [];\n  selectedRoles: Array<{selected: boolean, disabled: boolean, data: string}> = [];\n\n  constructor(public modal: NgbActiveModal, private accountService: AccountService, private readonly cdRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.accountService.getRoles().subscribe(roles => {\n      const bannedRoles = ['Pleb'];\n      if (!this.allowAdmin) {\n        bannedRoles.push('Admin');\n      }\n      roles = roles.filter(item => !bannedRoles.includes(item));\n      this.allRoles = roles;\n      this.selectedRoles = roles.map(item => {\n        return {selected: false, disabled: false, data: item};\n      });\n      this.cdRef.markForCheck();\n      this.preselect();\n      this.selected.emit(this.selectedRoles.filter(item => item.selected).map(item => item.data));\n    });\n  }\n\n  preselect() {\n    if (this.member !== undefined) {\n      this.member.roles.forEach(role => {\n        const foundRole = this.selectedRoles.filter(item => item.data === role);\n        if (foundRole.length > 0) {\n          foundRole[0].selected = true;\n        }\n      });\n    } else {\n      // For new users, preselect LoginRole\n      this.selectedRoles.forEach(role => {\n        if (role.data == 'Login') {\n          role.selected = true;\n        }\n      });\n    }\n    this.cdRef.markForCheck();\n  }\n\n  handleModelUpdate() {\n    const roles = this.selectedRoles.filter(item => item.selected).map(item => item.data);\n    if (roles.filter(r => r === 'Admin').length > 0) {\n      // Disable all other items as Admin is selected\n      this.selectedRoles.filter(item => item.data !== 'Admin').forEach(e => {\n        e.disabled = true;\n      });\n    } else {\n      // Re-enable everything\n      this.selectedRoles.forEach(e => {\n        e.disabled = false;\n      });\n    }\n    this.cdRef.markForCheck();\n    this.selected.emit(roles);\n  }\n\n}\n", "<ng-container *transloco=\"let t; read:'role-selector'\">\n  <h4>{{t('title')}}</h4>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\" *ngFor=\"let role of selectedRoles; let i = index\">\n      <div class=\"form-check\">\n        <input id=\"role-{{i}}\" type=\"checkbox\" class=\"form-check-input\"\n               [(ngModel)]=\"role.selected\" [disabled]=\"role.disabled\" name=\"role\" (ngModelChange)=\"handleModelUpdate()\">\n        <label for=\"role-{{i}}\" class=\"form-check-label\">{{role.data}}</label>\n      </div>\n    </li>\n  </ul>\n</ng-container>\n", "import {ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { AgeRestriction } from 'src/app/_models/metadata/age-restriction';\nimport { InviteUserResponse } from 'src/app/_models/auth/invite-user-response';\nimport { Library } from 'src/app/_models/library/library';\nimport { AgeRating } from 'src/app/_models/metadata/age-rating';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { ApiKeyComponent } from '../../user-settings/api-key/api-key.component';\nimport { RestrictionSelectorComponent } from '../../user-settings/restriction-selector/restriction-selector.component';\nimport { LibrarySelectorComponent } from '../library-selector/library-selector.component';\nimport { RoleSelectorComponent } from '../role-selector/role-selector.component';\nimport { NgIf } from '@angular/common';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {SafeHtmlPipe} from \"../../_pipes/safe-html.pipe\";\n\n@Component({\n    selector: 'app-invite-user',\n    templateUrl: './invite-user.component.html',\n    styleUrls: ['./invite-user.component.scss'],\n    standalone: true,\n    imports: [NgIf, ReactiveFormsModule, RoleSelectorComponent, LibrarySelectorComponent, RestrictionSelectorComponent, ApiKeyComponent, TranslocoDirective, SafeHtmlPipe]\n})\nexport class InviteUserComponent implements OnInit {\n\n  /**\n   * Maintains if the backend is sending an email\n   */\n  isSending: boolean = false;\n  inviteForm: FormGroup = new FormGroup({});\n  selectedRoles: Array<string> = [];\n  selectedLibraries: Array<number> = [];\n  selectedRestriction: AgeRestriction = {ageRating: AgeRating.NotApplicable, includeUnknowns: false};\n  emailLink: string = '';\n  invited: boolean = false;\n  inviteError: boolean = false;\n\n  private readonly cdRef = inject(ChangeDetectorRef);\n\n  makeLink: (val: string) => string = (val: string) => {return this.emailLink};\n\n  public get hasAdminRoleSelected() { return this.selectedRoles.includes('Admin'); };\n\n  public get email() { return this.inviteForm.get('email'); }\n\n  constructor(public modal: NgbActiveModal, private accountService: AccountService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.inviteForm.addControl('email', new FormControl('', [Validators.required]));\n  }\n\n  close() {\n    this.modal.close(false);\n  }\n\n  invite() {\n    this.isSending = true;\n    const email = this.inviteForm.get('email')?.value.trim();\n    this.accountService.inviteUser({\n      email,\n      libraries: this.selectedLibraries,\n      roles: this.selectedRoles,\n      ageRestriction: this.selectedRestriction\n    }).subscribe((data: InviteUserResponse) => {\n      this.emailLink = data.emailLink;\n      this.isSending = false;\n      this.invited = true;\n      this.cdRef.markForCheck();\n\n      if (data.invalidEmail) {\n        this.toastr.info(translate('toasts.email-not-sent'));\n        this.inviteError = true;\n        this.cdRef.markForCheck();\n        return;\n      }\n\n      if (data.emailSent) {\n        this.toastr.info(translate('toasts.email-sent', {email: email}));\n        this.modal.close(true);\n      }\n\n    }, err => {\n      // Note to self: If you need to catch an error, do it, but don't toast because interceptor handles that\n      this.isSending = false;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  updateRoleSelection(roles: Array<string>) {\n    this.selectedRoles = roles;\n  }\n\n  updateLibrarySelection(libraries: Array<Library>) {\n    this.selectedLibraries = libraries.map(l => l.id);\n  }\n\n  updateRestrictionSelection(restriction: AgeRestriction) {\n    this.selectedRestriction = restriction;\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'invite-user'\">\n  <div class=\"modal-container\">\n    <div class=\"modal-header\">\n      <h4 class=\"modal-title\" id=\"modal-basic-title\">{{t('title')}}</h4>\n      <button type=\"button\" class=\"btn-close\" [attr.aria-label]=\"t('close')\" (click)=\"close()\"></button>\n    </div>\n    <div class=\"modal-body scrollable-modal\">\n      <p *ngIf=\"!invited\" [innerHTML]=\"t('description') | safeHtml\"></p>\n\n      <form [formGroup]=\"inviteForm\" *ngIf=\"emailLink === ''\">\n        <div class=\"row g-0\">\n          <div class=\"mb-3\" style=\"width:100%\">\n            <label for=\"email\" class=\"form-label\">{{t('email')}}</label>\n            <input class=\"form-control\" type=\"email\" inputmode=\"email\" id=\"email\" formControlName=\"email\" required [class.is-invalid]=\"inviteForm.get('email')?.invalid && inviteForm.get('email')?.touched\">\n            <div id=\"inviteForm-validations\" class=\"invalid-feedback\" *ngIf=\"inviteForm.dirty || inviteForm.touched\">\n              <div *ngIf=\"email?.errors?.required\">\n                {{t('required-field')}}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row g-0\">\n          <div class=\"col-md-6\">\n            <app-role-selector (selected)=\"updateRoleSelection($event)\" [allowAdmin]=\"true\"></app-role-selector>\n          </div>\n\n          <div class=\"col-md-6\">\n            <app-library-selector (selected)=\"updateLibrarySelection($event)\"></app-library-selector>\n          </div>\n        </div>\n\n        <div class=\"row g-0\">\n          <div class=\"col-md-12\">\n            <app-restriction-selector (selected)=\"updateRestrictionSelection($event)\" [isAdmin]=\"hasAdminRoleSelected\"></app-restriction-selector>\n          </div>\n        </div>\n      </form>\n\n      <ng-container *ngIf=\"emailLink !== ''\">\n        <h4>{{t('setup-user-title')}}</h4>\n        <p>{{t('setup-user-description')}}</p>\n        @if (inviteError) {\n          <div class=\"alert alert-warning\" role=\"alert\">\n            <strong>{{t('notice')}}</strong> {{t('email-not-sent')}}\n          </div>\n        }\n        <a class=\"email-link\" href=\"{{emailLink}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{t('setup-user-account')}}</a>\n        <app-api-key [title]=\"t('invite-url-label')\" [tooltipText]=\"t('setup-user-account-tooltip')\" [hideData]=\"false\" [showRefresh]=\"false\" [transform]=\"makeLink\"></app-api-key>\n      </ng-container>\n\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-{{invited ? 'primary' : 'secondary'}}\" (click)=\"close()\">\n        {{invited ? t('cancel') : t('close')}}\n      </button>\n      <button *ngIf=\"!invited\" type=\"button\" class=\"btn btn-primary\" (click)=\"invite()\" [disabled]=\"isSending || !inviteForm.valid  || emailLink !== ''\">\n        <span *ngIf=\"isSending\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        <span>{{isSending ? t('inviting') : t('invite')}}</span>\n      </button>\n    </div>\n  </div>\n</ng-container>\n", "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { AgeRestriction } from 'src/app/_models/metadata/age-restriction';\nimport { Library } from 'src/app/_models/library/library';\nimport { Member } from 'src/app/_models/auth/member';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { SentenceCasePipe } from '../../_pipes/sentence-case.pipe';\nimport { RestrictionSelectorComponent } from '../../user-settings/restriction-selector/restriction-selector.component';\nimport { LibrarySelectorComponent } from '../library-selector/library-selector.component';\nimport { RoleSelectorComponent } from '../role-selector/role-selector.component';\nimport { NgIf } from '@angular/common';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\n\nconst AllowedUsernameCharacters = /^[\\sa-zA-Z0-9\\-._@+/\\s]*$/;\n\n@Component({\n    selector: 'app-edit-user',\n    templateUrl: './edit-user.component.html',\n    styleUrls: ['./edit-user.component.scss'],\n    standalone: true,\n  imports: [ReactiveFormsModule, NgIf, RoleSelectorComponent, LibrarySelectorComponent, RestrictionSelectorComponent, SentenceCasePipe, TranslocoDirective]\n})\nexport class EditUserComponent implements OnInit {\n\n  @Input({required: true}) member!: Member;\n\n  selectedRoles: Array<string> = [];\n  selectedLibraries: Array<number> = [];\n  selectedRestriction!: AgeRestriction;\n  isSaving: boolean = false;\n\n  userForm: FormGroup = new FormGroup({});\n\n  allowedCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+/';\n\n  public get email() { return this.userForm.get('email'); }\n  public get username() { return this.userForm.get('username'); }\n  public get password() { return this.userForm.get('password'); }\n  public get hasAdminRoleSelected() { return this.selectedRoles.includes('Admin'); };\n\n  constructor(public modal: NgbActiveModal, private accountService: AccountService) { }\n\n  ngOnInit(): void {\n    this.userForm.addControl('email', new FormControl(this.member.email, [Validators.required, Validators.email]));\n    this.userForm.addControl('username', new FormControl(this.member.username, [Validators.required, Validators.pattern(AllowedUsernameCharacters)]));\n\n    this.userForm.get('email')?.disable();\n    this.selectedRestriction = this.member.ageRestriction;\n  }\n\n  updateRoleSelection(roles: Array<string>) {\n    this.selectedRoles = roles;\n  }\n\n  updateRestrictionSelection(restriction: AgeRestriction) {\n    this.selectedRestriction = restriction;\n  }\n\n  updateLibrarySelection(libraries: Array<Library>) {\n    this.selectedLibraries = libraries.map(l => l.id);\n  }\n\n  close() {\n    this.modal.close(false);\n  }\n\n  save() {\n    const model = this.userForm.getRawValue();\n    model.userId = this.member.id;\n    model.roles = this.selectedRoles;\n    model.libraries = this.selectedLibraries;\n    model.ageRestriction = this.selectedRestriction;\n    this.accountService.update(model).subscribe(() => {\n      this.modal.close(true);\n    });\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'edit-user'\">\n    <div class=\"modal-container\">\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">{{t('edit')}} {{member.username | sentenceCase}}</h4>\n            <button type=\"button\" class=\"btn-close\" [attr.aria-label]=\"t('close')\" (click)=\"close()\">\n\n            </button>\n        </div>\n        <div class=\"modal-body scrollable-modal\">\n\n            <form [formGroup]=\"userForm\">\n                <div class=\"row g-0\">\n                    <div class=\"col-md-6 col-sm-12 pe-2\">\n                        <div class=\"mb-3\">\n                            <label for=\"username\" class=\"form-label\">{{t('username')}}</label>\n                            <input id=\"username\" class=\"form-control\" formControlName=\"username\" type=\"text\"\n                                [class.is-invalid]=\"userForm.get('username')?.invalid && userForm.get('username')?.touched\" aria-describedby=\"username-validations\">\n                            <div id=\"username-validations\" class=\"invalid-feedback\" *ngIf=\"userForm.dirty || userForm.touched\">\n                                <div *ngIf=\"userForm.get('username')?.errors?.required\">\n                                    {{t('required')}}\n                                </div>\n                              <div *ngIf=\"userForm.get('username')?.errors?.pattern\">\n                                    {{t('username-pattern', {characters: allowedCharacters})}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-md-6 col-sm-12\">\n                        <div class=\"mb-3\" style=\"width:100%\">\n                            <label for=\"email\" class=\"form-label\">{{t('email')}}</label>\n                            <input class=\"form-control\" inputmode=\"email\" type=\"email\" id=\"email\"\n                                   [class.is-invalid]=\"userForm.get('email')?.invalid && userForm.get('email')?.touched\"\n                                   formControlName=\"email\" aria-describedby=\"email-validations\">\n                            <div id=\"email-validations\" class=\"invalid-feedback\"\n                                *ngIf=\"userForm.dirty || userForm.touched\">\n                                <div *ngIf=\"userForm.get('email')?.errors?.required\">\n                                    {{t('required')}}\n                                </div>\n                                <div *ngIf=\"userForm.get('email')?.errors?.email\">\n                                    {{t('not-valid-email')}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row g-0\">\n                    <div class=\"col-md-6\">\n                        <app-role-selector (selected)=\"updateRoleSelection($event)\" [allowAdmin]=\"true\" [member]=\"member\"></app-role-selector>\n                    </div>\n\n                    <div class=\"col-md-6\">\n                        <app-library-selector (selected)=\"updateLibrarySelection($event)\" [member]=\"member\"></app-library-selector>\n                    </div>\n                </div>\n\n                <div class=\"row g-0\">\n                    <div class=\"col-md-12\">\n                        <app-restriction-selector (selected)=\"updateRestrictionSelection($event)\" [isAdmin]=\"hasAdminRoleSelected\" [member]=\"member\"></app-restriction-selector>\n                    </div>\n                </div>\n            </form>\n\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">\n                {{t('cancel')}}\n            </button>\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"save()\" [disabled]=\"isSaving || !userForm.valid\">\n                <span *ngIf=\"isSaving\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                <span>{{isSaving ? t('saving') : t('update')}}</span>\n            </button>\n        </div>\n    </div>\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {NgbModal, NgbTooltip} from '@ng-bootstrap/ng-bootstrap';\nimport {take} from 'rxjs/operators';\nimport {MemberService} from 'src/app/_services/member.service';\nimport {Member} from 'src/app/_models/auth/member';\nimport {AccountService} from 'src/app/_services/account.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {ResetPasswordModalComponent} from '../_modals/reset-password-modal/reset-password-modal.component';\nimport {ConfirmService} from 'src/app/shared/confirm.service';\nimport {MessageHubService} from 'src/app/_services/message-hub.service';\nimport {InviteUserComponent} from '../invite-user/invite-user.component';\nimport {EditUserComponent} from '../edit-user/edit-user.component';\nimport {ServerService} from 'src/app/_services/server.service';\nimport {Router} from '@angular/router';\nimport {TagBadgeComponent} from '../../shared/tag-badge/tag-badge.component';\nimport {AsyncPipe, DatePipe, NgClass, NgFor, NgIf, TitleCasePipe} from '@angular/common';\nimport {translate, TranslocoModule, TranslocoService} from \"@ngneat/transloco\";\nimport {DefaultDatePipe} from \"../../_pipes/default-date.pipe\";\nimport {DefaultValuePipe} from \"../../_pipes/default-value.pipe\";\nimport {ReadMoreComponent} from \"../../shared/read-more/read-more.component\";\nimport {UtcToLocalTimePipe} from \"../../_pipes/utc-to-local-time.pipe\";\n\n@Component({\n    selector: 'app-manage-users',\n    templateUrl: './manage-users.component.html',\n    styleUrls: ['./manage-users.component.scss'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgFor, NgIf, NgbTooltip, TagBadgeComponent, AsyncPipe, TitleCasePipe, DatePipe, TranslocoModule, DefaultDatePipe, NgClass, DefaultValuePipe, ReadMoreComponent, UtcToLocalTimePipe]\n})\nexport class ManageUsersComponent implements OnInit {\n\n  members: Member[] = [];\n  loggedInUsername = '';\n  loadingMembers = false;\n\n  private readonly translocoService = inject(TranslocoService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly memberService = inject(MemberService);\n  private readonly accountService = inject(AccountService);\n  private readonly modalService = inject(NgbModal);\n  private readonly toastr = inject(ToastrService);\n  private readonly confirmService = inject(ConfirmService);\n  public readonly messageHub = inject(MessageHubService);\n  private readonly serverService = inject(ServerService);\n  private readonly router = inject(Router);\n\n  constructor() {\n    this.accountService.currentUser$.pipe(take(1)).subscribe((user) => {\n      if (user) {\n        this.loggedInUsername = user.username;\n        this.cdRef.markForCheck();\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadMembers();\n  }\n\n\n  loadMembers() {\n    this.loadingMembers = true;\n    this.cdRef.markForCheck();\n    this.memberService.getMembers(true).subscribe(members => {\n      this.members = members;\n      // Show logged-in user at the top of the list\n      this.members.sort((a: Member, b: Member) => {\n        if (a.username === this.loggedInUsername) return 1;\n        if (b.username === this.loggedInUsername) return 1;\n\n        const nameA = a.username.toUpperCase();\n        const nameB = b.username.toUpperCase();\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n        return 0;\n      })\n      this.loadingMembers = false;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  canEditMember(member: Member): boolean {\n    return this.loggedInUsername !== member.username;\n  }\n\n  openEditUser(member: Member) {\n    const modalRef = this.modalService.open(EditUserComponent, {size: 'lg'});\n    modalRef.componentInstance.member = member;\n    modalRef.closed.subscribe(() => {\n      this.loadMembers();\n    });\n  }\n\n\n  async deleteUser(member: Member) {\n    if (await this.confirmService.confirm(this.translocoService.translate('toasts.confirm-delete-user'))) {\n      this.memberService.deleteMember(member.username).subscribe(() => {\n        setTimeout(() => {\n          this.loadMembers();\n          this.toastr.success(this.translocoService.translate('toasts.user-deleted', {user: member.username}));\n        }, 30); // SetTimeout because I've noticed this can run super fast and not give enough time for data to flush\n      });\n    }\n  }\n\n  inviteUser() {\n    const modalRef = this.modalService.open(InviteUserComponent, {size: 'lg'});\n    modalRef.closed.subscribe((successful: boolean) => {\n      this.loadMembers();\n    });\n  }\n\n  resendEmail(member: Member) {\n    this.accountService.resendConfirmationEmail(member.id).subscribe(async (response) => {\n      if (response.emailSent) {\n        this.toastr.info(this.translocoService.translate('toasts.email-sent', {email: member.username}));\n        return;\n      }\n      await this.confirmService.alert(\n        this.translocoService.translate('toasts.click-email-link') + '<br/> <a href=\"' + response.emailLink + '\" target=\"_blank\" rel=\"noopener noreferrer\">' + response.emailLink + '</a>');\n    });\n  }\n\n  setup(member: Member) {\n    this.accountService.getInviteUrl(member.id, false).subscribe(url => {\n      if (url) {\n        this.router.navigateByUrl(url);\n      }\n    });\n  }\n\n  updatePassword(member: Member) {\n    const modalRef = this.modalService.open(ResetPasswordModalComponent);\n    modalRef.componentInstance.member = member;\n  }\n\n  formatLibraries(member: Member) {\n    if (member.libraries.length === 0) {\n      return translate('manage-users.none');\n    }\n\n    return member.libraries.map(item => item.name).join(', ');\n  }\n\n  hasAdminRole(member: Member) {\n    return member.roles.indexOf('Admin') >= 0;\n  }\n\n  getRoles(member: Member) {\n    return member.roles.filter(item => item != 'Pleb');\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'manage-users'\">\n\n\n  <div class=\"container-fluid\">\n    <div class=\"row mb-2\">\n      <div class=\"col-8\"><h3>{{t('title')}}</h3></div>\n      <div class=\"col-4\"><button class=\"btn btn-primary float-end\" (click)=\"inviteUser()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i><span class=\"phone-hidden\">&nbsp;{{t('invite')}}</span></button></div>\n    </div>\n\n    <ul class=\"list-group\">\n      <li *ngFor=\"let member of members; let idx = index;\" class=\"list-group-item no-hover\">\n        <div>\n          <h4>\n            <span id=\"member-name--{{idx}}\" [ngClass]=\"{'highlight': member.username === loggedInUsername}\">{{member.username | titlecase}}</span>\n            <div class=\"float-end\" *ngIf=\"canEditMember(member)\">\n              <button class=\"btn btn-danger btn-sm me-2\" (click)=\"deleteUser(member)\"\n                      placement=\"top\" [ngbTooltip]=\"t('delete-user-tooltip')\" [attr.aria-label]=\"t('delete-user-alt', {user: member.username | titlecase})\">\n                <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n              </button>\n              <button class=\"btn btn-primary btn-sm me-2\" (click)=\"openEditUser(member)\"\n                      placement=\"top\" [ngbTooltip]=\"t('edit-user-tooltip')\" [attr.aria-label]=\"t('edit-user-alt', {user: member.username | titlecase})\">\n                <i class=\"fa fa-pen\" aria-hidden=\"true\"></i>\n              </button>\n\n              <ng-container *ngIf=\"member.isPending\">\n                <button class=\"btn btn-secondary btn-sm me-2\" (click)=\"resendEmail(member)\"\n                        placement=\"top\" [ngbTooltip]=\"t('resend-invite-tooltip')\" [attr.aria-label]=\"t('resend-invite-alt', {user: member.username | titlecase})\"><i class=\"fa-solid fa-share-from-square\" aria-hidden=\"true\"></i></button>\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"setup(member)\"\n                        placement=\"top\" [ngbTooltip]=\"t('setup-user-tooltip')\" [attr.aria-label]=\"t('setup-user-alt', {user: member.username | titlecase})\"><i class=\"fa-solid fa-sliders\" aria-hidden=\"true\"></i></button>\n              </ng-container>\n              <button *ngIf=\"!member.isPending\" class=\"btn btn-secondary btn-sm\" (click)=\"updatePassword(member)\"\n                      placement=\"top\" [ngbTooltip]=\"t('change-password-tooltip')\" [attr.aria-label]=\"t('change-password-alt', {user: member.username | titlecase})\"><i class=\"fa fa-key\" aria-hidden=\"true\"></i></button>\n            </div>\n          </h4>\n          <div class=\"user-info\">\n            <div>{{t('last-active-title')}}\n              <span class=\"badge bg-secondary text-dark ms-1 pending-badge\" *ngIf=\"member.isPending; else activeTime\">{{t('pending-title')}}</span>\n              <ng-template #activeTime>\n                <span>{{member.lastActiveUtc | utcToLocalTime | defaultDate}} <i class=\"presence fa fa-circle ms-1\" [title]=\"t('online-now-tooltip')\" aria-hidden=\"true\" *ngIf=\"(messageHub.onlineUsers$ | async)?.includes(member.username)\"></i></span>\n              </ng-template>\n            </div>\n            <div *ngIf=\"!hasAdminRole(member) && member.libraries.length > 0\">\n              {{t('sharing-title')}}\n              <app-tag-badge *ngFor=\"let lib of member.libraries\" class=\"col-auto\">{{lib.name}}</app-tag-badge>\n            </div>\n            <div class=\"row g-0\">\n              <div *ngIf=\"getRoles(member) as roles\">\n                {{t('roles-title')}} <span *ngIf=\"roles.length === 0; else showRoles\">{{null | defaultValue}}</span>\n                <ng-template #showRoles>\n                  <ng-container *ngIf=\"hasAdminRole(member); else allRoles\">\n                    <app-tag-badge class=\"col-auto\">{{t('admin')}}</app-tag-badge>\n                  </ng-container>\n                  <ng-template #allRoles>\n                    <app-tag-badge *ngFor=\"let role of roles\" class=\"col-auto\">{{role}}</app-tag-badge>\n                  </ng-template>\n                </ng-template>\n              </div>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li *ngIf=\"loadingMembers\" class=\"list-group-item\">\n        <div class=\"spinner-border text-secondary\" role=\"status\">\n          <span class=\"visually-hidden\">{{t('loading')}}</span>\n        </div>\n      </li>\n      <li class=\"list-group-item\" *ngIf=\"members.length === 0 && !loadingMembers\">\n        {{t('no-data')}}\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", "export enum EncodeFormat {\n    PNG = 0,\n    WebP = 1,\n    AVIF = 2\n}\n\nexport const EncodeFormats = [{value: EncodeFormat.PNG, title: 'PNG'}, {value: EncodeFormat.WebP, title: 'WebP'}, {value: EncodeFormat.AVIF, title: 'AVIF'}];", "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  EventEmitter,\n  inject,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from \"@angular/forms\";\nimport {compare, SortableHeader, SortEvent} from \"../../_single-module/table/_directives/sortable-header.directive\";\nimport {KavitaMediaError} from \"../_models/media-error\";\nimport {EVENTS, MessageHubService} from \"../../_services/message-hub.service\";\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport {BehaviorSubject, filter, Observable, shareReplay} from \"rxjs\";\nimport {ScrobblingService} from \"../../_services/scrobbling.service\";\nimport {ScrobbleError} from \"../../_models/scrobbling/scrobble-error\";\n\nimport {SeriesService} from \"../../_services/series.service\";\nimport {EditSeriesModalComponent} from \"../../cards/_modals/edit-series-modal/edit-series-modal.component\";\nimport {NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\nimport {FilterPipe} from \"../../_pipes/filter.pipe\";\nimport {LoadingComponent} from \"../../shared/loading/loading.component\";\nimport {TranslocoModule} from \"@ngneat/transloco\";\nimport {DefaultDatePipe} from \"../../_pipes/default-date.pipe\";\nimport {DefaultValuePipe} from \"../../_pipes/default-value.pipe\";\nimport {TranslocoLocaleModule} from \"@ngneat/transloco-locale\";\nimport {UtcToLocalTimePipe} from \"../../_pipes/utc-to-local-time.pipe\";\n\n@Component({\n  selector: 'app-manage-scrobble-errors',\n  standalone: true,\n    imports: [CommonModule, ReactiveFormsModule, FilterPipe, LoadingComponent, SortableHeader, TranslocoModule, DefaultDatePipe, DefaultValuePipe, TranslocoLocaleModule, UtcToLocalTimePipe],\n  templateUrl: './manage-scrobble-errors.component.html',\n  styleUrls: ['./manage-scrobble-errors.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ManageScrobbleErrorsComponent implements OnInit {\n  @Output() scrobbleCount = new EventEmitter<number>();\n  @ViewChildren(SortableHeader<KavitaMediaError>) headers!: QueryList<SortableHeader<KavitaMediaError>>;\n  private readonly scrobbleService = inject(ScrobblingService);\n  private readonly messageHub = inject(MessageHubService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly seriesService = inject(SeriesService);\n  private readonly modalService = inject(NgbModal);\n\n  messageHubUpdate$ = this.messageHub.messages$.pipe(takeUntilDestroyed(this.destroyRef), filter(m => m.event === EVENTS.ScanSeries), shareReplay());\n  currentSort = new BehaviorSubject<SortEvent<ScrobbleError>>({column: 'created', direction: 'asc'});\n  currentSort$: Observable<SortEvent<ScrobbleError>> = this.currentSort.asObservable();\n\n  data: Array<ScrobbleError> = [];\n  isLoading = true;\n  formGroup = new FormGroup({\n    filter: new FormControl('', [])\n  });\n\n\n  constructor() {}\n\n  ngOnInit() {\n\n    this.loadData();\n\n    this.messageHubUpdate$.subscribe(_ => this.loadData());\n\n    this.currentSort$.subscribe(sortConfig => {\n      this.data = (sortConfig.column) ? this.data.sort((a: ScrobbleError, b: ScrobbleError) => {\n        if (sortConfig.column === '') return 0;\n        const res = compare(a[sortConfig.column], b[sortConfig.column]);\n        return sortConfig.direction === 'asc' ? res : -res;\n      }) : this.data;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  onSort(evt: any) {\n    //SortEvent<KavitaMediaError>\n    this.currentSort.next(evt);\n\n    // Must clear out headers here\n    this.headers.forEach((header) => {\n      if (header.sortable !== evt.column) {\n        header.direction = '';\n      }\n    });\n  }\n\n  loadData() {\n    this.isLoading = true;\n    this.cdRef.markForCheck();\n    this.scrobbleService.getScrobbleErrors().subscribe(d => {\n      this.data = d;\n      this.isLoading = false;\n      this.scrobbleCount.emit(d.length);\n      this.cdRef.detectChanges();\n    });\n  }\n\n  clear() {\n    this.scrobbleService.clearScrobbleErrors().subscribe(_ => this.loadData());\n  }\n\n  filterList = (listItem: ScrobbleError) => {\n    const query = (this.formGroup.get('filter')?.value || '').toLowerCase();\n    return listItem.comment.toLowerCase().indexOf(query) >= 0 || listItem.details.toLowerCase().indexOf(query) >= 0;\n  }\n\n  editSeries(seriesId: number) {\n    this.seriesService.getSeries(seriesId).subscribe(series => {\n      const modalRef = this.modalService.open(EditSeriesModalComponent, {  size: 'xl' });\n      modalRef.componentInstance.series = series;\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-scrobble-errors'\">\n  <p>{{t('description')}}</p>\n\n  <form [formGroup]=\"formGroup\">\n    <div class=\"row g-0 mb-3\">\n      <div class=\"col-md-12\">\n        <label for=\"filter\" class=\"visually-hidden\">{{t('filter-label')}}</label>\n        <div class=\"input-group\">\n          <input id=\"filter\" type=\"text\" class=\"form-control\" [placeholder]=\"t('filter-label')\" formControlName=\"filter\" />\n          <button class=\"btn btn-primary\" type=\"button\" (click)=\"clear()\">{{t('clear-errors')}}</button>\n        </div>\n      </div>\n    </div>\n  </form>\n  <table class=\"table table-striped table-hover table-sm table-hover\">\n    <thead #header>\n    <tr>\n      <th scope=\"col\" sortable=\"seriesId\" (sort)=\"onSort($event)\">\n        {{t('series-header')}}\n      </th>\n      <th scope=\"col\" sortable=\"created\" (sort)=\"onSort($event)\">\n        {{t('created-header')}}\n      </th>\n      <th scope=\"col\" sortable=\"comment\" (sort)=\"onSort($event)\">\n        {{t('comment-header')}}\n      </th>\n      <th scope=\"col\">\n        {{t('edit-header')}}\n      </th>\n    </tr>\n    </thead>\n    <tbody #container>\n    <tr *ngIf=\"isLoading\"><td colspan=\"4\" style=\"text-align: center;\"><app-loading [loading]=\"isLoading\"></app-loading></td></tr>\n    <ng-container *ngIf=\"data | filter: filterList as filteredData\">\n      <tr *ngIf=\"filteredData.length === 0 && !isLoading\"><td colspan=\"4\" style=\"text-align: center;\">No issues</td></tr>\n      <tr *ngFor=\"let item of filteredData; index as i\">\n        <td>\n          <a href=\"library/{{item.libraryId}}/series/{{item.seriesId}}\" target=\"_blank\">{{item.details}}</a>\n        </td>\n        <td>\n          {{item.createdUtc  | utcToLocalTime | defaultValue }}\n        </td>\n        <td>\n          {{item.comment}}\n        </td>\n        <td>\n          <button class=\"btn btn-icon primary-icon\" (click)=\"editSeries(item.seriesId)\">\n            <i class=\"fa fa-pen me-1\" aria-hidden=\"true\"></i>\n            <span class=\"visually-hidden\">{{t('edit-item-alt', {seriesName: item.details})}}</span>\n          </button>\n        </td>\n      </tr>\n    </ng-container>\n    </tbody>\n  </table>\n\n</ng-container>\n", "export enum CoverImageSize {\n    Default = 1,\n    Medium = 2,\n    Large = 3,\n    XLarge = 4\n}\n\nexport const CoverImageSizes =\n    [\n        {value: CoverImageSize.Default, title: 'cover-image-size.default'},\n        {value: CoverImageSize.Medium, title: 'cover-image-size.medium'},\n        {value: CoverImageSize.Large, title: 'cover-image-size.large'},\n        {value: CoverImageSize.XLarge, title: 'cover-image-size.xlarge'}\n    ];\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs';\nimport {SettingsService} from '../settings.service';\nimport {ServerSettings} from '../_models/server-settings';\nimport {DirectoryPickerComponent, DirectoryPickerResult} from '../_modals/directory-picker/directory-picker.component';\nimport {\n  NgbAccordionBody,\n  NgbAccordionButton,\n  NgbAccordionCollapse,\n  NgbAccordionDirective,\n  NgbAccordionHeader,\n  NgbAccordionItem,\n  NgbAccordionToggle,\n  NgbCollapse,\n  NgbModal,\n  NgbTooltip\n} from '@ng-bootstrap/ng-bootstrap';\nimport {EncodeFormats} from '../_models/encode-format';\nimport {ManageScrobbleErrorsComponent} from '../manage-scrobble-errors/manage-scrobble-errors.component';\nimport {ManageAlertsComponent} from '../manage-alerts/manage-alerts.component';\nimport {NgFor, NgIf, NgTemplateOutlet} from '@angular/common';\nimport {translate, TranslocoDirective, TranslocoService} from \"@ngneat/transloco\";\nimport { CoverImageSizes } from '../_models/cover-image-size';\n\n@Component({\n  selector: 'app-manage-media-settings',\n  templateUrl: './manage-media-settings.component.html',\n  styleUrls: ['./manage-media-settings.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [NgIf, ReactiveFormsModule, NgbTooltip, NgTemplateOutlet, NgFor, NgbAccordionDirective, NgbAccordionItem, NgbAccordionHeader, NgbAccordionToggle, NgbAccordionButton, NgbCollapse, NgbAccordionCollapse, NgbAccordionBody, ManageAlertsComponent, ManageScrobbleErrorsComponent, TranslocoDirective]\n})\nexport class ManageMediaSettingsComponent implements OnInit {\n\n  serverSettings!: ServerSettings;\n  settingsForm: FormGroup = new FormGroup({});\n\n  alertCount: number = 0;\n  scrobbleCount: number = 0;\n  coverImageSizes = CoverImageSizes.map(o => {\n    const newObj = {...o};\n    newObj.title = translate(o.title);\n    return newObj;\n  })\n\n  private readonly translocoService = inject(TranslocoService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n\n  get EncodeFormats() { return EncodeFormats; }\n\n  constructor(private settingsService: SettingsService, private toastr: ToastrService, private modalService: NgbModal, ) { }\n\n  ngOnInit(): void {\n    this.settingsService.getServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.settingsForm.addControl('encodeMediaAs', new FormControl(this.serverSettings.encodeMediaAs, [Validators.required]));\n      this.settingsForm.addControl('bookmarksDirectory', new FormControl(this.serverSettings.bookmarksDirectory, [Validators.required]));\n      this.settingsForm.addControl('coverImageSize', new FormControl(this.serverSettings.coverImageSize, [Validators.required]));\n      this.cdRef.markForCheck();\n    });\n  }\n\n  resetForm() {\n    this.settingsForm.get('encodeMediaAs')?.setValue(this.serverSettings.encodeMediaAs);\n    this.settingsForm.get('bookmarksDirectory')?.setValue(this.serverSettings.bookmarksDirectory);\n    this.settingsForm.get('coverImageSize')?.setValue(this.serverSettings.coverImageSize);\n    this.settingsForm.markAsPristine();\n    this.cdRef.markForCheck();\n  }\n\n  saveSettings() {\n    const modelSettings = Object.assign({}, this.serverSettings);\n    modelSettings.encodeMediaAs = parseInt(this.settingsForm.get('encodeMediaAs')?.value, 10);\n    modelSettings.bookmarksDirectory = this.settingsForm.get('bookmarksDirectory')?.value;\n    modelSettings.coverImageSize = parseInt(this.settingsForm.get('coverImageSize')?.value, 10);\n\n    this.settingsService.updateServerSettings(modelSettings).pipe(take(1)).subscribe(async (settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(this.translocoService.translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetToDefaults() {\n    this.settingsService.resetServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(this.translocoService.translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  openDirectoryChooser(existingDirectory: string, formControl: string) {\n    const modalRef = this.modalService.open(DirectoryPickerComponent, { scrollable: true, size: 'lg', fullscreen: 'md' });\n    modalRef.componentInstance.startingFolder = existingDirectory || '';\n    modalRef.componentInstance.helpUrl = '';\n    modalRef.closed.subscribe((closeResult: DirectoryPickerResult) => {\n      if (closeResult.success && closeResult.folderPath !== '') {\n        this.settingsForm.get(formControl)?.setValue(closeResult.folderPath);\n        this.settingsForm.markAsDirty();\n        this.cdRef.markForCheck();\n      }\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-media-settings'\">\n  <div class=\"container-fluid\">\n    <form [formGroup]=\"settingsForm\" *ngIf=\"serverSettings !== undefined\" class=\"mb-2\">\n\n      <div class=\"row g-0\">\n        <p>{{t('encode-as-description-part-1')}} <a href=\"https://caniuse.com/?search=webp\" target=\"_blank\" rel=\"noopener noreferrer\">{{t('encode-as-description-part-2')}}</a>/<a href=\"https://caniuse.com/?search=avif\" target=\"_blank\" rel=\"noopener noreferrer\">{{t('encode-as-description-part-3')}}</a>\n          <br/><b>{{t('encode-as-warning')}}</b>\n        </p>\n        <div *ngIf=\"settingsForm.get('encodeMediaAs')?.dirty\" class=\"alert alert-danger\" role=\"alert\">{{t('media-warning')}}</div>\n        <div class=\"col-md-6 col-sm-12 mb-3  pe-1\">\n          <label for=\"settings-media-encodeMediaAs\" class=\"form-label me-1\">{{t('encode-as-label')}}</label>\n          <i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"encodeMediaAsTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #encodeMediaAsTooltip>{{t('encode-as-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"settings-media-encodeMediaAs-help\"><ng-container [ngTemplateOutlet]=\"encodeMediaAsTooltip\"></ng-container></span>\n          <select class=\"form-select\" aria-describedby=\"settings-media-encodeMediaAs-help\" formControlName=\"encodeMediaAs\" id=\"settings-media-encodeMediaAs\">\n            <option *ngFor=\"let format of EncodeFormats\" [value]=\"format.value\">{{format.title}}</option>\n          </select>\n        </div>\n\n        <div class=\"col-md-6 col-sm-12 mb-3\">\n          <label for=\"settings-media-coverImageSize\" class=\"form-label me-1\">{{t('cover-image-size-label')}}</label>\n          <i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"coverImageSizeTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #coverImageSizeTooltip>{{t('cover-image-size-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"settings-media-coverImageSize-help\"><ng-container [ngTemplateOutlet]=\"coverImageSizeTooltip\"></ng-container></span>\n          <select class=\"form-select\" aria-describedby=\"settings-media-coverImageSize-help\" formControlName=\"coverImageSize\" id=\"settings-media-coverImageSize\">\n            <option *ngFor=\"let size of coverImageSizes\" [value]=\"size.value\">{{size.title}}</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"row g-0\">\n        <div class=\"mb-3\">\n          <label for=\"settings-bookmarksdir\" class=\"form-label\">{{t('bookmark-dir-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"bookmarksDirectoryTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #bookmarksDirectoryTooltip>{{t('bookmark-dir-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"settings-bookmarksdir-help\"><ng-container [ngTemplateOutlet]=\"bookmarksDirectoryTooltip\"></ng-container></span>\n          <div class=\"input-group\">\n            <input readonly id=\"settings-bookmarksdir\" aria-describedby=\"settings-bookmarksdir-help\" class=\"form-control\" formControlName=\"bookmarksDirectory\" type=\"text\" aria-describedby=\"change-bookmarks-dir\">\n            <button id=\"change-bookmarks-dir\" class=\"btn btn-primary\" (click)=\"openDirectoryChooser(settingsForm.get('bookmarksDirectory')?.value, 'bookmarksDirectory')\">\n              {{t('change')}}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end\">\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetToDefaults()\">{{t('reset-to-default')}}</button>\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetForm()\">{{t('reset')}}</button>\n        <button type=\"submit\" class=\"flex-fill btn btn-primary\" (click)=\"saveSettings()\" [disabled]=\"!settingsForm.dirty\">{{t('save')}}</button>\n      </div>\n    </form>\n\n    <div class=\"mt-3\" ngbAccordion [destroyOnHide]=\"false\">\n      <div ngbAccordionItem>\n        <h2 ngbAccordionHeader>\n          <button ngbAccordionButton>\n            {{t('media-issue-title')}} <span class=\"ms-1\" *ngIf=\"alertCount > 0\">({{alertCount}})</span>\n          </button>\n        </h2>\n        <div ngbAccordionCollapse>\n          <div ngbAccordionBody>\n            <ng-template>\n              <app-manage-alerts (alertCount)=\"alertCount = $event\"></app-manage-alerts>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"mt-3\" ngbAccordion [destroyOnHide]=\"false\">\n      <div ngbAccordionItem>\n        <h2 ngbAccordionHeader>\n          <button ngbAccordionButton>\n            {{t('scrobble-issue-title')}} <span class=\"ms-1\" *ngIf=\"scrobbleCount > 0\">({{scrobbleCount}})</span>\n          </button>\n        </h2>\n        <div ngbAccordionCollapse>\n          <div ngbAccordionBody>\n            <ng-template>\n              <app-manage-scrobble-errors (scrobbleCount)=\"scrobbleCount = $event\"></app-manage-scrobble-errors>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs';\nimport {SettingsService} from '../settings.service';\nimport {ServerSettings} from '../_models/server-settings';\nimport {\n  NgbTooltip\n} from '@ng-bootstrap/ng-bootstrap';\nimport {NgIf, NgTemplateOutlet, TitleCasePipe} from '@angular/common';\nimport {translate, TranslocoModule} from \"@ngneat/transloco\";\nimport {SafeHtmlPipe} from \"../../_pipes/safe-html.pipe\";\nimport {ManageAlertsComponent} from \"../manage-alerts/manage-alerts.component\";\n\n@Component({\n    selector: 'app-manage-email-settings',\n    templateUrl: './manage-email-settings.component.html',\n    styleUrls: ['./manage-email-settings.component.scss'],\n    standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgIf, ReactiveFormsModule, NgbTooltip, NgTemplateOutlet, TranslocoModule, SafeHtmlPipe,\n    ManageAlertsComponent, TitleCasePipe]\n})\nexport class ManageEmailSettingsComponent implements OnInit {\n\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly settingsService = inject(SettingsService);\n  private readonly toastr = inject(ToastrService);\n\n  serverSettings!: ServerSettings;\n  settingsForm: FormGroup = new FormGroup({});\n\n  ngOnInit(): void {\n    this.settingsService.getServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.settingsForm.addControl('hostName', new FormControl(this.serverSettings.hostName, [Validators.pattern(/^(http:|https:)+[^\\s]+[\\w]$/)]));\n\n      this.settingsForm.addControl('host', new FormControl(this.serverSettings.smtpConfig.host, []));\n      this.settingsForm.addControl('port', new FormControl(this.serverSettings.smtpConfig.port, []));\n      this.settingsForm.addControl('userName', new FormControl(this.serverSettings.smtpConfig.userName, []));\n      this.settingsForm.addControl('enableSsl', new FormControl(this.serverSettings.smtpConfig.enableSsl, []));\n      this.settingsForm.addControl('password', new FormControl(this.serverSettings.smtpConfig.password, []));\n      this.settingsForm.addControl('senderAddress', new FormControl(this.serverSettings.smtpConfig.senderAddress, []));\n      this.settingsForm.addControl('senderDisplayName', new FormControl(this.serverSettings.smtpConfig.senderDisplayName, []));\n      this.settingsForm.addControl('sizeLimit', new FormControl(this.serverSettings.smtpConfig.sizeLimit, [Validators.min(1)]));\n      this.settingsForm.addControl('customizedTemplates', new FormControl(this.serverSettings.smtpConfig.customizedTemplates, [Validators.min(1)]));\n\n      this.cdRef.markForCheck();\n    });\n  }\n\n  resetForm() {\n    this.settingsForm.get('hostName')?.setValue(this.serverSettings.hostName);\n\n    this.settingsForm.addControl('host', new FormControl(this.serverSettings.smtpConfig.host, []));\n    this.settingsForm.addControl('port', new FormControl(this.serverSettings.smtpConfig.port, []));\n    this.settingsForm.addControl('userName', new FormControl(this.serverSettings.smtpConfig.userName, []));\n    this.settingsForm.addControl('enableSsl', new FormControl(this.serverSettings.smtpConfig.enableSsl, []));\n    this.settingsForm.addControl('password', new FormControl(this.serverSettings.smtpConfig.password, []));\n    this.settingsForm.addControl('senderAddress', new FormControl(this.serverSettings.smtpConfig.senderAddress, []));\n    this.settingsForm.addControl('senderDisplayName', new FormControl(this.serverSettings.smtpConfig.senderDisplayName, []));\n    this.settingsForm.addControl('sizeLimit', new FormControl(this.serverSettings.smtpConfig.sizeLimit, [Validators.min(1)]));\n    this.settingsForm.addControl('customizedTemplates', new FormControl(this.serverSettings.smtpConfig.customizedTemplates, [Validators.min(1)]));\n    this.settingsForm.markAsPristine();\n    this.cdRef.markForCheck();\n  }\n\n  autofillGmail() {\n    this.settingsForm.get('host')?.setValue('smtp.gmail.com');\n    this.settingsForm.get('port')?.setValue(587);\n    this.settingsForm.get('sizeLimit')?.setValue(26214400);\n    this.settingsForm.get('enableSsl')?.setValue(true);\n    this.settingsForm.markAsDirty();\n    this.cdRef.markForCheck();\n  }\n\n  autofillOutlook() {\n    this.settingsForm.get('host')?.setValue('smtp-mail.outlook.com');\n    this.settingsForm.get('port')?.setValue(587 );\n    this.settingsForm.get('sizeLimit')?.setValue(1048576);\n    this.settingsForm.get('enableSsl')?.setValue(true);\n    this.settingsForm.markAsDirty();\n    this.cdRef.markForCheck();\n  }\n\n  async saveSettings() {\n    const modelSettings = Object.assign({}, this.serverSettings);\n    modelSettings.emailServiceUrl = this.settingsForm.get('emailServiceUrl')?.value;\n    modelSettings.hostName = this.settingsForm.get('hostName')?.value;\n\n    modelSettings.smtpConfig.host = this.settingsForm.get('host')?.value;\n    modelSettings.smtpConfig.port = this.settingsForm.get('port')?.value;\n    modelSettings.smtpConfig.userName = this.settingsForm.get('userName')?.value;\n    modelSettings.smtpConfig.enableSsl = this.settingsForm.get('enableSsl')?.value;\n    modelSettings.smtpConfig.password = this.settingsForm.get('password')?.value;\n    modelSettings.smtpConfig.senderAddress = this.settingsForm.get('senderAddress')?.value;\n    modelSettings.smtpConfig.senderDisplayName = this.settingsForm.get('senderDisplayName')?.value;\n    modelSettings.smtpConfig.sizeLimit = this.settingsForm.get('sizeLimit')?.value;\n    modelSettings.smtpConfig.customizedTemplates = this.settingsForm.get('customizedTemplates')?.value;\n\n    this.settingsService.updateServerSettings(modelSettings).pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetToDefaults() {\n    this.settingsService.resetServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  test() {\n    this.settingsService.testEmailServerSettings().subscribe(res => {\n      if (res.successful) {\n        this.toastr.success(translate('toasts.email-sent', {email: res.emailAddress}));\n      } else {\n        this.toastr.error(res.errorMessage);\n      }\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-email-settings'\">\n  <div class=\"container-fluid\">\n    <form [formGroup]=\"settingsForm\" *ngIf=\"serverSettings !== undefined\">\n      <h4 id=\"email-header\">{{t('title')}}</h4>\n\n      <p>You must fill out both Host Name and SMTP settings to use email-based functionality within Kavita.</p>\n\n      <div class=\"mb-3 pe-2 ps-2 \">\n        <label for=\"settings-hostname\" class=\"form-label\">{{t('host-name-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"hostNameTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #hostNameTooltip>{{t('host-name-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-hostname-help\">\n          <ng-container [ngTemplateOutlet]=\"hostNameTooltip\"></ng-container>\n        </span>\n        <div class=\"input-group\">\n          <input id=\"settings-hostname\" aria-describedby=\"settings-hostname-help\" class=\"form-control\" formControlName=\"hostName\" type=\"text\"\n                 [class.is-invalid]=\"settingsForm.get('hostName')?.invalid && settingsForm.get('hostName')?.touched\">\n          <button class=\"btn btn-outline-secondary\" (click)=\"autofillGmail()\">{{t('gmail-label')}}</button>\n          <button class=\"btn btn-outline-secondary\" (click)=\"autofillOutlook()\">{{t('outlook-label')}}</button>\n        </div>\n\n        <div id=\"hostname-validations\" class=\"invalid-feedback\" *ngIf=\"settingsForm.dirty || settingsForm.touched\">\n          <div *ngIf=\"settingsForm.get('hostName')?.errors?.pattern\">\n            {{t('host-name-validation')}}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mt-3\">\n        <div class=\"row g-0\">\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-sender-address\" class=\"form-label\">{{t('sender-address-label')}}</label>\n            <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"senderAddressTooltip\" role=\"button\" tabindex=\"0\"></i>\n            <ng-template #senderAddressTooltip>{{t('sender-address-tooltip')}}</ng-template>\n            <span class=\"visually-hidden\" id=\"settings-sender-address-help\"><ng-container [ngTemplateOutlet]=\"senderAddressTooltip\"></ng-container></span>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"senderAddress\" id=\"settings-sender-address\" />\n          </div>\n\n\n\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-sender-displayname\" class=\"form-label\">{{t('sender-displayname-label')}}</label>\n            <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"senderDisplayNameTooltip\" role=\"button\" tabindex=\"0\"></i>\n            <ng-template #senderDisplayNameTooltip>{{t('sender-displayname-tooltip')}}</ng-template>\n            <span class=\"visually-hidden\" id=\"settings-sender-displayname-help\"><ng-container [ngTemplateOutlet]=\"senderDisplayNameTooltip\"></ng-container></span>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"senderDisplayName\" id=\"settings-sender-displayname\" />\n          </div>\n        </div>\n\n        <div class=\"row g-0\">\n          <div class=\"col-md-4 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-sender-address\" class=\"form-label\">{{t('host-label')}}</label>\n            <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"hostTooltip\" role=\"button\" tabindex=\"0\"></i>\n            <ng-template #hostTooltip>{{t('host-tooltip')}}</ng-template>\n            <span class=\"visually-hidden\" id=\"settings-host-help\"><ng-container [ngTemplateOutlet]=\"hostTooltip\"></ng-container></span>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"host\" id=\"settings-host\" />\n          </div>\n\n          <div class=\"col-md-4 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-port\" class=\"form-label\">{{t('port-label')}}</label>\n            <input type=\"number\" min=\"1\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"port\" id=\"settings-port\" />\n          </div>\n\n          <div class=\"col-md-4 col-sm-12 pe-2 ps-2 mb-2\">\n            <div class=\"form-check form-switch\" style=\"margin-top: 36px\">\n              <input type=\"checkbox\" id=\"settings-enable-ssl\" role=\"switch\" formControlName=\"enableSsl\" class=\"form-check-input\"\n                     aria-labelledby=\"auto-close-label\">\n              <label class=\"form-check-label\" for=\"settings-enable-ssl\">{{t('enable-ssl-label')}}</label>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row g-0\">\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-username\" class=\"form-label\">{{t('username-label')}}</label>\n            <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"usernameTooltip\" role=\"button\" tabindex=\"0\"></i>\n            <ng-template #usernameTooltip>{{t('username-tooltip')}}</ng-template>\n            <span class=\"visually-hidden\" id=\"settings-username-help\"><ng-container [ngTemplateOutlet]=\"usernameTooltip\"></ng-container></span>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"userName\" id=\"settings-username\" />\n          </div>\n\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-password\" class=\"form-label\">{{t('password-label')}}</label>\n            <input type=\"password\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"password\" id=\"settings-password\" />\n          </div>\n        </div>\n\n        <div class=\"row g-0\">\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <label for=\"settings-size-limit\" class=\"form-label\">{{t('size-limit-label')}}</label>\n            <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"sizeLimitTooltip\" role=\"button\" tabindex=\"0\"></i>\n            <ng-template #sizeLimitTooltip>{{t('size-limit-tooltip')}}</ng-template>\n            <span class=\"visually-hidden\" id=\"settings-size-limit-help\"><ng-container [ngTemplateOutlet]=\"sizeLimitTooltip\"></ng-container></span>\n            <input type=\"text\" class=\"form-control\" aria-describedby=\"email-header\" formControlName=\"sizeLimit\" id=\"settings-size-limit\" />\n          </div>\n\n          <div class=\"col-md-6 col-sm-12 pe-2 ps-2 mb-2\">\n            <div class=\"form-check form-switch\" style=\"margin-top: 36px\">\n              <input type=\"checkbox\" id=\"settings-customized-templates\" role=\"switch\" formControlName=\"customizedTemplates\" class=\"form-check-input\"\n                     aria-labelledby=\"auto-close-label\">\n              <label class=\"form-check-label\" for=\"settings-customized-templates\">{{t('customized-templates-label')}}</label>\n\n              <i class=\"fa fa-info-circle ms-1\" aria-hidden=\"true\" placement=\"right\" [ngbTooltip]=\"customizedTemplatesTooltip\" role=\"button\" tabindex=\"0\"></i>\n              <ng-template #customizedTemplatesTooltip>{{t('customized-templates-tooltip')}}</ng-template>\n              <span class=\"visually-hidden\" id=\"settings-customized-templates-help\"><ng-container [ngTemplateOutlet]=\"customizedTemplatesTooltip\"></ng-container></span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n      <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end\">\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"test()\">{{t('test')}}</button>\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetToDefaults()\">{{t('reset-to-default')}}</button>\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetForm()\">{{t('reset')}}</button>\n        <button type=\"submit\" class=\"flex-fill btn btn-primary\" (click)=\"saveSettings()\" [disabled]=\"!settingsForm.dirty\">{{t('save')}}</button>\n      </div>\n    </form>\n  </div>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs/operators';\nimport {ServerService} from 'src/app/_services/server.service';\nimport {SettingsService} from '../settings.service';\nimport {ServerSettings} from '../_models/server-settings';\nimport {NgbTooltip} from '@ng-bootstrap/ng-bootstrap';\nimport {NgFor, NgIf, NgTemplateOutlet, TitleCasePipe} from '@angular/common';\nimport {TranslocoModule, TranslocoService} from \"@ngneat/transloco\";\nimport {WikiLink} from \"../../_models/wiki\";\n\nconst ValidIpAddress = /^(\\s*((([12]?\\d{1,2}\\.){3}[12]?\\d{1,2})|(([\\da-f]{0,4}\\:){0,7}([\\da-f]{0,4})))\\s*\\,)*\\s*((([12]?\\d{1,2}\\.){3}[12]?\\d{1,2})|(([\\da-f]{0,4}\\:){0,7}([\\da-f]{0,4})))\\s*$/i;\n\n@Component({\n  selector: 'app-manage-settings',\n  templateUrl: './manage-settings.component.html',\n  styleUrls: ['./manage-settings.component.scss'],\n  standalone: true,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgIf, ReactiveFormsModule, NgbTooltip, NgFor, TitleCasePipe, TranslocoModule, NgTemplateOutlet]\n})\nexport class ManageSettingsComponent implements OnInit {\n\n  private readonly translocoService = inject(TranslocoService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly settingsService = inject(SettingsService);\n  private readonly toastr = inject(ToastrService);\n  private readonly serverService = inject(ServerService);\n  protected readonly WikiLink = WikiLink;\n\n  serverSettings!: ServerSettings;\n  settingsForm: FormGroup = new FormGroup({});\n  taskFrequencies: Array<string> = [];\n  logLevels: Array<string> = [];\n\n  ngOnInit(): void {\n    this.settingsService.getTaskFrequencies().pipe(take(1)).subscribe(frequencies => {\n      this.taskFrequencies = frequencies;\n      this.cdRef.markForCheck();\n    });\n    this.settingsService.getLoggingLevels().pipe(take(1)).subscribe(levels => {\n      this.logLevels = levels;\n      this.cdRef.markForCheck();\n    });\n    this.settingsService.getServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.settingsForm.addControl('cacheDirectory', new FormControl(this.serverSettings.cacheDirectory, [Validators.required]));\n      this.settingsForm.addControl('taskScan', new FormControl(this.serverSettings.taskScan, [Validators.required]));\n      this.settingsForm.addControl('taskBackup', new FormControl(this.serverSettings.taskBackup, [Validators.required]));\n      this.settingsForm.addControl('taskCleanup', new FormControl(this.serverSettings.taskCleanup, [Validators.required]));\n      this.settingsForm.addControl('ipAddresses', new FormControl(this.serverSettings.ipAddresses, [Validators.required, Validators.pattern(ValidIpAddress)]));\n      this.settingsForm.addControl('port', new FormControl(this.serverSettings.port, [Validators.required]));\n      this.settingsForm.addControl('loggingLevel', new FormControl(this.serverSettings.loggingLevel, [Validators.required]));\n      this.settingsForm.addControl('allowStatCollection', new FormControl(this.serverSettings.allowStatCollection, [Validators.required]));\n      this.settingsForm.addControl('enableOpds', new FormControl(this.serverSettings.enableOpds, [Validators.required]));\n      this.settingsForm.addControl('baseUrl', new FormControl(this.serverSettings.baseUrl, [Validators.pattern(/^(\\/[\\w-]+)*\\/$/)]));\n      this.settingsForm.addControl('emailServiceUrl', new FormControl(this.serverSettings.emailServiceUrl, [Validators.required]));\n      this.settingsForm.addControl('totalBackups', new FormControl(this.serverSettings.totalBackups, [Validators.required, Validators.min(1), Validators.max(30)]));\n      this.settingsForm.addControl('cacheSize', new FormControl(this.serverSettings.cacheSize, [Validators.required, Validators.min(50)]));\n      this.settingsForm.addControl('totalLogs', new FormControl(this.serverSettings.totalLogs, [Validators.required, Validators.min(1), Validators.max(30)]));\n      this.settingsForm.addControl('enableFolderWatching', new FormControl(this.serverSettings.enableFolderWatching, [Validators.required]));\n      this.settingsForm.addControl('encodeMediaAs', new FormControl(this.serverSettings.encodeMediaAs, []));\n      this.settingsForm.addControl('hostName', new FormControl(this.serverSettings.hostName, [Validators.pattern(/^(http:|https:)+[^\\s]+[\\w]$/)]));\n      this.settingsForm.addControl('onDeckProgressDays', new FormControl(this.serverSettings.onDeckProgressDays, [Validators.required]));\n      this.settingsForm.addControl('onDeckUpdateDays', new FormControl(this.serverSettings.onDeckUpdateDays, [Validators.required]));\n\n      this.serverService.getServerInfo().subscribe(info => {\n        if (info.isDocker) {\n          this.settingsForm.get('ipAddresses')?.disable();\n          this.settingsForm.get('port')?.disable();\n          this.cdRef.markForCheck();\n        }\n      });\n      this.cdRef.markForCheck();\n    });\n    this.cdRef.markForCheck();\n  }\n\n  resetForm() {\n    this.settingsForm.get('cacheDirectory')?.setValue(this.serverSettings.cacheDirectory);\n    this.settingsForm.get('scanTask')?.setValue(this.serverSettings.taskScan);\n    this.settingsForm.get('taskBackup')?.setValue(this.serverSettings.taskBackup);\n    this.settingsForm.get('taskCleanup')?.setValue(this.serverSettings.taskCleanup);\n    this.settingsForm.get('ipAddresses')?.setValue(this.serverSettings.ipAddresses);\n    this.settingsForm.get('port')?.setValue(this.serverSettings.port);\n    this.settingsForm.get('loggingLevel')?.setValue(this.serverSettings.loggingLevel);\n    this.settingsForm.get('allowStatCollection')?.setValue(this.serverSettings.allowStatCollection);\n    this.settingsForm.get('enableOpds')?.setValue(this.serverSettings.enableOpds);\n    this.settingsForm.get('baseUrl')?.setValue(this.serverSettings.baseUrl);\n    this.settingsForm.get('emailServiceUrl')?.setValue(this.serverSettings.emailServiceUrl);\n    this.settingsForm.get('totalBackups')?.setValue(this.serverSettings.totalBackups);\n    this.settingsForm.get('totalLogs')?.setValue(this.serverSettings.totalLogs);\n    this.settingsForm.get('enableFolderWatching')?.setValue(this.serverSettings.enableFolderWatching);\n    this.settingsForm.get('encodeMediaAs')?.setValue(this.serverSettings.encodeMediaAs);\n    this.settingsForm.get('hostName')?.setValue(this.serverSettings.hostName);\n    this.settingsForm.get('cacheSize')?.setValue(this.serverSettings.cacheSize);\n    this.settingsForm.get('onDeckProgressDays')?.setValue(this.serverSettings.onDeckProgressDays);\n    this.settingsForm.get('onDeckUpdateDays')?.setValue(this.serverSettings.onDeckUpdateDays);\n    this.settingsForm.markAsPristine();\n    this.cdRef.markForCheck();\n  }\n\n  async saveSettings() {\n    const modelSettings = this.settingsForm.value;\n    modelSettings.bookmarksDirectory = this.serverSettings.bookmarksDirectory;\n    modelSettings.smtpConfig = this.serverSettings.smtpConfig;\n\n\n    this.settingsService.updateServerSettings(modelSettings).pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(this.translocoService.translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetToDefaults() {\n    this.settingsService.resetServerSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings = settings;\n      this.resetForm();\n      this.toastr.success(this.translocoService.translate('toasts.server-settings-updated'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetIPAddresses() {\n    this.settingsService.resetIPAddressesSettings().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings.ipAddresses = settings.ipAddresses;\n      this.settingsForm.get('ipAddresses')?.setValue(this.serverSettings.ipAddresses);\n      this.toastr.success(this.translocoService.translate('toasts.reset-ip-address'));\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n\n  resetBaseUrl() {\n    this.settingsService.resetBaseUrl().pipe(take(1)).subscribe((settings: ServerSettings) => {\n      this.serverSettings.baseUrl = settings.baseUrl;\n      this.settingsForm.get('baseUrl')?.setValue(this.serverSettings.baseUrl);\n      this.toastr.success(this.translocoService.translate('toasts.reset-base-url'));\n      this.cdRef.markForCheck();\n    }, (err: any) => {\n      console.error('error: ', err);\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'manage-settings'\">\n  <div class=\"container-fluid\">\n    <form [formGroup]=\"settingsForm\" *ngIf=\"serverSettings !== undefined\">\n      <div class=\"alert alert-warning\" role=\"alert\">\n        <strong>{{t('notice')}}</strong> {{t('restart-required')}}\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"settings-hostname\" class=\"form-label\">{{t('host-name-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"hostNameTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #hostNameTooltip>{{t('host-name-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-hostname-help\">\n          <ng-container [ngTemplateOutlet]=\"hostNameTooltip\"></ng-container>\n        </span>\n        <input id=\"settings-hostname\" aria-describedby=\"settings-hostname-help\" class=\"form-control\" formControlName=\"hostName\" type=\"text\"\n               [class.is-invalid]=\"settingsForm.get('hostName')?.invalid && settingsForm.get('hostName')?.touched\">\n        <div id=\"hostname-validations\" class=\"invalid-feedback\" *ngIf=\"settingsForm.dirty || settingsForm.touched\">\n          <div *ngIf=\"settingsForm.get('hostName')?.errors?.pattern\">\n            {{t('host-name-validation')}}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"settings-baseurl\" class=\"form-label\">{{t('base-url-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"baseUrlTooltip\" role=\"button\" tabindex=\"0\"></i>\n        <ng-template #baseUrlTooltip>{{t('base-url-tooltip')}}</ng-template>\n        <span class=\"visually-hidden\" id=\"settings-cachedir-help\">\n          <ng-container [ngTemplateOutlet]=\"baseUrlTooltip\"></ng-container>\n        </span>\n        <div class=\"input-group\">\n          <input id=\"settings-baseurl\" aria-describedby=\"settings-baseurl-help\" class=\"form-control\" formControlName=\"baseUrl\" type=\"text\"\n                 [class.is-invalid]=\"settingsForm.get('baseUrl')?.invalid && settingsForm.get('baseUrl')?.touched\">\n          <button class=\"btn btn-outline-secondary\" (click)=\"resetBaseUrl()\">{{t('reset')}}</button>\n        </div>\n        <div id=\"baseurl-validations\" class=\"invalid-feedback\" *ngIf=\"settingsForm.dirty || settingsForm.touched\">\n          <div *ngIf=\"settingsForm.get('baseUrl')?.errors?.pattern\">\n            {{t('base-url-validation')}}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row g-0 mb-2\">\n        <div class=\"col-md-8 col-sm-12  pe-md-2\">\n          <label for=\"settings-ipaddresses\" class=\"form-label\">{{t('ip-address-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"ipAddressesTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #ipAddressesTooltip>{{t('ip-address-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"settings-ipaddresses-help\">\n            <ng-container [ngTemplateOutlet]=\"ipAddressesTooltip\"></ng-container>\n          </span>\n          <div class=\"input-group\">\n            <input id=\"settings-ipaddresses\" aria-describedby=\"settings-ipaddresses-help\" class=\"form-control\" formControlName=\"ipAddresses\" type=\"text\"\n                   [class.is-invalid]=\"settingsForm.get('ipAddresses')?.invalid && settingsForm.get('ipAddresses')?.touched\">\n            <button class=\"btn btn-outline-secondary\" (click)=\"resetIPAddresses()\">Reset</button>\n          </div>\n          <div id=\"ipaddresses-validations\" class=\"invalid-feedback\" *ngIf=\"settingsForm.dirty || settingsForm.touched\">\n            <div *ngIf=\"settingsForm.get('ipAddresses')?.errors?.pattern\">\n              {{t('ip-address-validation')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"col-md-4 col-sm-12\">\n          <label for=\"settings-port\" class=\"form-label\">{{t('port-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"portTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #portTooltip>{{t('port-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"settings-port-help\">\n            <ng-container [ngTemplateOutlet]=\"portTooltip\"></ng-container>\n          </span>\n          <input id=\"settings-port\" aria-describedby=\"settings-port-help\" class=\"form-control\" formControlName=\"port\" type=\"number\" step=\"1\" min=\"1\" onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\">\n        </div>\n      </div>\n\n      <div class=\"row g-0 mb-2\">\n        <div class=\"col-md-4 col-sm-12  pe-md-2\">\n          <label for=\"backup-tasks\" class=\"form-label\">{{t('backup-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"backupTasksTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #backupTasksTooltip>{{t('backup-tooltip')}}.</ng-template>\n          <span class=\"visually-hidden\" id=\"backup-tasks-help\">\n            <ng-container [ngTemplateOutlet]=\"backupTasksTooltip\"></ng-container>\n          </span>\n          <input id=\"backup-tasks\" aria-describedby=\"backup-tasks-help\" class=\"form-control\" formControlName=\"totalBackups\"\n                 type=\"number\" inputmode=\"numeric\" step=\"1\" min=\"1\" max=\"30\" onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\"\n                 [class.is-invalid]=\"settingsForm.get('totalBackups')?.invalid && settingsForm.get('totalBackups')?.touched\">\n          <ng-container *ngIf=\"settingsForm.get('totalBackups')?.errors as errors\">\n            <p class=\"invalid-feedback\" *ngIf=\"errors.min\">\n              {{t('min-backup-validation')}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.max\">\n              {{t('max-backup-validation', {num: errors.max.max})}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.required\">\n              {{t('field-required')}}\n            </p>\n          </ng-container>\n        </div>\n\n        <div class=\"col-md-4 col-sm-12  pe-md-2\">\n          <label for=\"log-tasks\" class=\"form-label\">{{t('log-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"logTasksTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #logTasksTooltip>{{t('log-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"log-tasks-help\">\n            <ng-container [ngTemplateOutlet]=\"logTasksTooltip\"></ng-container>\n          </span>\n          <input id=\"log-tasks\" aria-describedby=\"log-tasks-help\" class=\"form-control\" formControlName=\"totalLogs\"\n                 type=\"number\" inputmode=\"numeric\" step=\"1\" min=\"1\" max=\"30\" onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\"\n                 [class.is-invalid]=\"settingsForm.get('totalLogs')?.invalid && settingsForm.get('totalLogs')?.touched\">\n          <ng-container *ngIf=\"settingsForm.get('totalLogs')?.errors as errors\">\n            <p class=\"invalid-feedback\" *ngIf=\"errors.min\">\n              {{t('min-log-validation')}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.max\">\n              {{t('max-logs-validation', {num: errors.max.max})}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.required\">\n              {{t('field-required')}}\n            </p>\n          </ng-container>\n        </div>\n\n        <div class=\"col-md-4 col-sm-12\">\n          <label for=\"logging-level-port\" class=\"form-label\">{{t('logging-level-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"loggingLevelTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #loggingLevelTooltip>{{t('logging-level-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"logging-level-port-help\">\n            <ng-container [ngTemplateOutlet]=\"loggingLevelTooltip\"></ng-container>\n          </span>\n          <select id=\"logging-level-port\" aria-describedby=\"logging-level-port-help\" class=\"form-select\"  formControlName=\"loggingLevel\"\n                  [class.is-invalid]=\"settingsForm.get('loggingLevel')?.invalid && settingsForm.get('loggingLevel')?.touched\">\n            <option *ngFor=\"let level of logLevels\" [value]=\"level\">{{level | titlecase}}</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"row g-0 mb-2 mt-3\">\n        <div class=\"col-md-4 col-sm-12 pe-md-2\">\n          <label for=\"cache-size\" class=\"form-label\">{{t('cache-size-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"cacheSizeTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #cacheSizeTooltip>{{t('cache-size-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"cache-size-help\">\n            <ng-container [ngTemplateOutlet]=\"cacheSizeTooltip\"></ng-container>\n          </span>\n          <input id=\"cache-size\" aria-describedby=\"cache-size-help\" class=\"form-control\" formControlName=\"cacheSize\"\n                 type=\"number\" inputmode=\"numeric\" step=\"5\" min=\"50\" onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\"\n                 [class.is-invalid]=\"settingsForm.get('cacheSize')?.invalid && settingsForm.get('cacheSize')?.touched\">\n          <ng-container *ngIf=\"settingsForm.get('cacheSize')?.errors as errors\">\n            <p class=\"invalid-feedback\" *ngIf=\"errors.min\">\n              {{t('min-cache-validation')}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.required\">\n              {{t('field-required')}}\n            </p>\n          </ng-container>\n        </div>\n        <div class=\"col-md-4 col-sm-12 pe-md-2\">\n          <label for=\"on-deck-progress-days\" class=\"form-label\">{{t('on-deck-last-progress-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"onDeckProgressDaysTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #onDeckProgressDaysTooltip>{{t('on-deck-last-progress-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"on-deck-progress-days-help\">\n            <ng-container [ngTemplateOutlet]=\"onDeckProgressDaysTooltip\"></ng-container>\n          </span>\n          <input id=\"on-deck-progress-days\" aria-describedby=\"on-deck-progress-days-help\" class=\"form-control\" formControlName=\"onDeckProgressDays\"\n                 type=\"number\" inputmode=\"numeric\" step=\"1\" min=\"1\"\n                 [class.is-invalid]=\"settingsForm.get('onDeckProgressDays')?.invalid && settingsForm.get('onDeckProgressDays')?.touched\">\n          <ng-container *ngIf=\"settingsForm.get('onDeckProgressDays')?.errors as errors\">\n            <p class=\"invalid-feedback\" *ngIf=\"errors.min\">\n              {{t('min-days-validation')}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.required\">\n              {{t('field-required')}}\n            </p>\n          </ng-container>\n        </div>\n        <div class=\"col-md-4 col-sm-12\">\n          <label for=\"on-deck-update-days\" class=\"form-label\">{{t('on-deck-last-chapter-add-label')}}</label><i class=\"fa fa-info-circle ms-1\" placement=\"right\" [ngbTooltip]=\"onDeckUpdateDaysTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #onDeckUpdateDaysTooltip>{{t('on-deck-last-chapter-add-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"on-deck-update-days-help\">\n            <ng-container [ngTemplateOutlet]=\"onDeckUpdateDaysTooltip\"></ng-container>\n          </span>\n          <input id=\"on-deck-update-days\" aria-describedby=\"on-deck-update-days-help\" class=\"form-control\" formControlName=\"onDeckUpdateDays\"\n                 type=\"number\" inputmode=\"numeric\" step=\"1\" min=\"1\"\n                 [class.is-invalid]=\"settingsForm.get('onDeckUpdateDays')?.invalid && settingsForm.get('onDeckUpdateDays')?.touched\">\n          <ng-container *ngIf=\"settingsForm.get('onDeckUpdateDays')?.errors as errors\">\n            <p class=\"invalid-feedback\" *ngIf=\"errors.min\">\n              {{t('min-days-validation')}}\n            </p>\n            <p class=\"invalid-feedback\" *ngIf=\"errors.required\">\n              {{t('field-required')}}\n            </p>\n          </ng-container>\n        </div>\n      </div>\n\n      <div class=\"mb-3 mt-3\">\n        <label for=\"stat-collection\" class=\"form-label\" aria-describedby=\"collection-info\">{{t('allow-stats-label')}}</label>\n        <p class=\"accent\" id=\"collection-info\">{{t('allow-stats-tooltip-part-1')}}<a [href]=\"WikiLink.DataCollection\" rel=\"noopener noreferrer\" target=\"_blank\" referrerpolicy=\"no-refer\">wiki</a> {{t('allow-stats-tooltip-part-2')}}</p>\n        <div class=\"form-check form-switch\">\n          <input id=\"stat-collection\" type=\"checkbox\" aria-label=\"Stat Collection\" class=\"form-check-input\" formControlName=\"allowStatCollection\" role=\"switch\">\n          <label for=\"stat-collection\" class=\"form-check-label\">{{t('send-data')}}</label>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"opds\" aria-describedby=\"opds-info\" class=\"form-label\">{{t('opds-label')}}</label>\n        <p class=\"accent\" id=\"opds-info\">{{t('opds-tooltip')}}</p>\n        <div class=\"form-check form-switch\">\n          <input id=\"opds\" type=\"checkbox\" aria-label=\"OPDS Support\" class=\"form-check-input\" formControlName=\"enableOpds\">\n          <label for=\"opds\" class=\"form-check-label\">{{t('enable-opds')}}</label>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"folder-watching\" class=\"form-label\" aria-describedby=\"folder-watching-info\">{{t('folder-watching-label')}}</label>\n        <p class=\"accent\" id=\"folder-watching-info\">{{t('folder-watching-tooltip')}}</p>\n        <div class=\"form-check form-switch\">\n          <input id=\"folder-watching\" type=\"checkbox\" class=\"form-check-input\" formControlName=\"enableFolderWatching\" role=\"switch\">\n          <label for=\"folder-watching\" class=\"form-check-label\">{{t('enable-folder-watching')}}</label>\n        </div>\n      </div>\n\n      <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end\">\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetToDefaults()\">{{t('reset-to-default')}}</button>\n        <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" (click)=\"resetForm()\">{{t('reset')}}</button>\n        <button type=\"submit\" class=\"flex-fill btn btn-primary\" (click)=\"saveSettings()\" [disabled]=\"!settingsForm.dirty\">{{t('save')}}</button>\n      </div>\n    </form>\n  </div>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, inject, OnInit} from '@angular/core';\nimport {ActivatedRoute, RouterLink} from '@angular/router';\nimport {Title} from '@angular/platform-browser';\nimport {NavService} from '../../_services/nav.service';\nimport {SentenceCasePipe} from '../../_pipes/sentence-case.pipe';\nimport {LicenseComponent} from '../license/license.component';\nimport {ManageTasksSettingsComponent} from '../manage-tasks-settings/manage-tasks-settings.component';\nimport {ServerStatsComponent} from '../../statistics/_components/server-stats/server-stats.component';\nimport {ManageSystemComponent} from '../manage-system/manage-system.component';\nimport {ManageLogsComponent} from '../manage-logs/manage-logs.component';\nimport {ManageLibraryComponent} from '../manage-library/manage-library.component';\nimport {ManageUsersComponent} from '../manage-users/manage-users.component';\nimport {ManageMediaSettingsComponent} from '../manage-media-settings/manage-media-settings.component';\nimport {ManageEmailSettingsComponent} from '../manage-email-settings/manage-email-settings.component';\nimport {ManageSettingsComponent} from '../manage-settings/manage-settings.component';\nimport {NgFor, NgIf} from '@angular/common';\nimport {NgbNav, NgbNavContent, NgbNavItem, NgbNavItemRole, NgbNavLink, NgbNavOutlet} from '@ng-bootstrap/ng-bootstrap';\nimport {\n  SideNavCompanionBarComponent\n} from '../../sidenav/_components/side-nav-companion-bar/side-nav-companion-bar.component';\nimport {translate, TranslocoDirective, TranslocoService} from \"@ngneat/transloco\";\nimport {WikiLink} from \"../../_models/wiki\";\n\nenum TabID {\n  General = '',\n  Email = 'email',\n  Media = 'media',\n  Users = 'users',\n  Libraries = 'libraries',\n  System = 'system',\n  Tasks = 'tasks',\n  Logs = 'logs',\n  Statistics = 'statistics',\n  KavitaPlus = 'kavitaplus'\n}\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n    standalone: true,\n  imports: [SideNavCompanionBarComponent, NgbNav, NgFor, NgbNavItem, NgbNavItemRole, NgbNavLink, RouterLink,\n    NgbNavContent, NgIf, ManageSettingsComponent, ManageEmailSettingsComponent, ManageMediaSettingsComponent,\n    ManageUsersComponent, ManageLibraryComponent, ManageSystemComponent, ServerStatsComponent,\n    ManageTasksSettingsComponent, LicenseComponent, NgbNavOutlet, SentenceCasePipe, TranslocoDirective],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements OnInit {\n\n  private readonly cdRef = inject(ChangeDetectorRef);\n  protected readonly route = inject(ActivatedRoute);\n  protected readonly navService = inject(NavService);\n  private readonly titleService = inject(Title);\n  protected readonly TabID = TabID;\n  protected readonly WikiLink = WikiLink;\n\n\n  tabs: Array<{title: string, fragment: string}> = [\n    {title: 'general-tab', fragment: TabID.General},\n    {title: 'users-tab', fragment: TabID.Users},\n    {title: 'libraries-tab', fragment: TabID.Libraries},\n    {title: 'media-tab', fragment: TabID.Media},\n    {title: 'email-tab', fragment: TabID.Email},\n    {title: 'tasks-tab', fragment: TabID.Tasks},\n    {title: 'statistics-tab', fragment: TabID.Statistics},\n    {title: 'system-tab', fragment: TabID.System},\n    {title: 'kavita+-tab', fragment: TabID.KavitaPlus},\n  ];\n  active = this.tabs[0];\n\n\n  constructor() {\n    this.route.fragment.subscribe(frag => {\n      const tab = this.tabs.filter(item => item.fragment === frag);\n      if (tab.length > 0) {\n        this.active = tab[0];\n      } else {\n        this.active = this.tabs[0]; // Default to first tab\n      }\n      this.cdRef.markForCheck();\n    });\n\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Kavita - ' + translate('admin-dashboard.title'));\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'admin-dashboard'\">\n  <app-side-nav-companion-bar>\n    <h2 title>\n      {{t('title')}}\n    </h2>\n  </app-side-nav-companion-bar>\n  <div class=\"container-fluid g-0\">\n    <ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"active\" class=\"nav nav-tabs\">\n      <li *ngFor=\"let tab of tabs\" [ngbNavItem]=\"tab\" class=tab>\n        <a ngbNavLink routerLink=\".\" [fragment]=\"tab.fragment\">{{ t(tab.title) }}</a>\n        <ng-template ngbNavContent>\n          <ng-container *ngIf=\"tab.fragment === TabID.General\">\n            <app-manage-settings></app-manage-settings>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Email\">\n            <app-manage-email-settings></app-manage-email-settings>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Media\">\n            <app-manage-media-settings></app-manage-media-settings>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Users\">\n            <app-manage-users></app-manage-users>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Libraries\">\n            <app-manage-library></app-manage-library>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.System\">\n            <app-manage-system></app-manage-system>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Statistics\">\n            <app-server-stats></app-server-stats>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.Tasks\">\n            <app-manage-tasks-settings></app-manage-tasks-settings>\n          </ng-container>\n          <ng-container *ngIf=\"tab.fragment === TabID.KavitaPlus\">\n            <p>{{t('kavita+-desc-part-1')}} <a [href]=\"WikiLink.KavitaPlus\" target=\"_blank\" rel=\"noreferrer nofollow\">{{t('kavita+-desc-part-2')}}</a> {{t('kavita+-desc-part-3')}} <a [href]=\"WikiLink.KavitaPlusFAQ\" target=\"_blank\" rel=\"noreferrer nofollow\">FAQ</a></p>\n            <p>{{t('kavita+-requirement')}} <a [routerLink]=\"'/announcements'\">{{t('kavita+-releases')}}</a></p>\n            <app-license></app-license>\n          </ng-container>\n        </ng-template>\n      </li>\n    </ul>\n    <div [ngbNavOutlet]=\"nav\" class=\"mt-3 mb-3\"></div>\n\n  </div>\n\n</ng-container>\n", "import { Routes } from '@angular/router';\nimport { AdminGuard } from '../_guards/admin.guard';\nimport { DashboardComponent } from '../admin/dashboard/dashboard.component';\n\nexport const routes: Routes = [\n  {path: '**', component: DashboardComponent, pathMatch: 'full', canActivate: [AdminGuard]},\n  {\n    path: '',\n    runGuardsAndResolvers: 'always',\n    canActivate: [AdminGuard],\n    children: [\n      {path: 'dashboard', component: DashboardComponent},\n    ]\n  }\n];\n\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "ctx_r3", "manageLink", "\u0275\u0275sanitizeUrl", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r3", "\u0275\u0275element", "isChecking", "\u0275\u0275template", "LicenseComponent_ng_container_0_Conditional_9_Conditional_0_Template", "LicenseComponent_ng_container_0_Conditional_9_Conditional_1_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "validateLicense", "LicenseComponent_ng_container_0_Conditional_9_Conditional_3_Template", "LicenseComponent_ng_container_0_Conditional_9_Conditional_4_Template", "toggleViewMode", "LicenseComponent_ng_container_0_Conditional_9_Conditional_6_Template", "LicenseComponent_ng_container_0_Conditional_9_Conditional_7_Template", "\u0275\u0275conditional", "hasValidLicense", "isViewMode", "_r5", "buyLink", "LicenseComponent_ng_container_0_Conditional_11_Conditional_2_Conditional_3_Conditional_0_Template", "LicenseComponent_ng_container_0_Conditional_11_Conditional_2_Conditional_3_Conditional_1_Template", "LicenseComponent_ng_container_0_Conditional_11_Conditional_2_Conditional_2_Template", "LicenseComponent_ng_container_0_Conditional_11_Conditional_2_Conditional_3_Template", "\u0275\u0275textInterpolate1", "LicenseComponent_ng_container_0_Conditional_11_Conditional_2_Template", "LicenseComponent_ng_container_0_Conditional_11_Conditional_3_Template", "hasLicense", "LicenseComponent_ng_container_0_Conditional_32_Conditional_1_Template", "tmp_4_0", "formGroup", "get", "errors", "pattern", "\u0275\u0275elementContainerStart", "LicenseComponent_ng_container_0_Conditional_9_Template", "LicenseComponent_ng_container_0_Conditional_10_Template", "LicenseComponent_ng_container_0_Conditional_11_Template", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "LicenseComponent_ng_container_0_Conditional_32_Template", "deleteLicense", "resetLicense", "saveForm", "LicenseComponent_ng_container_0_Conditional_39_Template", "\u0275\u0275twoWayProperty", "WikiLink", "KavitaPlusDiscordId", "\u0275\u0275classProp", "tmp_14_0", "invalid", "touched", "dirty", "tmp_18_0", "value", "tmp_20_0", "isSaving", "LicenseComponent", "constructor", "cdRef", "inject", "ChangeDetectorRef", "toastr", "ToastrService", "confirmService", "ConfirmService", "accountService", "AccountService", "FormGroup", "environment", "ngOnInit", "addControl", "FormControl", "Validators", "required", "markForCheck", "hasAnyLicense", "subscribe", "res", "resetForm", "setValue", "updateUserLicense", "trim", "isValid", "success", "translate", "info", "length", "err", "hasOwnProperty", "error", "JSON", "parse", "__async", "confirm", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "LicenseComponent_ng_container_0_Template", "NgbTooltip", "LoadingComponent", "NgbCollapse", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "TranslocoDirective", "styles", "changeDetection", "_LicenseComponent", "\u0275\u0275text", "\u0275\u0275textInterpolate", "t_r2", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275property", "freq_r3", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_13_Conditional_4_div_1_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_13_Conditional_4_div_2_Template", "tmp_8_0", "ctx_r3", "settingsForm", "get", "errors", "required", "tmp_9_0", "invalidCron", "\u0275\u0275element", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_13_Conditional_4_Template", "\u0275\u0275classProp", "invalid", "touched", "\u0275\u0275conditional", "dirty", "freq_r5", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_24_Conditional_4_div_1_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_24_Conditional_4_div_2_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_24_Conditional_4_Template", "freq_r6", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_35_Conditional_4_div_1_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_35_Conditional_4_div_2_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_35_Conditional_4_Template", "\u0275\u0275listener", "task_r8", "\u0275\u0275restoreView", "_r7", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "runAdhoc", "\u0275\u0275propertyInterpolate1", "idx_r9", "name", "description", "\u0275\u0275attributeInterpolate1", "\u0275\u0275pipeBind1", "task_r10", "title", "lastExecutionUtc", "cron", "ManageTasksSettingsComponent_ng_container_0_form_2_ng_template_7_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "ManageTasksSettingsComponent_ng_container_0_form_2_option_12_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_13_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_ng_template_18_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_option_23_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_24_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_ng_template_29_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_option_34_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_Conditional_35_Template", "_r1", "resetToDefaults", "resetForm", "saveSettings", "ManageTasksSettingsComponent_ng_container_0_form_2_tr_55_Template", "ManageTasksSettingsComponent_ng_container_0_form_2_tr_68_Template", "taskScanTooltip_r11", "taskFrequencies", "value", "customOption", "taskBackupTooltip_r12", "taskCleanupTooltip_r13", "taskFrequenciesForCleanup", "adhocTasks", "recurringTasks$", "\u0275\u0275elementContainerStart", "ManageTasksSettingsComponent_ng_container_0_form_2_Template", "serverSettings", "undefined", "ManageTasksSettingsComponent", "constructor", "settingsService", "toastr", "serverService", "modalService", "downloadService", "cdRef", "inject", "ChangeDetectorRef", "destroyRef", "DestroyRef", "FormGroup", "logLevels", "of", "api", "convertMedia", "successMessage", "defer", "localStorage", "removeItem", "clearCache", "cleanupWantToRead", "backupDatabase", "download", "analyzeFiles", "checkForUpdate", "successFunction", "update", "info", "translate", "modalRef", "open", "UpdateNotificationModalComponent", "scrollable", "size", "componentInstance", "updateData", "ngOnInit", "forkJoin", "frequencies", "getTaskFrequencies", "levels", "getLoggingLevels", "settings", "getServerSettings", "subscribe", "result", "push", "filter", "f", "addControl", "FormControl", "taskScan", "Validators", "taskBackup", "taskCleanup", "includes", "setValue", "valueChanges", "pipe", "debounceTime", "switchMap", "val", "isValidCronExpression", "tap", "isValid", "setErrors", "markForCheck", "takeUntilDestroyed", "getRecurringJobs", "shareReplay", "markAsPristine", "__async", "modelSettings", "Object", "assign", "updateServerSettings", "take", "success", "err", "console", "error", "resetServerSettings", "task", "data", "length", "\u0275\u0275directiveInject", "SettingsService", "ToastrService", "ServerService", "NgbModal", "DownloadService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageTasksSettingsComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgFor", "AsyncPipe", "TitleCasePipe", "DefaultValuePipe", "TranslocoModule", "TranslocoDirective", "NgTemplateOutlet", "TranslocoLocaleModule", "UtcToLocalTimePipe", "styles", "changeDetection", "_ManageTasksSettingsComponent", "\u0275\u0275elementContainerStart", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "statuses_r1", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate1", "idx_r5", "\u0275\u0275textInterpolate1", "item_r4", "name", "\u0275\u0275pipeBind2", "value", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSort", "\u0275\u0275template", "PublicationStatusStatsComponent_ng_container_0_ng_container_13_ng_template_2_tr_8_Template", "t_r6", "PublicationStatusStatsComponent_ng_container_0_ng_container_13_ng_container_1_Template", "PublicationStatusStatsComponent_ng_container_0_ng_container_13_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "formControl", "tableLayout_r7", "PublicationStatusStatsComponent_ng_container_0_ng_container_13_Template", "\u0275\u0275textInterpolate", "\u0275\u0275pipeBind1", "publicationStatues$", "PublicationStatusStatsComponent", "constructor", "statService", "currentSort", "BehaviorSubject", "column", "direction", "currentSort$", "asObservable", "view", "destroyRef", "inject", "DestroyRef", "FormControl", "combineLatest", "getPublicationStatus", "pipe", "map", "sortConfig", "data", "sort", "a", "b", "res", "compare", "takeUntilDestroyed", "evt", "next", "headers", "forEach", "header", "sortable", "\u0275\u0275directiveInject", "StatisticsService", "selectors", "viewQuery", "rf", "ctx", "SortableHeader", "PublicationStatusStatsComponent_ng_container_0_Template", "ReactiveFormsModule", "\u0275NgNoValidate", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormControlDirective", "NgIf", "PieChartModule", "AdvancedPieChartComponent", "SortableHeader_1", "NgFor", "AsyncPipe", "DecimalPipe", "TranslocoDirective", "styles", "changeDetection", "_PublicationStatusStatsComponent", "\u0275\u0275text", "\u0275\u0275textInterpolate", "t_r1", "\u0275\u0275elementContainerStart", "\u0275\u0275element", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pipeBind1", "ctx_r1", "vizData2$", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275propertyInterpolate1", "idx_r5", "\u0275\u0275textInterpolate1", "item_r4", "extension", "format", "totalSize", "\u0275\u0275pipeBind2", "totalFiles", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onSort", "\u0275\u0275template", "FileBreakdownStatsComponent_ng_container_0_ng_container_16_ng_template_2_tr_12_Template", "files_r6", "tmp_13_0", "rawData$", "totalFileSize", "FileBreakdownStatsComponent_ng_container_0_ng_container_16_ng_container_1_Template", "FileBreakdownStatsComponent_ng_container_0_ng_container_16_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "formControl", "value", "tableLayout_r7", "FileBreakdownStatsComponent_ng_container_0_ng_template_14_Template", "FileBreakdownStatsComponent_ng_container_0_ng_container_16_Template", "tooltip_r8", "files$", "FileBreakdownStatsComponent", "constructor", "destroyRef", "inject", "DestroyRef", "cdRef", "ChangeDetectorRef", "currentSort", "BehaviorSubject", "column", "direction", "currentSort$", "asObservable", "view", "FormControl", "statService", "StatisticsService", "translocoService", "TranslocoService", "ngbModal", "NgbModal", "getFileBreakdown", "pipe", "takeUntilDestroyed", "shareReplay", "combineLatest", "map", "sortConfig", "data", "fileBreakdown", "sort", "a", "b", "res", "compare", "d", "name", "translate", "extra", "evt", "next", "headers", "forEach", "header", "sortable", "selectors", "viewQuery", "rf", "ctx", "SortableHeader", "FileBreakdownStatsComponent_ng_container_0_Template", "NgbTooltip", "ReactiveFormsModule", "\u0275NgNoValidate", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormControlDirective", "NgIf", "PieChartModule", "AdvancedPieChartComponent", "SortableHeader_1", "NgFor", "AsyncPipe", "DecimalPipe", "BytesPipe", "MangaFormatPipe", "TranslocoDirective", "styles", "changeDetection", "_FileBreakdownStatsComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r1", "\u0275\u0275textInterpolate2", "ctx_r1", "breakdown", "erroredSeries", "\u0275\u0275template", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Conditional_6_Conditional_1_Conditional_3_Conditional_2_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275conditional", "\u0275\u0275element", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Conditional_6_Conditional_1_Conditional_3_Template", "\u0275\u0275property", "errorPercent", "completedPercent", "seriesCompleted", "totalSeries", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Conditional_6_Conditional_0_Template", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Conditional_6_Conditional_1_Template", "\u0275\u0275elementContainerStart", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Conditional_6_Template", "KavitaplusMetadataBreakdownStatsComponent", "constructor", "cdRef", "inject", "ChangeDetectorRef", "statsService", "StatisticsService", "getKavitaPlusMetadataBreakdown", "subscribe", "res", "markForCheck", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "KavitaplusMetadataBreakdownStatsComponent_ng_container_0_Template", "TranslocoDirective", "NgbProgressbarStacked", "NgbProgressbar", "NgbTooltip", "styles", "changeDetection", "_KavitaplusMetadataBreakdownStatsComponent", "\u0275\u0275elementStart", "\u0275\u0275elementContainerStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275listener", "$event", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "openGenreList", "\u0275\u0275resetView", "stopPropagation", "openTagList", "openPeopleList", "\u0275\u0275advance", "\u0275\u0275property", "t_r4", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "stats_r3", "seriesCount", "\u0275\u0275textInterpolate1", "_c1", "volumeCount", "totalFiles", "totalSize", "totalGenres", "totalTags", "totalPeople", "totalReadingTime", "\u0275\u0275template", "ServerStatsComponent_ng_container_0_ng_container_15_Conditional_14_Template", "\u0275\u0275conditional", "ctx_r1", "accountService", "hasValidLicense$", "ServerStatsComponent_ng_container_0_div_2_Template", "ServerStatsComponent_ng_container_0_ng_container_15_Template", "stats$", "releaseYears$", "mostActiveUsers$", "mostActiveLibrary$", "mostActiveSeries$", "seriesImage", "openSeries", "recentlyRead$", "breakpoint$", "ServerStatsComponent", "onResize", "breakpointSubject", "next", "utilityService", "getActiveBreakpoint", "Breakpoint", "constructor", "statService", "router", "imageService", "metadataService", "modalService", "filterUtilityService", "destroyRef", "inject", "DestroyRef", "AccountService", "data", "series", "extra", "navigate", "libraryId", "id", "ReplaySubject", "asObservable", "getSeriesCoverImage", "getServerStatistics", "pipe", "takeUntilDestroyed", "shareReplay", "getTopYears", "map", "d", "mostActiveUsers", "userCounts", "count", "name", "value", "username", "mostActiveLibraries", "counts", "mostReadSeries", "recentlyRead", "getAllGenres", "subscribe", "genres", "ref", "open", "GenericListModalComponent", "scrollable", "componentInstance", "items", "t", "title", "translate", "clicked", "item", "applyFilter", "FilterField", "Genres", "FilterComparison", "Contains", "filter", "g", "getAllTags", "tags", "Tags", "getAllPeople", "people", "Set", "person", "\u0275\u0275directiveInject", "StatisticsService", "Router", "ImageService", "MetadataService", "NgbModal", "UtilityService", "FilterUtilitiesService", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275resolveWindow", "ServerStatsComponent_ng_container_0_Template", "NgIf", "IconAndTitleComponent", "StatListComponent", "TopReadersComponent", "FileBreakdownStatsComponent", "PublicationStatusStatsComponent", "ReadingActivityComponent", "DayBreakdownComponent", "AsyncPipe", "DecimalPipe", "CompactNumberPipe", "TimeDurationPipe", "BytesPipe", "TranslocoDirective", "KavitaplusMetadataBreakdownStatsComponent", "styles", "changeDetection", "_ServerStatsComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r1", "ctx_r1", "serverInfo", "kavitaVersion", "installId", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ManageSystemComponent_ng_container_0_div_2_Template", "\u0275\u0275element", "\u0275\u0275property", "ManageSystemComponent", "constructor", "serverService", "cdRef", "inject", "ChangeDetectorRef", "ngOnInit", "getServerInfo", "subscribe", "info", "markForCheck", "\u0275\u0275directiveInject", "ServerService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageSystemComponent_ng_container_0_Template", "NgIf", "TranslocoDirective", "ChangelogComponent", "styles", "changeDetection", "_ManageSystemComponent", "LibraryTypePipe", "constructor", "translocoService", "inject", "TranslocoService", "transform", "libraryType", "LibraryType", "Book", "translate", "Comic", "ComicVine", "Images", "Manga", "LightNovel", "pure", "standalone", "_LibraryTypePipe", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "library_r4", "lastScanned", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "scanLibrary", "\u0275\u0275element", "deleteLibrary", "editLibrary", "\u0275\u0275template", "ManageLibraryComponent_ng_container_0_li_12_span_23_Template", "ManageLibraryComponent_ng_container_0_li_12_ng_template_24_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "idx_r5", "\u0275\u0275property", "id", "\u0275\u0275textInterpolate", "name", "t_r7", "deletionInProgress", "\u0275\u0275textInterpolate2", "type", "folders", "length", "activeDate_r6", "\u0275\u0275elementContainerStart", "_r1", "addLibrary", "ManageLibraryComponent_ng_container_0_li_12_Template", "ManageLibraryComponent_ng_container_0_li_13_Template", "ManageLibraryComponent_ng_container_0_li_14_Template", "libraries", "libraryTrackBy", "loading", "ManageLibraryComponent", "constructor", "actionService", "inject", "ActionService", "libraryService", "LibraryService", "modalService", "NgbModal", "toastr", "ToastrService", "confirmService", "ConfirmService", "hubService", "MessageHubService", "cdRef", "ChangeDetectorRef", "destroyRef", "DestroyRef", "index", "item", "ngOnInit", "getLibraries", "messages$", "pipe", "takeUntilDestroyed", "filter", "event", "EVENTS", "ScanSeries", "NotificationProgress", "distinctUntilChanged", "prev", "curr", "hasMessageChanged", "subscribe", "libId", "payload", "libraryId", "body", "hasOwnProperty", "take", "newLibrary", "find", "lib", "existingLibrary", "undefined", "markForCheck", "eventType", "library", "modalRef", "open", "LibrarySettingsModalComponent", "size", "fullscreen", "componentInstance", "closed", "refresh", "__async", "confirm", "translate", "delete", "success", "scan", "info", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageLibraryComponent_ng_container_0_Template", "NgFor", "RouterLink", "NgbTooltip", "NgIf", "LibraryTypePipe", "TimeAgoPipe", "SentenceCasePipe", "TranslocoModule", "TranslocoDirective", "DefaultDatePipe", "styles", "changeDetection", "_ManageLibraryComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r3", "\u0275\u0275textInterpolate1", "ctx_r1", "errorMessage", "\u0275\u0275elementContainerStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "close", "\u0275\u0275template", "ResetPasswordModalComponent_ng_container_0_div_8_Template", "\u0275\u0275element", "save", "\u0275\u0275property", "resetPasswordForm", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "member", "username", "value", "password", "length", "ResetPasswordModalComponent", "constructor", "toastr", "inject", "ToastrService", "accountService", "AccountService", "modal", "NgbActiveModal", "FormGroup", "FormControl", "Validators", "required", "resetPassword", "subscribe", "success", "translate", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ResetPasswordModalComponent_ng_container_0_Template", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinLengthValidator", "FormGroupDirective", "FormControlName", "NgIf", "SentenceCasePipe", "TranslocoDirective", "styles", "_ResetPasswordModalComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleAll", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275property", "selectAll", "hasSomeSelected", "\u0275\u0275textInterpolate", "t_r3", "library_r5", "_r4", "$implicit", "handleSelection", "\u0275\u0275propertyInterpolate1", "i_r6", "selections", "isSelected", "name", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "LibrarySelectorComponent_ng_container_0_div_3_div_1_Template", "LibrarySelectorComponent_ng_container_0_div_3_li_3_Template", "LibrarySelectorComponent_ng_container_0_div_3_li_4_Template", "allLibraries", "length", "\u0275\u0275elementContainerStart", "LibrarySelectorComponent_ng_container_0_div_3_Template", "isLoading", "LibrarySelectorComponent", "constructor", "libraryService", "fb", "selected", "EventEmitter", "selectedLibraries", "ngOnInit", "getLibraries", "subscribe", "libs", "setupSelections", "SelectionModel", "member", "undefined", "libraries", "forEach", "lib", "toggle", "a", "b", "emit", "s", "item", "numberOfSelected", "\u0275\u0275directiveInject", "LibraryService", "FormBuilder", "selectors", "inputs", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "LibrarySelectorComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "FormsModule", "NgModel", "NgFor", "TranslocoDirective", "styles", "_LibrarySelectorComponent", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "role_r2", "\u0275\u0275restoreView", "_r1", "$implicit", "i0", "\u0275\u0275twoWayBindingSet", "selected", "\u0275\u0275resetView", "\u0275\u0275listener", "ctx_r2", "\u0275\u0275nextContext", "handleModelUpdate", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate1", "i_r4", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "disabled", "\u0275\u0275textInterpolate", "data", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "RoleSelectorComponent_ng_container_0_li_4_Template", "t_r5", "selectedRoles", "RoleSelectorComponent", "constructor", "modal", "accountService", "cdRef", "allowAdmin", "EventEmitter", "allRoles", "ngOnInit", "getRoles", "subscribe", "roles", "bannedRoles", "push", "filter", "item", "includes", "map", "markForCheck", "preselect", "emit", "member", "undefined", "forEach", "role", "foundRole", "length", "r", "e", "\u0275\u0275directiveInject", "NgbActiveModal", "AccountService", "ChangeDetectorRef", "selectors", "inputs", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "RoleSelectorComponent_ng_container_0_Template", "NgFor", "ReactiveFormsModule", "CheckboxControlValueAccessor", "NgControlStatus", "FormsModule", "NgModel", "TranslocoDirective", "styles", "changeDetection", "_RoleSelectorComponent", "\u0275\u0275element", "\u0275\u0275property", "\u0275\u0275pipeBind1", "t_r3", "\u0275\u0275sanitizeHtml", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "InviteUserComponent_ng_container_0_form_8_div_6_div_1_Template", "ctx_r1", "email", "errors", "required", "InviteUserComponent_ng_container_0_form_8_div_6_Template", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateRoleSelection", "updateLibrarySelection", "updateRestrictionSelection", "inviteForm", "\u0275\u0275textInterpolate", "\u0275\u0275classProp", "tmp_5_0", "get", "invalid", "touched", "dirty", "hasAdminRoleSelected", "\u0275\u0275elementContainerStart", "InviteUserComponent_ng_container_0_ng_container_9_Conditional_5_Template", "\u0275\u0275conditional", "inviteError", "\u0275\u0275propertyInterpolate", "emailLink", "\u0275\u0275sanitizeUrl", "makeLink", "_r5", "invite", "InviteUserComponent_ng_container_0_button_13_span_1_Template", "isSending", "valid", "_r1", "close", "InviteUserComponent_ng_container_0_p_7_Template", "InviteUserComponent_ng_container_0_form_8_Template", "InviteUserComponent_ng_container_0_ng_container_9_Template", "InviteUserComponent_ng_container_0_button_13_Template", "invited", "\u0275\u0275classMapInterpolate1", "InviteUserComponent", "selectedRoles", "includes", "constructor", "modal", "accountService", "toastr", "FormGroup", "selectedLibraries", "selectedRestriction", "ageRating", "AgeRating", "NotApplicable", "includeUnknowns", "cdRef", "inject", "ChangeDetectorRef", "val", "ngOnInit", "addControl", "FormControl", "Validators", "value", "trim", "inviteUser", "libraries", "roles", "ageRestriction", "subscribe", "data", "markForCheck", "invalidEmail", "info", "translate", "emailSent", "err", "map", "l", "id", "restriction", "\u0275\u0275directiveInject", "NgbActiveModal", "AccountService", "ToastrService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "InviteUserComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "FormGroupDirective", "FormControlName", "RoleSelectorComponent", "LibrarySelectorComponent", "RestrictionSelectorComponent", "ApiKeyComponent", "TranslocoDirective", "SafeHtmlPipe", "styles", "_InviteUserComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "t_r3", "\u0275\u0275pureFunction1", "_c0", "ctx_r1", "allowedCharacters", "\u0275\u0275template", "EditUserComponent_ng_container_0_div_15_div_1_Template", "EditUserComponent_ng_container_0_div_15_div_2_Template", "\u0275\u0275property", "tmp_3_0", "userForm", "get", "errors", "required", "tmp_4_0", "pattern", "EditUserComponent_ng_container_0_div_21_div_1_Template", "EditUserComponent_ng_container_0_div_21_div_2_Template", "email", "\u0275\u0275element", "\u0275\u0275elementContainerStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "close", "EditUserComponent_ng_container_0_div_15_Template", "EditUserComponent_ng_container_0_div_21_Template", "$event", "updateRoleSelection", "updateLibrarySelection", "updateRestrictionSelection", "save", "EditUserComponent_ng_container_0_span_34_Template", "\u0275\u0275textInterpolate2", "\u0275\u0275pipeBind1", "member", "username", "\u0275\u0275textInterpolate", "\u0275\u0275classProp", "tmp_6_0", "invalid", "touched", "dirty", "tmp_9_0", "hasAdminRoleSelected", "isSaving", "valid", "AllowedUsernameCharacters", "EditUserComponent", "password", "selectedRoles", "includes", "constructor", "modal", "accountService", "selectedLibraries", "FormGroup", "ngOnInit", "addControl", "FormControl", "Validators", "disable", "selectedRestriction", "ageRestriction", "roles", "restriction", "libraries", "map", "l", "id", "model", "getRawValue", "userId", "update", "subscribe", "\u0275\u0275directiveInject", "NgbActiveModal", "AccountService", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "EditUserComponent_ng_container_0_Template", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "NgIf", "RoleSelectorComponent", "LibrarySelectorComponent", "RestrictionSelectorComponent", "SentenceCasePipe", "TranslocoDirective", "styles", "_EditUserComponent", "\u0275\u0275elementContainerStart", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "member_r4", "\u0275\u0275nextContext", "$implicit", "ctx_r1", "\u0275\u0275resetView", "resendEmail", "\u0275\u0275element", "\u0275\u0275elementEnd", "setup", "\u0275\u0275advance", "\u0275\u0275property", "t_r6", "_r7", "updatePassword", "_r3", "deleteUser", "openEditUser", "\u0275\u0275template", "ManageUsersComponent_ng_container_0_li_12_div_6_ng_container_7_Template", "ManageUsersComponent_ng_container_0_li_12_div_6_button_8_Template", "isPending", "\u0275\u0275text", "\u0275\u0275textInterpolate", "ManageUsersComponent_ng_container_0_li_12_ng_template_11_i_4_Template", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "lastActiveUtc", "tmp_8_0", "messageHub", "onlineUsers$", "includes", "username", "lib_r8", "name", "ManageUsersComponent_ng_container_0_li_12_div_13_app_tag_badge_2_Template", "libraries", "role_r9", "ManageUsersComponent_ng_container_0_li_12_div_15_ng_template_3_ng_template_1_app_tag_badge_0_Template", "roles_r10", "ManageUsersComponent_ng_container_0_li_12_div_15_ng_template_3_ng_container_0_Template", "ManageUsersComponent_ng_container_0_li_12_div_15_ng_template_3_ng_template_1_Template", "\u0275\u0275templateRefExtractor", "hasAdminRole", "allRoles_r11", "ManageUsersComponent_ng_container_0_li_12_div_15_span_2_Template", "ManageUsersComponent_ng_container_0_li_12_div_15_ng_template_3_Template", "length", "showRoles_r12", "ManageUsersComponent_ng_container_0_li_12_div_6_Template", "ManageUsersComponent_ng_container_0_li_12_span_10_Template", "ManageUsersComponent_ng_container_0_li_12_ng_template_11_Template", "ManageUsersComponent_ng_container_0_li_12_div_13_Template", "ManageUsersComponent_ng_container_0_li_12_div_15_Template", "\u0275\u0275propertyInterpolate1", "idx_r13", "\u0275\u0275pureFunction1", "_c0", "loggedInUsername", "canEditMember", "activeTime_r14", "getRoles", "_r1", "inviteUser", "ManageUsersComponent_ng_container_0_li_12_Template", "ManageUsersComponent_ng_container_0_li_13_Template", "ManageUsersComponent_ng_container_0_li_14_Template", "members", "loadingMembers", "ManageUsersComponent", "constructor", "translocoService", "inject", "TranslocoService", "cdRef", "ChangeDetectorRef", "memberService", "MemberService", "accountService", "AccountService", "modalService", "NgbModal", "toastr", "ToastrService", "confirmService", "ConfirmService", "MessageHubService", "serverService", "ServerService", "router", "Router", "currentUser$", "pipe", "take", "subscribe", "user", "markForCheck", "ngOnInit", "loadMembers", "getMembers", "sort", "a", "b", "nameA", "toUpperCase", "nameB", "member", "modalRef", "open", "EditUserComponent", "size", "componentInstance", "closed", "__async", "confirm", "translate", "deleteMember", "setTimeout", "success", "InviteUserComponent", "successful", "resendConfirmationEmail", "id", "response", "emailSent", "info", "email", "alert", "emailLink", "getInviteUrl", "url", "navigateByUrl", "ResetPasswordModalComponent", "formatLibraries", "map", "item", "join", "roles", "indexOf", "filter", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageUsersComponent_ng_container_0_Template", "NgFor", "NgIf", "NgbTooltip", "TagBadgeComponent", "AsyncPipe", "TitleCasePipe", "TranslocoModule", "TranslocoDirective", "DefaultDatePipe", "NgClass", "DefaultValuePipe", "UtcToLocalTimePipe", "styles", "changeDetection", "_ManageUsersComponent", "EncodeFormat", "EncodeFormats", "value", "PNG", "title", "WebP", "AVIF", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r1", "isLoading", "\u0275\u0275text", "\u0275\u0275listener", "item_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "\u0275\u0275nextContext", "\u0275\u0275resetView", "editSeries", "seriesId", "\u0275\u0275propertyInterpolate2", "libraryId", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "details", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "createdUtc", "comment", "t_r5", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ManageScrobbleErrorsComponent_ng_container_0_ng_container_27_tr_1_Template", "ManageScrobbleErrorsComponent_ng_container_0_ng_container_27_tr_2_Template", "filteredData_r6", "length", "_r1", "clear", "$event", "onSort", "ManageScrobbleErrorsComponent_ng_container_0_tr_26_Template", "ManageScrobbleErrorsComponent_ng_container_0_ng_container_27_Template", "formGroup", "\u0275\u0275pipeBind2", "data", "filterList", "ManageScrobbleErrorsComponent", "constructor", "scrobbleCount", "EventEmitter", "scrobbleService", "inject", "ScrobblingService", "messageHub", "MessageHubService", "cdRef", "ChangeDetectorRef", "destroyRef", "DestroyRef", "seriesService", "SeriesService", "modalService", "NgbModal", "messageHubUpdate$", "messages$", "pipe", "takeUntilDestroyed", "filter", "m", "event", "EVENTS", "ScanSeries", "shareReplay", "currentSort", "BehaviorSubject", "column", "direction", "currentSort$", "asObservable", "FormGroup", "FormControl", "listItem", "query", "get", "value", "toLowerCase", "indexOf", "ngOnInit", "loadData", "subscribe", "_", "sortConfig", "sort", "a", "b", "res", "compare", "markForCheck", "evt", "next", "headers", "forEach", "header", "sortable", "getScrobbleErrors", "d", "emit", "detectChanges", "clearScrobbleErrors", "getSeries", "series", "modalRef", "open", "EditSeriesModalComponent", "size", "componentInstance", "selectors", "viewQuery", "rf", "ctx", "SortableHeader", "ManageScrobbleErrorsComponent_ng_container_0_Template", "CommonModule", "NgForOf", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "FilterPipe", "LoadingComponent", "TranslocoModule", "TranslocoDirective", "DefaultValuePipe", "TranslocoLocaleModule", "UtcToLocalTimePipe", "styles", "changeDetection", "_ManageScrobbleErrorsComponent", "CoverImageSize", "CoverImageSizes", "value", "Default", "title", "Medium", "Large", "XLarge", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r2", "\u0275\u0275property", "format_r3", "value", "title", "size_r4", "\u0275\u0275element", "\u0275\u0275template", "ManageMediaSettingsComponent_ng_container_0_form_2_div_12_Template", "ManageMediaSettingsComponent_ng_container_0_form_2_ng_template_17_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "ManageMediaSettingsComponent_ng_container_0_form_2_option_22_Template", "ManageMediaSettingsComponent_ng_container_0_form_2_ng_template_27_Template", "ManageMediaSettingsComponent_ng_container_0_form_2_option_32_Template", "ManageMediaSettingsComponent_ng_container_0_form_2_ng_template_38_Template", "\u0275\u0275listener", "tmp_7_0", "\u0275\u0275restoreView", "_r1", "ctx_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "openDirectoryChooser", "settingsForm", "get", "resetToDefaults", "resetForm", "saveSettings", "\u0275\u0275textInterpolate1", "tmp_11_0", "dirty", "encodeMediaAsTooltip_r6", "EncodeFormats", "coverImageSizeTooltip_r7", "coverImageSizes", "bookmarksDirectoryTooltip_r8", "alertCount", "$event", "_r9", "scrobbleCount", "_r10", "\u0275\u0275elementContainerStart", "ManageMediaSettingsComponent_ng_container_0_form_2_Template", "ManageMediaSettingsComponent_ng_container_0_span_8_Template", "ManageMediaSettingsComponent_ng_container_0_ng_template_11_Template", "ManageMediaSettingsComponent_ng_container_0_span_17_Template", "ManageMediaSettingsComponent_ng_container_0_ng_template_20_Template", "serverSettings", "undefined", "ManageMediaSettingsComponent", "constructor", "settingsService", "toastr", "modalService", "FormGroup", "CoverImageSizes", "map", "o", "newObj", "__spreadValues", "translate", "translocoService", "inject", "TranslocoService", "cdRef", "ChangeDetectorRef", "ngOnInit", "getServerSettings", "pipe", "take", "subscribe", "settings", "addControl", "FormControl", "encodeMediaAs", "Validators", "required", "bookmarksDirectory", "coverImageSize", "markForCheck", "setValue", "markAsPristine", "modelSettings", "Object", "assign", "parseInt", "updateServerSettings", "__async", "success", "err", "console", "error", "resetServerSettings", "existingDirectory", "formControl", "modalRef", "open", "DirectoryPickerComponent", "scrollable", "size", "fullscreen", "componentInstance", "startingFolder", "helpUrl", "closed", "closeResult", "folderPath", "markAsDirty", "\u0275\u0275directiveInject", "SettingsService", "ToastrService", "NgbModal", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageMediaSettingsComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgTemplateOutlet", "NgFor", "NgbAccordionDirective", "NgbAccordionItem", "NgbAccordionHeader", "NgbAccordionButton", "NgbAccordionCollapse", "NgbAccordionBody", "ManageAlertsComponent", "ManageScrobbleErrorsComponent", "TranslocoDirective", "styles", "changeDetection", "_ManageMediaSettingsComponent", "\u0275\u0275text", "\u0275\u0275textInterpolate", "t_r2", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "ManageEmailSettingsComponent_ng_container_0_form_2_div_19_div_1_Template", "\u0275\u0275property", "tmp_11_0", "ctx_r2", "settingsForm", "get", "errors", "pattern", "\u0275\u0275element", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_9_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "autofillGmail", "autofillOutlook", "ManageEmailSettingsComponent_ng_container_0_form_2_div_19_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_26_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_35_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_45_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_64_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_78_Template", "ManageEmailSettingsComponent_ng_container_0_form_2_ng_template_89_Template", "test", "resetToDefaults", "resetForm", "saveSettings", "hostNameTooltip_r4", "\u0275\u0275classProp", "tmp_15_0", "invalid", "touched", "dirty", "senderAddressTooltip_r5", "senderDisplayNameTooltip_r6", "hostTooltip_r7", "usernameTooltip_r8", "sizeLimitTooltip_r9", "customizedTemplatesTooltip_r10", "\u0275\u0275elementContainerStart", "ManageEmailSettingsComponent_ng_container_0_form_2_Template", "serverSettings", "undefined", "ManageEmailSettingsComponent", "constructor", "cdRef", "inject", "ChangeDetectorRef", "settingsService", "SettingsService", "toastr", "ToastrService", "FormGroup", "ngOnInit", "getServerSettings", "pipe", "take", "subscribe", "settings", "addControl", "FormControl", "hostName", "Validators", "smtpConfig", "host", "port", "userName", "enableSsl", "password", "senderAddress", "senderDisplayName", "sizeLimit", "min", "customizedTemplates", "markForCheck", "setValue", "markAsPristine", "markAsDirty", "__async", "modelSettings", "Object", "assign", "emailServiceUrl", "value", "updateServerSettings", "success", "translate", "err", "console", "error", "resetServerSettings", "testEmailServerSettings", "res", "successful", "email", "emailAddress", "errorMessage", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageEmailSettingsComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinValidator", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgTemplateOutlet", "TranslocoModule", "TranslocoDirective", "styles", "changeDetection", "_ManageEmailSettingsComponent", "\u0275\u0275text", "\u0275\u0275textInterpolate", "t_r2", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "ManageSettingsComponent_ng_container_0_form_2_div_14_div_1_Template", "\u0275\u0275property", "tmp_14_0", "ctx_r2", "settingsForm", "get", "errors", "pattern", "ManageSettingsComponent_ng_container_0_form_2_div_27_div_1_Template", "ManageSettingsComponent_ng_container_0_form_2_div_41_div_1_Template", "\u0275\u0275pureFunction1", "_c0", "errors_r4", "max", "\u0275\u0275elementContainerStart", "ManageSettingsComponent_ng_container_0_form_2_ng_container_61_p_1_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_61_p_2_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_61_p_3_Template", "min", "required", "errors_r5", "ManageSettingsComponent_ng_container_0_form_2_ng_container_71_p_1_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_71_p_2_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_71_p_3_Template", "level_r6", "\u0275\u0275pipeBind1", "ManageSettingsComponent_ng_container_0_form_2_ng_container_92_p_1_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_92_p_2_Template", "errors_r7", "ManageSettingsComponent_ng_container_0_form_2_ng_container_102_p_1_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_102_p_2_Template", "errors_r8", "ManageSettingsComponent_ng_container_0_form_2_ng_container_112_p_1_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_112_p_2_Template", "errors_r9", "\u0275\u0275element", "ManageSettingsComponent_ng_container_0_form_2_ng_template_9_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "ManageSettingsComponent_ng_container_0_form_2_div_14_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_19_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetBaseUrl", "ManageSettingsComponent_ng_container_0_form_2_div_27_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_33_Template", "resetIPAddresses", "ManageSettingsComponent_ng_container_0_form_2_div_41_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_46_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_56_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_61_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_66_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_71_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_76_Template", "ManageSettingsComponent_ng_container_0_form_2_option_81_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_87_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_92_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_97_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_102_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_template_107_Template", "ManageSettingsComponent_ng_container_0_form_2_ng_container_112_Template", "resetToDefaults", "resetForm", "saveSettings", "hostNameTooltip_r10", "\u0275\u0275classProp", "tmp_19_0", "invalid", "touched", "dirty", "baseUrlTooltip_r11", "tmp_24_0", "ipAddressesTooltip_r12", "tmp_30_0", "portTooltip_r13", "backupTasksTooltip_r14", "tmp_38_0", "tmp_39_0", "logTasksTooltip_r15", "tmp_43_0", "tmp_44_0", "loggingLevelTooltip_r16", "tmp_48_0", "logLevels", "cacheSizeTooltip_r17", "tmp_53_0", "tmp_54_0", "onDeckProgressDaysTooltip_r18", "tmp_58_0", "tmp_59_0", "onDeckUpdateDaysTooltip_r19", "tmp_63_0", "tmp_64_0", "WikiLink", "DataCollection", "\u0275\u0275sanitizeUrl", "ManageSettingsComponent_ng_container_0_form_2_Template", "serverSettings", "undefined", "ValidIpAddress", "ManageSettingsComponent", "constructor", "translocoService", "inject", "TranslocoService", "cdRef", "ChangeDetectorRef", "settingsService", "SettingsService", "toastr", "ToastrService", "serverService", "ServerService", "FormGroup", "taskFrequencies", "ngOnInit", "getTaskFrequencies", "pipe", "take", "subscribe", "frequencies", "markForCheck", "getLoggingLevels", "levels", "getServerSettings", "settings", "addControl", "FormControl", "cacheDirectory", "Validators", "taskScan", "taskBackup", "taskCleanup", "ipAddresses", "port", "loggingLevel", "allowStatCollection", "enableOpds", "baseUrl", "emailServiceUrl", "totalBackups", "cacheSize", "totalLogs", "enableFolderWatching", "encodeMediaAs", "hostName", "onDeckProgressDays", "onDeckUpdateDays", "getServerInfo", "info", "isDocker", "disable", "setValue", "markAsPristine", "__async", "modelSettings", "value", "bookmarksDirectory", "smtpConfig", "updateServerSettings", "success", "translate", "err", "console", "error", "resetServerSettings", "resetIPAddressesSettings", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ManageSettingsComponent_ng_container_0_Template", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "NumberValueAccessor", "CheckboxControlValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinValidator", "MaxValidator", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgFor", "TitleCasePipe", "TranslocoModule", "TranslocoDirective", "NgTemplateOutlet", "styles", "changeDetection", "_ManageSettingsComponent", "\u0275\u0275elementContainerStart", "\u0275\u0275element", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "t_r3", "\u0275\u0275property", "ctx_r1", "WikiLink", "KavitaPlus", "\u0275\u0275sanitizeUrl", "\u0275\u0275textInterpolate", "KavitaPlusFAQ", "\u0275\u0275template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_0_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_1_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_2_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_3_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_4_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_5_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_6_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_7_Template", "DashboardComponent_ng_container_0_li_7_ng_template_3_ng_container_8_Template", "tab_r4", "fragment", "TabID", "General", "Email", "Media", "Users", "Libraries", "System", "Statistics", "Tasks", "DashboardComponent_ng_container_0_li_7_ng_template_3_Template", "title", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "active", "\u0275\u0275resetView", "DashboardComponent_ng_container_0_li_7_Template", "\u0275\u0275twoWayProperty", "tabs", "nav_r5", "DashboardComponent", "constructor", "cdRef", "inject", "ChangeDetectorRef", "route", "ActivatedRoute", "navService", "NavService", "titleService", "Title", "subscribe", "frag", "tab", "filter", "item", "length", "markForCheck", "ngOnInit", "setTitle", "translate", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "DashboardComponent_ng_container_0_Template", "SideNavCompanionBarComponent", "NgbNav", "NgFor", "NgbNavItem", "NgbNavItemRole", "NgbNavLink", "RouterLink", "NgbNavContent", "NgIf", "ManageSettingsComponent", "ManageEmailSettingsComponent", "ManageMediaSettingsComponent", "ManageUsersComponent", "ManageLibraryComponent", "ManageSystemComponent", "ServerStatsComponent", "ManageTasksSettingsComponent", "LicenseComponent", "NgbNavOutlet", "TranslocoDirective", "styles", "changeDetection", "_DashboardComponent", "routes", "path", "component", "DashboardComponent", "pathMatch", "canActivate", "AdminGuard", "runGuardsAndResolvers", "children"]
}
