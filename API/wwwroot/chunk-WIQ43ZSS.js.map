{
  "version": 3,
  "sources": ["src/app/_services/server.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport {ServerInfoSlim} from '../admin/_models/server-info';\nimport { UpdateVersionEvent } from '../_models/events/update-version-event';\nimport { Job } from '../_models/job/job';\nimport { KavitaMediaError } from '../admin/_models/media-error';\nimport {TextResonse} from \"../_types/text-response\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n\n  baseUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n\n  getServerInfo() {\n    return this.http.get<ServerInfoSlim>(this.baseUrl + 'server/server-info-slim');\n  }\n\n  clearCache() {\n    return this.http.post(this.baseUrl + 'server/clear-cache', {});\n  }\n\n  cleanupWantToRead() {\n    return this.http.post(this.baseUrl + 'server/cleanup-want-to-read', {});\n  }\n\n  backupDatabase() {\n    return this.http.post(this.baseUrl + 'server/backup-db', {});\n  }\n\n  analyzeFiles() {\n    return this.http.post(this.baseUrl + 'server/analyze-files', {});\n  }\n\n  checkForUpdate() {\n    return this.http.get<UpdateVersionEvent | null>(this.baseUrl + 'server/check-update');\n  }\n\n  checkHowOutOfDate() {\n    return this.http.get<string>(this.baseUrl + 'server/checkHowOutOfDate', TextResonse)\n      .pipe(map(r => parseInt(r, 10)));\n  }\n\n  checkForUpdates() {\n    return this.http.get<UpdateVersionEvent>(this.baseUrl + 'server/check-for-updates', {});\n  }\n\n  getChangelog() {\n    return this.http.get<UpdateVersionEvent[]>(this.baseUrl + 'server/changelog', {});\n  }\n\n  getRecurringJobs() {\n    return this.http.get<Job[]>(this.baseUrl + 'server/jobs');\n  }\n\n  convertMedia() {\n    return this.http.post(this.baseUrl + 'server/convert-media', {});\n  }\n\n  bustCache() {\n    return this.http.post(this.baseUrl + 'server/bust-kavitaplus-cache', {});\n  }\n\n  getMediaErrors() {\n    return this.http.get<Array<KavitaMediaError>>(this.baseUrl + 'server/media-errors', {});\n  }\n\n  clearMediaAlerts() {\n    return this.http.post(this.baseUrl + 'server/clear-media-alerts', {});\n  }\n}\n"],
  "mappings": "gFAaA,IAAaA,GAAa,IAAA,CAApB,IAAOA,EAAP,MAAOA,CAAa,CAIxBC,YAAoBC,EAAgB,CAAhB,KAAAA,KAAAA,EAFpB,KAAAC,QAAUC,EAAYC,MAEkB,CAGxCC,eAAa,CACX,OAAO,KAAKJ,KAAKK,IAAoB,KAAKJ,QAAU,yBAAyB,CAC/E,CAEAK,YAAU,CACR,OAAO,KAAKN,KAAKO,KAAK,KAAKN,QAAU,qBAAsB,CAAA,CAAE,CAC/D,CAEAO,mBAAiB,CACf,OAAO,KAAKR,KAAKO,KAAK,KAAKN,QAAU,8BAA+B,CAAA,CAAE,CACxE,CAEAQ,gBAAc,CACZ,OAAO,KAAKT,KAAKO,KAAK,KAAKN,QAAU,mBAAoB,CAAA,CAAE,CAC7D,CAEAS,cAAY,CACV,OAAO,KAAKV,KAAKO,KAAK,KAAKN,QAAU,uBAAwB,CAAA,CAAE,CACjE,CAEAU,gBAAc,CACZ,OAAO,KAAKX,KAAKK,IAA+B,KAAKJ,QAAU,qBAAqB,CACtF,CAEAW,mBAAiB,CACf,OAAO,KAAKZ,KAAKK,IAAY,KAAKJ,QAAU,2BAA4BY,CAAW,EAChFC,KAAKC,EAAIC,GAAKC,SAASD,EAAG,EAAE,CAAC,CAAC,CACnC,CAEAE,iBAAe,CACb,OAAO,KAAKlB,KAAKK,IAAwB,KAAKJ,QAAU,2BAA4B,CAAA,CAAE,CACxF,CAEAkB,cAAY,CACV,OAAO,KAAKnB,KAAKK,IAA0B,KAAKJ,QAAU,mBAAoB,CAAA,CAAE,CAClF,CAEAmB,kBAAgB,CACd,OAAO,KAAKpB,KAAKK,IAAW,KAAKJ,QAAU,aAAa,CAC1D,CAEAoB,cAAY,CACV,OAAO,KAAKrB,KAAKO,KAAK,KAAKN,QAAU,uBAAwB,CAAA,CAAE,CACjE,CAEAqB,WAAS,CACP,OAAO,KAAKtB,KAAKO,KAAK,KAAKN,QAAU,+BAAgC,CAAA,CAAE,CACzE,CAEAsB,gBAAc,CACZ,OAAO,KAAKvB,KAAKK,IAA6B,KAAKJ,QAAU,sBAAuB,CAAA,CAAE,CACxF,CAEAuB,kBAAgB,CACd,OAAO,KAAKxB,KAAKO,KAAK,KAAKN,QAAU,4BAA6B,CAAA,CAAE,CACtE,yCA9DWH,GAAa2B,EAAAC,CAAA,CAAA,CAAA,wBAAb5B,EAAa6B,QAAb7B,EAAa8B,UAAAC,WAFZ,MAAM,CAAA,EAEd,IAAO/B,EAAPgC,SAAOhC,CAAa,GAAA",
  "names": ["ServerService", "constructor", "http", "baseUrl", "environment", "apiUrl", "getServerInfo", "get", "clearCache", "post", "cleanupWantToRead", "backupDatabase", "analyzeFiles", "checkForUpdate", "checkHowOutOfDate", "TextResonse", "pipe", "map", "r", "parseInt", "checkForUpdates", "getChangelog", "getRecurringJobs", "convertMedia", "bustCache", "getMediaErrors", "clearMediaAlerts", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "_ServerService"]
}
