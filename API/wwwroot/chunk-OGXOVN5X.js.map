{
  "version": 3,
  "sources": ["src/app/registration/_components/splash-container/splash-container.component.ts", "src/app/registration/_components/splash-container/splash-container.component.html", "src/app/registration/user-login/user-login.component.ts", "src/app/registration/user-login/user-login.component.html", "src/app/registration/_components/confirm-email-change/confirm-email-change.component.ts", "src/app/registration/_components/confirm-email-change/confirm-email-change.component.html", "src/app/registration/_components/confirm-email/confirm-email.component.ts", "src/app/registration/_components/confirm-email/confirm-email.component.html", "src/app/registration/_components/confirm-migration-email/confirm-migration-email.component.ts", "src/app/registration/_components/confirm-reset-password/confirm-reset-password.component.ts", "src/app/registration/_components/confirm-reset-password/confirm-reset-password.component.html", "src/app/registration/_components/register/register.component.ts", "src/app/registration/_components/register/register.component.html", "src/app/registration/_components/reset-password/reset-password.component.ts", "src/app/registration/_components/reset-password/reset-password.component.html", "src/app/_routes/registration.router.module.ts"],
  "sourcesContent": ["import {ChangeDetectionStrategy, Component, inject} from '@angular/core';\nimport {AsyncPipe, NgStyle} from \"@angular/common\";\nimport {NavService} from \"../../../_services/nav.service\";\n\n@Component({\n  selector: 'app-splash-container',\n  templateUrl: './splash-container.component.html',\n  styleUrls: ['./splash-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [\n    NgStyle,\n    AsyncPipe\n  ],\n  standalone: true\n})\nexport class SplashContainerComponent {\n  protected readonly navService = inject(NavService);\n}\n", "<div class=\"mx-auto login\" [ngStyle]=\"{'height': (navService.navbarVisible$ | async) ? 'calc(var(--vh, 1vh) * 100 - 57px)' : 'calc(var(--vh, 1vh) * 100)'}\">\n\n    <div class=\"row row-cols-4 row-cols-md-4 row-cols-sm-2 row-cols-xs-2\">\n        <div class=\"col align-self-center card p-3\">\n            <span>\n                <div class=\"logo-container\">\n                    <h3 class=\"card-title text-center\">\n                        <ng-content select=\"[title]\"></ng-content>\n                    </h3>\n                </div>\n            </span>\n\n            <div class=\"card-text\">\n                <ng-content select=\"[body]\"></ng-content>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n", "import {AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport {ActivatedRoute, Router, RouterLink} from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrService } from 'ngx-toastr';\nimport { take } from 'rxjs/operators';\nimport { AccountService } from '../../_services/account.service';\nimport { MemberService } from '../../_services/member.service';\nimport { NavService } from '../../_services/nav.service';\nimport { NgIf } from '@angular/common';\nimport { SplashContainerComponent } from '../_components/splash-container/splash-container.component';\nimport {TRANSLOCO_SCOPE, TranslocoDirective} from \"@ngneat/transloco\";\n\n\n@Component({\n    selector: 'app-user-login',\n    templateUrl: './user-login.component.html',\n    styleUrls: ['./user-login.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [SplashContainerComponent, NgIf, ReactiveFormsModule, RouterLink, TranslocoDirective]\n})\nexport class UserLoginComponent implements OnInit {\n\n  loginForm: FormGroup = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.maxLength(32), Validators.minLength(6), Validators.pattern(\"^.{6,32}$\")])\n  });\n\n  /**\n   * If there are no admins on the server, this will enable the registration to kick in.\n   */\n  firstTimeFlow: boolean = true;\n  /**\n   * Used for first time the page loads to ensure no flashing\n   */\n  isLoaded: boolean = false;\n  isSubmitting = false;\n\n  constructor(private accountService: AccountService, private router: Router, private memberService: MemberService,\n    private toastr: ToastrService, private navService: NavService,\n    private readonly cdRef: ChangeDetectorRef, private route: ActivatedRoute) {\n      this.navService.hideNavBar();\n      this.navService.hideSideNav();\n    }\n\n  ngOnInit(): void {\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n      if (user) {\n        this.navService.showNavBar();\n        this.navService.showSideNav();\n        this.router.navigateByUrl('/home');\n        this.cdRef.markForCheck();\n      }\n    });\n\n\n    this.memberService.adminExists().pipe(take(1)).subscribe(adminExists => {\n      this.firstTimeFlow = !adminExists;\n\n      if (this.firstTimeFlow) {\n        this.router.navigateByUrl('registration/register');\n        return;\n      }\n\n      this.isLoaded = true;\n      this.cdRef.markForCheck();\n    });\n\n    this.route.queryParamMap.subscribe(params => {\n      const val = params.get('apiKey');\n      if (val != null && val.length > 0) {\n        this.login(val);\n      }\n    });\n  }\n\n\n\n  login(apiKey: string = '') {\n    const model = this.loginForm.getRawValue();\n    model.apiKey = apiKey;\n    this.isSubmitting = true;\n    this.cdRef.markForCheck();\n    this.accountService.login(model).subscribe(() => {\n      this.loginForm.reset();\n      this.navService.showNavBar();\n      this.navService.showSideNav();\n\n      // Check if user came here from another url, else send to library route\n      const pageResume = localStorage.getItem('kavita--auth-intersection-url');\n      if (pageResume && pageResume !== '/login') {\n        localStorage.setItem('kavita--auth-intersection-url', '');\n        this.router.navigateByUrl(pageResume);\n      } else {\n        localStorage.setItem('kavita--auth-intersection-url', '');\n        this.router.navigateByUrl('/home');\n      }\n      this.isSubmitting = false;\n      this.cdRef.markForCheck();\n    }, err => {\n      this.toastr.error(err.error);\n      this.isSubmitting = false;\n      this.cdRef.markForCheck();\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'login'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <ng-container *ngIf=\"isLoaded\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" novalidate class=\"needs-validation\" *ngIf=\"!firstTimeFlow\">\n          <div class=\"card-text\">\n            <div class=\"mb-3\">\n              <label for=\"username\" class=\"form-label visually-hidden\">{{t('username')}}</label>\n              <input class=\"form-control custom-input\" formControlName=\"username\" id=\"username\" autocomplete=\"username\"\n                     type=\"text\" autofocus [placeholder]=\"t('username')\">\n            </div>\n\n            <div class=\"mb-2\">\n              <label for=\"password\" class=\"form-label visually-hidden\">{{t('password')}}</label>\n              <input class=\"form-control custom-input\" formControlName=\"password\" name=\"password\" autocomplete=\"current-password\"\n                     id=\"password\" type=\"password\" [placeholder]=\"t('password')\">\n            </div>\n\n            <div class=\"mb-3\">\n              <a routerLink=\"/registration/reset-password\" style=\"color: white\">{{t('forgot-password')}}</a>\n            </div>\n\n            <div>\n              <button class=\"btn btn-secondary alt\" type=\"submit\" [disabled]=\"isSubmitting\">{{t('submit')}}</button>\n            </div>\n          </div>\n        </form>\n      </ng-container>\n    </ng-container>\n  </app-splash-container>\n</ng-container>\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { NavService } from 'src/app/_services/nav.service';\nimport { ThemeService } from 'src/app/_services/theme.service';\nimport { NgIf } from '@angular/common';\nimport { SplashContainerComponent } from '../splash-container/splash-container.component';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\n\n/**\n * This component just validates the email via API then redirects to login\n */\n@Component({\n    selector: 'app-confirm-email-change',\n    templateUrl: './confirm-email-change.component.html',\n    styleUrls: ['./confirm-email-change.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [SplashContainerComponent, NgIf, TranslocoDirective]\n})\nexport class ConfirmEmailChangeComponent implements OnInit {\n\n  email: string = '';\n  token: string = '';\n\n  confirmed: boolean = false;\n\n  constructor(private route: ActivatedRoute, private router: Router, private accountService: AccountService,\n    private toastr: ToastrService, private themeService: ThemeService, private navService: NavService,\n    private readonly cdRef: ChangeDetectorRef) {\n      this.navService.hideSideNav();\n      this.themeService.setTheme(this.themeService.defaultTheme);\n      const token = this.route.snapshot.queryParamMap.get('token');\n      const email = this.route.snapshot.queryParamMap.get('email');\n\n      if (this.isNullOrEmpty(token) || this.isNullOrEmpty(email)) {\n        // This is not a valid url, redirect to login\n        this.toastr.error(translate('errors.invalid-confirmation-url'));\n        this.router.navigateByUrl('login');\n        return;\n      }\n\n      this.token = token!;\n      this.email = email!;\n  }\n\n  ngOnInit(): void {\n    this.accountService.confirmEmailUpdate({email: this.email, token: this.token}).subscribe((errors) => {\n      this.confirmed = true;\n      this.cdRef.markForCheck();\n\n      // Once we are confirmed, we need to refresh our user information (in case the user is already authenticated)\n      this.accountService.refreshAccount().subscribe();\n      setTimeout(() => this.router.navigateByUrl('login'), 2000);\n    });\n  }\n\n  isNullOrEmpty(v: string | null | undefined) {\n    return v == undefined || v === '' || v === null;\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'confirm-email-change'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <p *ngIf=\"!confirmed; else confirmedMessage\">{{t('non-confirm-description')}}</p>\n\n      <ng-template #confirmedMessage>\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <div class=\"card-title\">\n              <h3><i class=\"fa-regular fa-circle-check me-2\" style=\"font-size: 1.8rem\" aria-hidden=\"true\"></i>{{t('success')}}</h3>\n            </div>\n            <p>{{t('confirm-description')}}</p>\n          </div>\n        </div>\n      </ng-template>\n    </ng-container>\n  </app-splash-container>\n</ng-container>\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy} from '@angular/core';\nimport { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ThemeService } from 'src/app/_services/theme.service';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { NavService } from 'src/app/_services/nav.service';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { NgIf, NgFor, NgTemplateOutlet } from '@angular/common';\nimport { SplashContainerComponent } from '../splash-container/splash-container.component';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {take} from \"rxjs/operators\";\n\n@Component({\n    selector: 'app-confirm-email',\n    templateUrl: './confirm-email.component.html',\n    styleUrls: ['./confirm-email.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [SplashContainerComponent, NgIf, NgFor, ReactiveFormsModule, NgbTooltip, NgTemplateOutlet, TranslocoDirective]\n})\nexport class ConfirmEmailComponent implements OnDestroy {\n  /**\n   * Email token used for validating\n   */\n  token: string = '';\n\n  registerForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    username: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required, Validators.maxLength(32), Validators.minLength(6), Validators.pattern(\"^.{6,32}$\")]),\n  });\n\n  /**\n   * Validation errors from API\n   */\n  errors: Array<string> = [];\n\n\n  constructor(private route: ActivatedRoute, private router: Router, private accountService: AccountService,\n    private toastr: ToastrService, private themeService: ThemeService, private navService: NavService,\n    private readonly cdRef: ChangeDetectorRef) {\n      this.navService.hideSideNav();\n      this.themeService.setTheme(this.themeService.defaultTheme);\n      const token = this.route.snapshot.queryParamMap.get('token');\n      const email = this.route.snapshot.queryParamMap.get('email');\n      this.cdRef.markForCheck();\n      if (this.isNullOrEmpty(token) || this.isNullOrEmpty(email)) {\n        // This is not a valid url, redirect to login\n        this.toastr.error(translate('errors.invalid-confirmation-url'));\n        this.router.navigateByUrl('login');\n        return;\n      }\n      this.token = token!;\n      this.registerForm.get('email')?.setValue(email || '');\n      this.cdRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n      if (user) {\n        this.navService.showSideNav();\n      }\n    });\n  }\n\n  isNullOrEmpty(v: string | null | undefined) {\n    return v == undefined || v === '' || v === null;\n  }\n\n  submit() {\n    const model = this.registerForm.getRawValue();\n    model.token = this.token;\n    this.accountService.confirmEmail(model).subscribe((user) => {\n      this.toastr.success(translate('toasts.account-registration-complete'));\n      this.router.navigateByUrl('login');\n    }, err => {\n      console.error('Error from Confirming Email: ', err);\n      this.errors = err;\n      this.cdRef.markForCheck();\n    });\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'confirm-email'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <p>{{t('description')}}</p>\n      <div class=\"text-danger\" *ngIf=\"errors.length > 0\">\n        <p>{{t('error-label')}}</p>\n        <ul>\n          <li *ngFor=\"let error of errors\">{{error}}</li>\n        </ul>\n      </div>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\n        <div class=\"mb-3\">\n          <label for=\"username\" class=\"form-label\">{{t('username-label')}}</label>\n          <input id=\"username\" class=\"form-control\" formControlName=\"username\" type=\"text\"\n                 aria-describeby=\"inviteForm-username-validations\"\n                 [class.is-invalid]=\"registerForm.get('username')?.invalid && registerForm.get('username')?.touched\">\n          <div id=\"inviteForm-username-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('username')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"mb-3\" style=\"width:100%\">\n          <label for=\"email\" class=\"form-label\">{{t('email-label')}}</label>\n          <input class=\"form-control\" type=\"email\" inputmode=\"email\" id=\"email\" formControlName=\"email\" required readonly\n                 [class.is-invalid]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\n          <div id=\"inviteForm-email-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('email')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('email')?.errors?.email\">\n              {{t('valid-email')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label for=\"password\" class=\"form-label\">{{t('password-label')}}</label>&nbsp;<i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"passwordTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #passwordTooltip>\n            {{t('password-validation')}}\n          </ng-template>\n          <span class=\"visually-hidden\" id=\"password-help\"><ng-container [ngTemplateOutlet]=\"passwordTooltip\"></ng-container></span>\n          <input id=\"password\" class=\"form-control\" maxlength=\"32\" minlength=\"6\" pattern=\"^.{6,32}$\" formControlName=\"password\" type=\"password\" aria-describedby=\"password-help\">\n          <div id=\"inviteForm-password-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('password')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('password')?.errors?.minlength || registerForm.get('password')?.errors?.maxLength || registerForm.get('password')?.errors?.pattern\">\n              {{t('password-validation')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"float-end\">\n          <button class=\"btn btn-secondary alt\" type=\"submit\">{{t('register')}}</button>\n        </div>\n      </form>\n    </ng-container>\n  </app-splash-container>\n</ng-container>\n", "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ThemeService } from 'src/app/_services/theme.service';\nimport { AccountService } from 'src/app/_services/account.service';\nimport {translate} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-confirm-migration-email',\n    templateUrl: './confirm-migration-email.component.html',\n    styleUrls: ['./confirm-migration-email.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true\n})\nexport class ConfirmMigrationEmailComponent {\n\n  constructor(private route: ActivatedRoute, private router: Router,\n    private accountService: AccountService, private toastr: ToastrService,\n    private themeService: ThemeService) {\n\n    this.themeService.setTheme(this.themeService.defaultTheme);\n    const token = this.route.snapshot.queryParamMap.get('token');\n    const email = this.route.snapshot.queryParamMap.get('email');\n\n    if (token === undefined || token === '' || token === null || email === undefined || email === '' || email === null) {\n      // This is not a valid url, redirect to login\n      this.toastr.error(translate('errors.invalid-confirmation-email'));\n      this.router.navigateByUrl('login');\n      return;\n    }\n    this.accountService.confirmMigrationEmail({token: token, email}).subscribe((user) => {\n      this.toastr.success(translate('toasts.account-migration-complete'));\n      this.router.navigateByUrl('login');\n    });\n\n  }\n}\n", "import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { NavService } from 'src/app/_services/nav.service';\nimport { NgTemplateOutlet, NgIf } from '@angular/common';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { SplashContainerComponent } from '../splash-container/splash-container.component';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-confirm-reset-password',\n    templateUrl: './confirm-reset-password.component.html',\n    styleUrls: ['./confirm-reset-password.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SplashContainerComponent, ReactiveFormsModule, NgbTooltip, NgTemplateOutlet, NgIf, TranslocoDirective]\n})\nexport class ConfirmResetPasswordComponent {\n\n  token: string = '';\n  registerForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.maxLength(32), Validators.minLength(6)]),\n  });\n\n  constructor(private route: ActivatedRoute, private router: Router,\n    private accountService: AccountService, private toastr: ToastrService,\n    private readonly cdRef: ChangeDetectorRef, private navService: NavService) {\n\n      this.navService.showNavBar();\n      this.navService.hideSideNav();\n\n\n    const token = this.route.snapshot.queryParamMap.get('token');\n    const email = this.route.snapshot.queryParamMap.get('email');\n    if (token == undefined || token === '' || token === null) {\n      // This is not a valid url, redirect to login\n      this.toastr.error(translate('errors.invalid-password-reset-url'));\n      this.router.navigateByUrl('login');\n      return;\n    }\n\n    this.token = token;\n    this.registerForm.get('email')?.setValue(email);\n    this.cdRef.markForCheck();\n  }\n\n\n  submit() {\n    const model = this.registerForm.getRawValue();\n    model.token = this.token;\n    this.accountService.confirmResetPasswordEmail(model).subscribe((response: string) => {\n      this.toastr.success(translate('toasts.password-reset'));\n      this.router.navigateByUrl('login');\n    }, err => {\n      console.error(err, 'There was an error trying to confirm reset password');\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'confirm-reset-password'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <p>{{t('description')}}</p>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\n        <div class=\"mb-3\">\n          <label for=\"password\" class=\"form-label\">{{t('password-label')}}</label>&nbsp;<i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"passwordTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #passwordTooltip>\n            {{t('password-validation')}}\n          </ng-template>\n          <span class=\"visually-hidden\" id=\"password-help\"><ng-container [ngTemplateOutlet]=\"passwordTooltip\"></ng-container></span>\n          <input id=\"password\" class=\"form-control\" maxlength=\"32\" minlength=\"6\" formControlName=\"password\" type=\"password\" aria-describedby=\"password-help\">\n          <div id=\"inviteForm-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('password')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('password')?.errors?.minlength || registerForm.get('password')?.errors?.maxLength\">\n              {{t('password-validation')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"float-end\">\n          <button class=\"btn btn-secondary alt\" type=\"submit\">{{t('submit')}}</button>\n        </div>\n      </form>\n    </ng-container>\n  </app-splash-container>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, Component, inject} from '@angular/core';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { take } from 'rxjs/operators';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { MemberService } from 'src/app/_services/member.service';\nimport { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { NgIf, NgTemplateOutlet } from '@angular/common';\nimport { SplashContainerComponent } from '../splash-container/splash-container.component';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {NavService} from \"../../../_services/nav.service\";\n\n/**\n * This is exclusively used to register the first user on the server and nothing else\n */\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [SplashContainerComponent, ReactiveFormsModule, NgIf, NgbTooltip, NgTemplateOutlet, TranslocoDirective]\n})\nexport class RegisterComponent {\n\n  registerForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required]),\n    username: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required, Validators.maxLength(32), Validators.minLength(6), Validators.pattern(\"^.{6,32}$\")]),\n  });\n\n  private readonly navService = inject(NavService);\n\n  constructor(private router: Router, private accountService: AccountService,\n    private toastr: ToastrService, private memberService: MemberService) {\n\n    this.navService.hideNavBar();\n    this.navService.hideSideNav();\n\n      this.memberService.adminExists().pipe(take(1)).subscribe(adminExists => {\n      if (adminExists) {\n        this.router.navigateByUrl('login');\n        return;\n      }\n    });\n  }\n\n  submit() {\n    const model = this.registerForm.getRawValue();\n    this.accountService.register(model).subscribe((user) => {\n      this.toastr.success(translate('toasts.account-registration-complete'));\n      this.router.navigateByUrl('login');\n    });\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'register'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <p>{{t('description')}}</p>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\n        <div class=\"mb-3\">\n          <label for=\"username\" class=\"form-label\">{{t('username-label')}}</label>\n          <input id=\"username\" class=\"form-control\" formControlName=\"username\" type=\"text\" autocomplete=\"username\"\n                 [class.is-invalid]=\"registerForm.get('username')?.invalid && registerForm.get('username')?.touched\" aria-describedby=\"username-validations\">\n          <div id=\"username-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('username')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"mb-3\" style=\"width:100%\">\n          <label for=\"email\" class=\"form-label\">{{t('email-label')}}</label>&nbsp;<i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"emailTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #emailTooltip>{{t('email-tooltip')}}</ng-template>\n          <span class=\"visually-hidden\" id=\"email-help\">\n            <ng-container [ngTemplateOutlet]=\"emailTooltip\"></ng-container>\n          </span>\n          <input class=\"form-control\" type=\"email\" inputmode=\"email\" id=\"email\" autocomplete=\"email\" formControlName=\"email\" required aria-describedby=\"email-help\"\n                 [class.is-invalid]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\n          <div id=\"email-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('email')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('email')?.errors?.email\">\n              {{t('valid-email')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label for=\"password\" class=\"form-label\">Password</label>&nbsp;<i class=\"fa fa-info-circle\" placement=\"right\" [ngbTooltip]=\"passwordTooltip\" role=\"button\" tabindex=\"0\"></i>\n          <ng-template #passwordTooltip>\n            {{t('password-validation')}}\n          </ng-template>\n          <span class=\"visually-hidden\" id=\"password-help\"><ng-container [ngTemplateOutlet]=\"passwordTooltip\"></ng-container></span>\n          <input id=\"password\" class=\"form-control\" maxlength=\"32\" minlength=\"6\" pattern=\"^.{6,32}$\" formControlName=\"password\" autocomplete=\"new-password\"\n                 type=\"password\" aria-describedby=\"password-help\" [class.is-invalid]=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">\n          <div id=\"password-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('password')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('password')?.errors?.minlength || registerForm.get('password')?.errors?.maxLength || registerForm.get('password')?.errors?.pattern\">\n              {{t('password-validation')}}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"float-end\">\n          <button class=\"btn btn-secondary alt\" type=\"submit\" [disabled]=\"!registerForm.valid\">{{t('register')}}</button>\n        </div>\n      </form>\n    </ng-container>\n  </app-splash-container>\n\n</ng-container>\n", "import {ChangeDetectionStrategy, Component, inject} from '@angular/core';\nimport { Validators, FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { NgIf } from '@angular/common';\nimport { SplashContainerComponent } from '../splash-container/splash-container.component';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\nimport {NavService} from \"../../../_services/nav.service\";\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SplashContainerComponent, ReactiveFormsModule, NgIf, TranslocoDirective]\n})\nexport class ResetPasswordComponent {\n\n  private readonly router = inject(Router);\n  private readonly accountService = inject(AccountService);\n  private readonly toastr = inject(ToastrService);\n  private readonly navService = inject(NavService);\n\n  registerForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n  });\n\n  constructor() {\n    this.navService.hideNavBar();\n    this.navService.hideSideNav();\n  }\n\n  submit() {\n    const model = this.registerForm.get('email')?.value;\n    this.accountService.requestResetPasswordEmail(model).subscribe((resp: string) => {\n      this.toastr.info(resp);\n      this.router.navigateByUrl('login');\n    }, err => {\n      this.toastr.error(err.error);\n    });\n  }\n\n}\n", "<ng-container *transloco=\"let t; read:'reset-password'\">\n  <app-splash-container>\n    <ng-container title><h2>{{t('title')}}</h2></ng-container>\n    <ng-container body>\n      <p>{{t('description')}}</p>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\n        <div class=\"mb-3\" style=\"width:100%\">\n          <label for=\"email\" class=\"form-label\">Email</label>\n          <input class=\"form-control custom-input\" type=\"email\" inputmode=\"email\" id=\"email\" formControlName=\"email\" [class.is-invalid]=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\n          <div id=\"inviteForm-validations\" class=\"invalid-feedback\" *ngIf=\"registerForm.dirty || registerForm.touched\">\n            <div *ngIf=\"registerForm.get('email')?.errors?.required\">\n              {{t('required-field')}}\n            </div>\n            <div *ngIf=\"registerForm.get('email')?.errors?.email\">\n              {{t('valid-email')}}\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <button class=\"btn btn-secondary alt\" type=\"submit\">{{t('submit')}}</button>\n        </div>\n      </form>\n    </ng-container>\n  </app-splash-container>\n\n</ng-container>\n", "import { Routes } from '@angular/router';\nimport { UserLoginComponent } from '../registration/user-login/user-login.component';\nimport { ConfirmEmailChangeComponent } from '../registration/_components/confirm-email-change/confirm-email-change.component';\nimport { ConfirmEmailComponent } from '../registration/_components/confirm-email/confirm-email.component';\nimport { ConfirmMigrationEmailComponent } from '../registration/_components/confirm-migration-email/confirm-migration-email.component';\nimport { ConfirmResetPasswordComponent } from '../registration/_components/confirm-reset-password/confirm-reset-password.component';\nimport { RegisterComponent } from '../registration/_components/register/register.component';\nimport { ResetPasswordComponent } from '../registration/_components/reset-password/reset-password.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: UserLoginComponent\n  },\n  {\n    path: 'login',\n    component: UserLoginComponent\n  },\n  {\n      path: 'confirm-email',\n      component: ConfirmEmailComponent,\n  },\n  {\n      path: 'confirm-migration-email',\n      component: ConfirmMigrationEmailComponent,\n  },\n  {\n      path: 'confirm-email-update',\n      component: ConfirmEmailChangeComponent,\n  },\n  {\n    path: 'register',\n    component: RegisterComponent,\n  },\n  {\n    path: 'reset-password',\n    component: ResetPasswordComponent\n  },\n  {\n    path: 'confirm-reset-password',\n    component: ConfirmResetPasswordComponent\n  }\n];\n"],
  "mappings": "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",
  "names": ["SplashContainerComponent", "constructor", "navService", "inject", "NavService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "ngContentSelectors", "_c1", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275projection", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c2", "\u0275\u0275pipeBind1", "navbarVisible$", "NgStyle", "AsyncPipe", "styles", "changeDetection", "_SplashContainerComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "login", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "\u0275\u0275property", "loginForm", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r3", "isSubmitting", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "UserLoginComponent_ng_container_0_ng_container_6_form_1_Template", "firstTimeFlow", "UserLoginComponent_ng_container_0_ng_container_6_Template", "isLoaded", "UserLoginComponent", "constructor", "accountService", "router", "memberService", "toastr", "navService", "cdRef", "route", "FormGroup", "username", "FormControl", "Validators", "required", "password", "maxLength", "minLength", "pattern", "hideNavBar", "hideSideNav", "ngOnInit", "currentUser$", "pipe", "take", "subscribe", "user", "showNavBar", "showSideNav", "navigateByUrl", "markForCheck", "adminExists", "queryParamMap", "params", "val", "get", "length", "apiKey", "model", "getRawValue", "reset", "pageResume", "localStorage", "getItem", "setItem", "err", "error", "\u0275\u0275directiveInject", "AccountService", "Router", "MemberService", "ToastrService", "NavService", "ChangeDetectorRef", "ActivatedRoute", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "UserLoginComponent_ng_container_0_Template", "SplashContainerComponent", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "RouterLink", "TranslocoDirective", "styles", "changeDetection", "_UserLoginComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r1", "\u0275\u0275element", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ConfirmEmailChangeComponent_ng_container_0_p_6_Template", "ConfirmEmailChangeComponent_ng_container_0_ng_template_7_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275property", "ctx_r2", "confirmed", "confirmedMessage_r2", "ConfirmEmailChangeComponent", "constructor", "route", "router", "accountService", "toastr", "themeService", "navService", "cdRef", "email", "token", "hideSideNav", "setTheme", "defaultTheme", "snapshot", "queryParamMap", "get", "isNullOrEmpty", "error", "translate", "navigateByUrl", "ngOnInit", "confirmEmailUpdate", "subscribe", "errors", "markForCheck", "refreshAccount", "setTimeout", "v", "undefined", "\u0275\u0275directiveInject", "ActivatedRoute", "Router", "AccountService", "ToastrService", "ThemeService", "NavService", "ChangeDetectorRef", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConfirmEmailChangeComponent_ng_container_0_Template", "SplashContainerComponent", "NgIf", "TranslocoDirective", "styles", "changeDetection", "_ConfirmEmailChangeComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "error_r2", "\u0275\u0275template", "ConfirmEmailComponent_ng_container_0_div_8_li_4_Template", "t_r3", "\u0275\u0275property", "ctx_r3", "errors", "\u0275\u0275textInterpolate1", "ConfirmEmailComponent_ng_container_0_div_14_div_1_Template", "tmp_4_0", "registerForm", "get", "required", "ConfirmEmailComponent_ng_container_0_div_19_div_1_Template", "ConfirmEmailComponent_ng_container_0_div_19_div_2_Template", "tmp_5_0", "email", "ConfirmEmailComponent_ng_container_0_div_30_div_1_Template", "ConfirmEmailComponent_ng_container_0_div_30_div_2_Template", "minlength", "maxLength", "pattern", "\u0275\u0275elementContainerStart", "ConfirmEmailComponent_ng_container_0_div_8_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submit", "\u0275\u0275element", "ConfirmEmailComponent_ng_container_0_div_14_Template", "ConfirmEmailComponent_ng_container_0_div_19_Template", "ConfirmEmailComponent_ng_container_0_ng_template_25_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "ConfirmEmailComponent_ng_container_0_div_30_Template", "length", "\u0275\u0275classProp", "tmp_8_0", "invalid", "touched", "dirty", "tmp_11_0", "passwordTooltip_r5", "ConfirmEmailComponent", "constructor", "route", "router", "accountService", "toastr", "themeService", "navService", "cdRef", "token", "FormGroup", "FormControl", "Validators", "username", "password", "minLength", "hideSideNav", "setTheme", "defaultTheme", "snapshot", "queryParamMap", "markForCheck", "isNullOrEmpty", "error", "translate", "navigateByUrl", "setValue", "ngOnDestroy", "currentUser$", "pipe", "take", "subscribe", "user", "showSideNav", "v", "undefined", "model", "getRawValue", "confirmEmail", "success", "err", "console", "\u0275\u0275directiveInject", "ActivatedRoute", "Router", "AccountService", "ToastrService", "ThemeService", "NavService", "ChangeDetectorRef", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConfirmEmailComponent_ng_container_0_Template", "SplashContainerComponent", "NgIf", "NgFor", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MinLengthValidator", "MaxLengthValidator", "PatternValidator", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgTemplateOutlet", "TranslocoDirective", "styles", "changeDetection", "_ConfirmEmailComponent", "ConfirmMigrationEmailComponent", "constructor", "route", "router", "accountService", "toastr", "themeService", "setTheme", "defaultTheme", "token", "snapshot", "queryParamMap", "get", "email", "undefined", "error", "translate", "navigateByUrl", "confirmMigrationEmail", "subscribe", "user", "success", "\u0275\u0275directiveInject", "ActivatedRoute", "Router", "AccountService", "ToastrService", "ThemeService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "template", "rf", "ctx", "styles", "changeDetection", "_ConfirmMigrationEmailComponent", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "t_r3", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275template", "ConfirmResetPasswordComponent_ng_container_0_div_19_div_1_Template", "ConfirmResetPasswordComponent_ng_container_0_div_19_div_2_Template", "\u0275\u0275property", "tmp_4_0", "ctx_r1", "registerForm", "get", "errors", "required", "tmp_5_0", "minlength", "maxLength", "\u0275\u0275elementContainerStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submit", "\u0275\u0275element", "ConfirmResetPasswordComponent_ng_container_0_ng_template_14_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "ConfirmResetPasswordComponent_ng_container_0_div_19_Template", "\u0275\u0275textInterpolate", "passwordTooltip_r4", "dirty", "touched", "ConfirmResetPasswordComponent", "constructor", "route", "router", "accountService", "toastr", "cdRef", "navService", "token", "FormGroup", "email", "FormControl", "Validators", "password", "minLength", "showNavBar", "hideSideNav", "snapshot", "queryParamMap", "undefined", "error", "translate", "navigateByUrl", "setValue", "markForCheck", "model", "getRawValue", "confirmResetPasswordEmail", "subscribe", "response", "success", "err", "console", "\u0275\u0275directiveInject", "ActivatedRoute", "Router", "AccountService", "ToastrService", "ChangeDetectorRef", "NavService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ConfirmResetPasswordComponent_ng_container_0_Template", "SplashContainerComponent", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "MinLengthValidator", "MaxLengthValidator", "FormGroupDirective", "FormControlName", "NgbTooltip", "NgTemplateOutlet", "NgIf", "TranslocoDirective", "styles", "changeDetection", "_ConfirmResetPasswordComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "t_r3", "\u0275\u0275template", "RegisterComponent_ng_container_0_div_13_div_1_Template", "\u0275\u0275property", "tmp_5_0", "ctx_r1", "registerForm", "get", "errors", "required", "\u0275\u0275textInterpolate", "RegisterComponent_ng_container_0_div_24_div_1_Template", "RegisterComponent_ng_container_0_div_24_div_2_Template", "tmp_6_0", "email", "RegisterComponent_ng_container_0_div_35_div_1_Template", "RegisterComponent_ng_container_0_div_35_div_2_Template", "minlength", "maxLength", "pattern", "\u0275\u0275elementContainerStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submit", "\u0275\u0275element", "RegisterComponent_ng_container_0_div_13_Template", "RegisterComponent_ng_container_0_ng_template_19_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275elementContainer", "RegisterComponent_ng_container_0_div_24_Template", "RegisterComponent_ng_container_0_ng_template_30_Template", "RegisterComponent_ng_container_0_div_35_Template", "\u0275\u0275classProp", "tmp_8_0", "invalid", "touched", "dirty", "emailTooltip_r4", "tmp_13_0", "passwordTooltip_r5", "tmp_17_0", "valid", "RegisterComponent", "constructor", "router", "accountService", "toastr", "memberService", "FormGroup", "FormControl", "Validators", "username", "password", "minLength", "navService", "inject", "NavService", "hideNavBar", "hideSideNav", "adminExists", "pipe", "take", "subscribe", "navigateByUrl", "model", "getRawValue", "register", "user", "success", "translate", "\u0275\u0275directiveInject", "Router", "AccountService", "ToastrService", "MemberService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "RegisterComponent_ng_container_0_Template", "SplashContainerComponent", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "MinLengthValidator", "MaxLengthValidator", "PatternValidator", "FormGroupDirective", "FormControlName", "NgIf", "NgbTooltip", "NgTemplateOutlet", "TranslocoDirective", "styles", "changeDetection", "_RegisterComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "t_r3", "\u0275\u0275template", "ResetPasswordComponent_ng_container_0_div_13_div_1_Template", "ResetPasswordComponent_ng_container_0_div_13_div_2_Template", "\u0275\u0275property", "tmp_3_0", "ctx_r1", "registerForm", "get", "errors", "required", "tmp_4_0", "email", "\u0275\u0275elementContainerStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "submit", "\u0275\u0275element", "ResetPasswordComponent_ng_container_0_div_13_Template", "\u0275\u0275textInterpolate", "\u0275\u0275classProp", "tmp_5_0", "invalid", "touched", "dirty", "ResetPasswordComponent", "constructor", "router", "inject", "Router", "accountService", "AccountService", "toastr", "ToastrService", "navService", "NavService", "FormGroup", "FormControl", "Validators", "hideNavBar", "hideSideNav", "model", "value", "requestResetPasswordEmail", "subscribe", "resp", "info", "navigateByUrl", "err", "error", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ResetPasswordComponent_ng_container_0_Template", "SplashContainerComponent", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "NgIf", "TranslocoDirective", "styles", "changeDetection", "_ResetPasswordComponent", "routes", "path", "component", "UserLoginComponent", "ConfirmEmailComponent", "ConfirmMigrationEmailComponent", "ConfirmEmailChangeComponent", "RegisterComponent", "ResetPasswordComponent", "ConfirmResetPasswordComponent"]
}
