{
  "version": 3,
  "sources": ["src/app/_services/series.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { UtilityService } from '../shared/_services/utility.service';\nimport { Chapter } from '../_models/chapter';\nimport { ChapterMetadata } from '../_models/metadata/chapter-metadata';\nimport { UserCollection } from '../_models/collection-tag';\nimport { PaginatedResult } from '../_models/pagination';\nimport { Series } from '../_models/series';\nimport { RelatedSeries } from '../_models/series-detail/related-series';\nimport { SeriesDetail } from '../_models/series-detail/series-detail';\nimport { SeriesGroup } from '../_models/series-group';\nimport { SeriesMetadata } from '../_models/metadata/series-metadata';\nimport { Volume } from '../_models/volume';\nimport { ImageService } from './image.service';\nimport { TextResonse } from '../_types/text-response';\nimport { SeriesFilterV2 } from '../_models/metadata/v2/series-filter-v2';\nimport {UserReview} from \"../_single-module/review-card/user-review\";\nimport {Rating} from \"../_models/rating\";\nimport {Recommendation} from \"../_models/series-detail/recommendation\";\nimport {ExternalSeriesDetail} from \"../_models/series-detail/external-series-detail\";\nimport {NextExpectedChapter} from \"../_models/series-detail/next-expected-chapter\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SeriesService {\n\n  baseUrl = environment.apiUrl;\n  paginatedResults: PaginatedResult<Series[]> = new PaginatedResult<Series[]>();\n  paginatedSeriesForTagsResults: PaginatedResult<Series[]> = new PaginatedResult<Series[]>();\n\n  constructor(private httpClient: HttpClient, private imageService: ImageService,\n    private utilityService: UtilityService) { }\n\n  getAllSeriesV2(pageNum?: number, itemsPerPage?: number, filter?: SeriesFilterV2) {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n    const data = filter || {};\n\n    return this.httpClient.post<PaginatedResult<Series[]>>(this.baseUrl + 'series/all-v2', data, {observe: 'response', params}).pipe(\n        map((response: any) => {\n          return this.utilityService.createPaginatedResult(response, this.paginatedResults);\n        })\n    );\n  }\n\n  getSeriesForLibraryV2(pageNum?: number, itemsPerPage?: number, filter?: SeriesFilterV2) {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n    const data = filter || {};\n\n    return this.httpClient.post<PaginatedResult<Series[]>>(this.baseUrl + 'series/v2', data, {observe: 'response', params}).pipe(\n      map((response: any) => {\n        return this.utilityService.createPaginatedResult(response, this.paginatedResults);\n      })\n    );\n  }\n\n  getAllSeriesByIds(seriesIds: Array<number>) {\n    return this.httpClient.post<Series[]>(this.baseUrl + 'series/series-by-ids', {seriesIds: seriesIds});\n  }\n\n  getSeries(seriesId: number) {\n    return this.httpClient.get<Series>(this.baseUrl + 'series/' + seriesId);\n  }\n\n  getVolumes(seriesId: number) {\n    return this.httpClient.get<Volume[]>(this.baseUrl + 'series/volumes?seriesId=' + seriesId);\n  }\n\n  getChapter(chapterId: number) {\n    return this.httpClient.get<Chapter>(this.baseUrl + 'series/chapter?chapterId=' + chapterId);\n  }\n\n  getChapterMetadata(chapterId: number) {\n    return this.httpClient.get<ChapterMetadata>(this.baseUrl + 'series/chapter-metadata?chapterId=' + chapterId);\n  }\n\n  delete(seriesId: number) {\n    return this.httpClient.delete<string>(this.baseUrl + 'series/' + seriesId, TextResonse).pipe(map(s => s === \"true\"));\n  }\n\n  deleteMultipleSeries(seriesIds: Array<number>) {\n    return this.httpClient.post<string>(this.baseUrl + 'series/delete-multiple', {seriesIds}, TextResonse).pipe(map(s => s === \"true\"));\n  }\n\n  updateRating(seriesId: number, userRating: number) {\n    return this.httpClient.post(this.baseUrl + 'series/update-rating', {seriesId, userRating});\n  }\n\n  updateSeries(model: any) {\n    return this.httpClient.post(this.baseUrl + 'series/update', model);\n  }\n\n  markRead(seriesId: number) {\n    return this.httpClient.post<void>(this.baseUrl + 'reader/mark-read', {seriesId});\n  }\n\n  markUnread(seriesId: number) {\n    return this.httpClient.post<void>(this.baseUrl + 'reader/mark-unread', {seriesId});\n  }\n\n  getRecentlyAdded(pageNum?: number, itemsPerPage?: number, filter?: SeriesFilterV2) {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n\n    const data = filter || {};\n    return this.httpClient.post<Series[]>(this.baseUrl + 'series/recently-added-v2', data, {observe: 'response', params}).pipe(\n      map(response => {\n        return this.utilityService.createPaginatedResult(response, new PaginatedResult<Series[]>());\n      })\n    );\n  }\n\n  getRecentlyUpdatedSeries() {\n    return this.httpClient.post<SeriesGroup[]>(this.baseUrl + 'series/recently-updated-series', {});\n  }\n\n  getWantToRead(pageNum?: number, itemsPerPage?: number, filter?: SeriesFilterV2): Observable<PaginatedResult<Series[]>> {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n    const data = filter || {};\n\n    return this.httpClient.post<Series[]>(this.baseUrl + 'want-to-read/v2', data, {observe: 'response', params}).pipe(\n      map(response => {\n        return this.utilityService.createPaginatedResult(response, new PaginatedResult<Series[]>());\n    }));\n  }\n\n  isWantToRead(seriesId: number) {\n    return this.httpClient.get<string>(this.baseUrl + 'want-to-read?seriesId=' + seriesId, TextResonse)\n    .pipe(map(val => {\n      return val === 'true';\n    }));\n  }\n\n  getOnDeck(libraryId: number = 0, pageNum?: number, itemsPerPage?: number, filter?: SeriesFilterV2) {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n    const data = filter || {};\n\n    return this.httpClient.post<Series[]>(this.baseUrl + 'series/on-deck?libraryId=' + libraryId, data, {observe: 'response', params}).pipe(\n      map(response => {\n        return this.utilityService.createPaginatedResult(response, new PaginatedResult<Series[]>());\n    }));\n  }\n\n\n  refreshMetadata(series: Series) {\n    return this.httpClient.post(this.baseUrl + 'series/refresh-metadata', {libraryId: series.libraryId, seriesId: series.id});\n  }\n\n  scan(libraryId: number, seriesId: number, force = false) {\n    return this.httpClient.post(this.baseUrl + 'series/scan', {libraryId: libraryId, seriesId: seriesId, forceUpdate: force});\n  }\n\n  analyzeFiles(libraryId: number, seriesId: number) {\n    return this.httpClient.post(this.baseUrl + 'series/analyze', {libraryId: libraryId, seriesId: seriesId});\n  }\n\n  getMetadata(seriesId: number) {\n    return this.httpClient.get<SeriesMetadata>(this.baseUrl + 'series/metadata?seriesId=' + seriesId);\n  }\n\n  updateMetadata(seriesMetadata: SeriesMetadata) {\n    const data = {\n      seriesMetadata,\n    };\n    return this.httpClient.post(this.baseUrl + 'series/metadata', data, TextResonse);\n  }\n\n  getSeriesForTag(collectionTagId: number, pageNum?: number, itemsPerPage?: number) {\n    let params = new HttpParams();\n\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n\n    return this.httpClient.get<PaginatedResult<Series[]>>(this.baseUrl + 'series/series-by-collection?collectionId=' + collectionTagId, {observe: 'response', params}).pipe(\n      map((response: any) => {\n        return this.utilityService.createPaginatedResult(response, this.paginatedSeriesForTagsResults);\n      })\n    );\n  }\n\n  getRelatedForSeries(seriesId: number) {\n    return this.httpClient.get<RelatedSeries>(this.baseUrl + 'series/all-related?seriesId=' + seriesId);\n  }\n\n  getRecommendationsForSeries(seriesId: number) {\n    return this.httpClient.get<Recommendation>(this.baseUrl + 'recommended/recommendations?seriesId=' + seriesId);\n  }\n\n  updateRelationships(seriesId: number, adaptations: Array<number>, characters: Array<number>,\n    contains: Array<number>, others: Array<number>, prequels: Array<number>,\n    sequels: Array<number>, sideStories: Array<number>, spinOffs: Array<number>,\n    alternativeSettings: Array<number>, alternativeVersions: Array<number>,\n    doujinshis: Array<number>, editions: Array<number>, annuals: Array<number>) {\n    return this.httpClient.post(this.baseUrl + 'series/update-related?seriesId=' + seriesId,\n    {seriesId, adaptations, characters, sequels, prequels, contains, others, sideStories, spinOffs,\n     alternativeSettings, alternativeVersions, doujinshis, editions, annuals});\n  }\n\n  getSeriesDetail(seriesId: number) {\n    return this.httpClient.get<SeriesDetail>(this.baseUrl + 'series/series-detail?seriesId=' + seriesId);\n  }\n\n\n\n  deleteReview(seriesId: number) {\n    return this.httpClient.delete(this.baseUrl + 'review?seriesId=' + seriesId);\n  }\n  updateReview(seriesId: number, body: string) {\n    return this.httpClient.post<UserReview>(this.baseUrl + 'review', {\n      seriesId, body\n    });\n  }\n\n  getReviews(seriesId: number) {\n    return this.httpClient.get<Array<UserReview>>(this.baseUrl + 'review?seriesId=' + seriesId);\n  }\n\n  getRatings(seriesId: number) {\n    return this.httpClient.get<Array<Rating>>(this.baseUrl + 'rating?seriesId=' + seriesId);\n  }\n  getOverallRating(seriesId: number) {\n    return this.httpClient.get<Rating>(this.baseUrl + 'rating/overall?seriesId=' + seriesId);\n  }\n\n  removeFromOnDeck(seriesId: number) {\n    return this.httpClient.post(this.baseUrl + 'series/remove-from-on-deck?seriesId=' + seriesId, {});\n  }\n\n  getExternalSeriesDetails(aniListId?: number, malId?: number, seriesId?: number) {\n    return this.httpClient.get<ExternalSeriesDetail>(this.baseUrl + 'series/external-series-detail?aniListId=' + (aniListId || 0) + '&malId=' + (malId || 0) + '&seriesId=' + (seriesId || 0));\n  }\n\n  getNextExpectedChapterDate(seriesId: number) {\n    return this.httpClient.get<NextExpectedChapter>(this.baseUrl + 'series/next-expected?seriesId=' + seriesId);\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["SeriesService", "constructor", "httpClient", "imageService", "utilityService", "baseUrl", "environment", "apiUrl", "paginatedResults", "PaginatedResult", "paginatedSeriesForTagsResults", "getAllSeriesV2", "pageNum", "itemsPerPage", "filter", "params", "HttpParams", "addPaginationIfExists", "data", "post", "observe", "pipe", "map", "response", "createPaginatedResult", "getSeriesForLibraryV2", "getAllSeriesByIds", "seriesIds", "getSeries", "seriesId", "get", "getVolumes", "getChapter", "chapterId", "getChapterMetadata", "delete", "TextResonse", "s", "deleteMultipleSeries", "updateRating", "userRating", "updateSeries", "model", "markRead", "markUnread", "getRecentlyAdded", "getRecentlyUpdatedSeries", "getWantToRead", "isWantToRead", "val", "getOnDeck", "libraryId", "refreshMetadata", "series", "id", "scan", "force", "forceUpdate", "analyzeFiles", "getMetadata", "updateMetadata", "seriesMetadata", "getSeriesForTag", "collectionTagId", "getRelatedForSeries", "getRecommendationsForSeries", "updateRelationships", "adaptations", "characters", "contains", "others", "prequels", "sequels", "sideStories", "spinOffs", "alternativeSettings", "alternativeVersions", "doujinshis", "editions", "annuals", "getSeriesDetail", "deleteReview", "updateReview", "body", "getReviews", "getRatings", "getOverallRating", "removeFromOnDeck", "getExternalSeriesDetails", "aniListId", "malId", "getNextExpectedChapterDate", "\u0275\u0275inject", "HttpClient", "ImageService", "UtilityService", "factory", "\u0275fac", "providedIn", "_SeriesService"]
}
