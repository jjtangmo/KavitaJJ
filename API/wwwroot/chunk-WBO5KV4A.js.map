{
  "version": 3,
  "sources": ["src/app/_services/nav.service.ts"],
  "sourcesContent": ["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { ReplaySubject, take } from 'rxjs';\nimport {HttpClient} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {SideNavStream} from \"../_models/sidenav/sidenav-stream\";\nimport {TextResonse} from \"../_types/text-response\";\nimport {DashboardStream} from \"../_models/dashboard/dashboard-stream\";\nimport {AccountService} from \"./account.service\";\nimport {tap} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavService {\n  public localStorageSideNavKey = 'kavita--sidenav--expanded';\n\n  private navbarVisibleSource = new ReplaySubject<boolean>(1);\n  /**\n   * If the top Nav bar is rendered or not\n   */\n  navbarVisible$ = this.navbarVisibleSource.asObservable();\n\n  private sideNavCollapseSource = new ReplaySubject<boolean>(1);\n  /**\n   * If the Side Nav is in a collapsed state or not.\n   */\n  sideNavCollapsed$ = this.sideNavCollapseSource.asObservable();\n\n  private sideNavVisibilitySource = new ReplaySubject<boolean>(1);\n  /**\n   * If the side nav is rendered or not into the DOM.\n   */\n  sideNavVisibility$ = this.sideNavVisibilitySource.asObservable();\n\n  private renderer: Renderer2;\n  baseUrl = environment.apiUrl;\n\n  constructor(@Inject(DOCUMENT) private document: Document, rendererFactory: RendererFactory2, private httpClient: HttpClient, private accountService: AccountService) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n\n    // To avoid flashing, let's check if we are authenticated before we show\n    this.accountService.currentUser$.pipe(take(1)).subscribe(u => {\n      if (u) {\n        this.showNavBar();\n      }\n    });\n\n    const sideNavState = (localStorage.getItem(this.localStorageSideNavKey) === 'true') || false;\n    this.sideNavCollapseSource.next(sideNavState);\n    this.showSideNav();\n  }\n\n  getSideNavStreams(visibleOnly = true) {\n    return this.httpClient.get<Array<SideNavStream>>(this.baseUrl + 'stream/sidenav?visibleOnly=' + visibleOnly);\n  }\n\n  updateSideNavStreamPosition(streamName: string, sideNavStreamId: number, fromPosition: number, toPosition: number) {\n    return this.httpClient.post(this.baseUrl + 'stream/update-sidenav-position', {streamName, id: sideNavStreamId, fromPosition, toPosition}, TextResonse);\n  }\n\n  updateSideNavStream(stream: SideNavStream) {\n    return this.httpClient.post(this.baseUrl + 'stream/update-sidenav-stream', stream, TextResonse);\n  }\n\n  createSideNavStream(smartFilterId: number) {\n    return this.httpClient.post<SideNavStream>(this.baseUrl + 'stream/add-sidenav-stream?smartFilterId=' + smartFilterId, {});\n  }\n\n  createSideNavStreamFromExternalSource(externalSourceId: number) {\n    return this.httpClient.post<SideNavStream>(this.baseUrl + 'stream/add-sidenav-stream-from-external-source?externalSourceId=' + externalSourceId, {});\n  }\n\n  bulkToggleSideNavStreamVisibility(streamIds: Array<number>, targetVisibility: boolean) {\n    return this.httpClient.post(this.baseUrl + 'stream/bulk-sidenav-stream-visibility', {ids: streamIds, visibility: targetVisibility});\n  }\n\n  /**\n   * Shows the top nav bar. This should be visible on all pages except the reader.\n   */\n  showNavBar() {\n    this.renderer.setStyle(this.document.querySelector('body'), 'margin-top', '56px');\n    this.renderer.setStyle(this.document.querySelector('body'), 'height', 'calc(var(--vh)*100 - 56px)');\n    this.renderer.setStyle(this.document.querySelector('html'), 'height', 'calc(var(--vh)*100 - 56px)');\n    this.navbarVisibleSource.next(true);\n  }\n\n  /**\n   * Hides the top nav bar.\n   */\n  hideNavBar() {\n    this.renderer.setStyle(this.document.querySelector('body'), 'margin-top', '0px');\n    this.renderer.removeStyle(this.document.querySelector('body'), 'height');\n    this.renderer.removeStyle(this.document.querySelector('html'), 'height');\n    this.navbarVisibleSource.next(false);\n  }\n\n  /**\n   * Shows the side nav. When being visible, the side nav will automatically return to previous collapsed state.\n   */\n  showSideNav() {\n    this.sideNavVisibilitySource.next(true);\n  }\n\n  /**\n   * Hides the side nav. This is useful for the readers and login page.\n   */\n  hideSideNav() {\n    this.sideNavVisibilitySource.next(false);\n  }\n\n  toggleSideNav() {\n    this.sideNavCollapseSource.pipe(take(1)).subscribe(val => {\n      if (val === undefined) val = false;\n      const newVal = !(val || false);\n      this.sideNavCollapseSource.next(newVal);\n      localStorage.setItem(this.localStorageSideNavKey, newVal + '');\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["NavService", "constructor", "document", "rendererFactory", "httpClient", "accountService", "localStorageSideNavKey", "navbarVisibleSource", "ReplaySubject", "navbarVisible$", "asObservable", "sideNavCollapseSource", "sideNavCollapsed$", "sideNavVisibilitySource", "sideNavVisibility$", "baseUrl", "environment", "apiUrl", "renderer", "createRenderer", "currentUser$", "pipe", "take", "subscribe", "u", "showNavBar", "sideNavState", "localStorage", "getItem", "next", "showSideNav", "getSideNavStreams", "visibleOnly", "get", "updateSideNavStreamPosition", "streamName", "sideNavStreamId", "fromPosition", "toPosition", "post", "id", "TextResonse", "updateSideNavStream", "stream", "createSideNavStream", "smartFilterId", "createSideNavStreamFromExternalSource", "externalSourceId", "bulkToggleSideNavStreamVisibility", "streamIds", "targetVisibility", "ids", "visibility", "setStyle", "querySelector", "hideNavBar", "removeStyle", "hideSideNav", "toggleSideNav", "val", "undefined", "newVal", "setItem", "\u0275\u0275inject", "DOCUMENT", "RendererFactory2", "HttpClient", "AccountService", "factory", "\u0275fac", "providedIn", "_NavService"]
}
