{
  "version": 3,
  "sources": ["src/app/_services/scrobbling.service.ts"],
  "sourcesContent": ["import {HttpClient, HttpParams} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { TextResonse } from '../_types/text-response';\nimport {ScrobbleError} from \"../_models/scrobbling/scrobble-error\";\nimport {ScrobbleEvent} from \"../_models/scrobbling/scrobble-event\";\nimport {ScrobbleHold} from \"../_models/scrobbling/scrobble-hold\";\nimport {PaginatedResult} from \"../_models/pagination\";\nimport {ScrobbleEventFilter} from \"../_models/scrobbling/scrobble-event-filter\";\nimport {UtilityService} from \"../shared/_services/utility.service\";\n\nexport enum ScrobbleProvider {\n  Kavita = 0,\n  AniList= 1,\n  Mal = 2,\n  GoogleBooks = 3\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScrobblingService {\n\n  baseUrl = environment.apiUrl;\n\n\n  constructor(private httpClient: HttpClient, private utilityService: UtilityService) {}\n\n  hasTokenExpired(provider: ScrobbleProvider) {\n    return this.httpClient.get<string>(this.baseUrl + 'scrobbling/token-expired?provider=' + provider, TextResonse)\n      .pipe(map(r => r === \"true\"));\n  }\n\n  updateAniListToken(token: string) {\n    return this.httpClient.post(this.baseUrl + 'scrobbling/update-anilist-token', {token});\n  }\n\n  updateMalToken(username: string, accessToken: string) {\n    return this.httpClient.post(this.baseUrl + 'scrobbling/update-mal-token', {username, accessToken});\n  }\n\n  getAniListToken() {\n    return this.httpClient.get<string>(this.baseUrl + 'scrobbling/anilist-token', TextResonse);\n  }\n\n  getMalToken() {\n    return this.httpClient.get<{username: string, accessToken: string}>(this.baseUrl + 'scrobbling/mal-token');\n  }\n\n  getScrobbleErrors() {\n    return this.httpClient.get<Array<ScrobbleError>>(this.baseUrl + 'scrobbling/scrobble-errors');\n  }\n\n  getScrobbleEvents(filter: ScrobbleEventFilter, pageNum: number | undefined = undefined, itemsPerPage: number | undefined = undefined) {\n    let params = new HttpParams();\n    params = this.utilityService.addPaginationIfExists(params, pageNum, itemsPerPage);\n    return this.httpClient.post<PaginatedResult<ScrobbleEvent[]>>(this.baseUrl + 'scrobbling/scrobble-events', filter, {observe: 'response', params}).pipe(\n      map((response: any) => {\n        return this.utilityService.createPaginatedResult(response, new PaginatedResult<ScrobbleEvent[]>());\n      })\n    );\n  }\n\n  clearScrobbleErrors() {\n    return this.httpClient.post(this.baseUrl + 'scrobbling/clear-errors', {});\n  }\n\n  getHolds() {\n    return this.httpClient.get<Array<ScrobbleHold>>(this.baseUrl + 'scrobbling/holds');\n  }\n\n  libraryAllowsScrobbling(seriesId: number) {\n    return this.httpClient.get(this.baseUrl + 'scrobbling/library-allows-scrobbling?seriesId=' + seriesId, TextResonse)\n      .pipe(map(res => res === \"true\"));\n  }\n\n  hasHold(seriesId: number) {\n    return this.httpClient.get(this.baseUrl + 'scrobbling/has-hold?seriesId=' + seriesId, TextResonse)\n      .pipe(map(res => res === \"true\"));\n  }\n\n  addHold(seriesId: number) {\n    return this.httpClient.post(this.baseUrl + 'scrobbling/add-hold?seriesId=' + seriesId, TextResonse);\n  }\n\n  removeHold(seriesId: number) {\n    return this.httpClient.delete(this.baseUrl + 'scrobbling/remove-hold?seriesId=' + seriesId, TextResonse);\n  }\n}\n"],
  "mappings": "uIAYA,IAAYA,EAAZ,SAAYA,EAAgB,CAC1BA,OAAAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SACAA,EAAAA,EAAA,QAAA,CAAA,EAAA,UACAA,EAAAA,EAAA,IAAA,CAAA,EAAA,MACAA,EAAAA,EAAA,YAAA,CAAA,EAAA,cAJUA,CAKZ,EALYA,GAAgB,CAAA,CAAA,EAUfC,GAAiB,IAAA,CAAxB,IAAOA,EAAP,MAAOA,CAAiB,CAK5BC,YAAoBC,EAAgCC,EAA8B,CAA9D,KAAAD,WAAAA,EAAgC,KAAAC,eAAAA,EAHpD,KAAAC,QAAUC,EAAYC,MAG+D,CAErFC,gBAAgBC,EAA0B,CACxC,OAAO,KAAKN,WAAWO,IAAY,KAAKL,QAAU,qCAAuCI,EAAUE,CAAW,EAC3GC,KAAKC,EAAIC,GAAKA,IAAM,MAAM,CAAC,CAChC,CAEAC,mBAAmBC,EAAa,CAC9B,OAAO,KAAKb,WAAWc,KAAK,KAAKZ,QAAU,kCAAmC,CAACW,MAAAA,CAAK,CAAC,CACvF,CAEAE,eAAeC,EAAkBC,EAAmB,CAClD,OAAO,KAAKjB,WAAWc,KAAK,KAAKZ,QAAU,8BAA+B,CAACc,SAAAA,EAAUC,YAAAA,CAAW,CAAC,CACnG,CAEAC,iBAAe,CACb,OAAO,KAAKlB,WAAWO,IAAY,KAAKL,QAAU,2BAA4BM,CAAW,CAC3F,CAEAW,aAAW,CACT,OAAO,KAAKnB,WAAWO,IAA6C,KAAKL,QAAU,sBAAsB,CAC3G,CAEAkB,mBAAiB,CACf,OAAO,KAAKpB,WAAWO,IAA0B,KAAKL,QAAU,4BAA4B,CAC9F,CAEAmB,kBAAkBC,EAA6BC,EAA8BC,OAAWC,EAAmCD,OAAS,CAClI,IAAIE,EAAS,IAAIC,EACjBD,OAAAA,EAAS,KAAKzB,eAAe2B,sBAAsBF,EAAQH,EAASE,CAAY,EACzE,KAAKzB,WAAWc,KAAuC,KAAKZ,QAAU,6BAA8BoB,EAAQ,CAACO,QAAS,WAAYH,OAAAA,CAAM,CAAC,EAAEjB,KAChJC,EAAKoB,GACI,KAAK7B,eAAe8B,sBAAsBD,EAAU,IAAIE,CAAkC,CAClG,CAAC,CAEN,CAEAC,qBAAmB,CACjB,OAAO,KAAKjC,WAAWc,KAAK,KAAKZ,QAAU,0BAA2B,CAAA,CAAE,CAC1E,CAEAgC,UAAQ,CACN,OAAO,KAAKlC,WAAWO,IAAyB,KAAKL,QAAU,kBAAkB,CACnF,CAEAiC,wBAAwBC,EAAgB,CACtC,OAAO,KAAKpC,WAAWO,IAAI,KAAKL,QAAU,iDAAmDkC,EAAU5B,CAAW,EAC/GC,KAAKC,EAAI2B,GAAOA,IAAQ,MAAM,CAAC,CACpC,CAEAC,QAAQF,EAAgB,CACtB,OAAO,KAAKpC,WAAWO,IAAI,KAAKL,QAAU,gCAAkCkC,EAAU5B,CAAW,EAC9FC,KAAKC,EAAI2B,GAAOA,IAAQ,MAAM,CAAC,CACpC,CAEAE,QAAQH,EAAgB,CACtB,OAAO,KAAKpC,WAAWc,KAAK,KAAKZ,QAAU,gCAAkCkC,EAAU5B,CAAW,CACpG,CAEAgC,WAAWJ,EAAgB,CACzB,OAAO,KAAKpC,WAAWyC,OAAO,KAAKvC,QAAU,mCAAqCkC,EAAU5B,CAAW,CACzG,yCAlEWV,GAAiB4C,EAAAC,CAAA,EAAAD,EAAAE,CAAA,CAAA,CAAA,wBAAjB9C,EAAiB+C,QAAjB/C,EAAiBgD,UAAAC,WAFhB,MAAM,CAAA,EAEd,IAAOjD,EAAPkD,SAAOlD,CAAiB,GAAA",
  "names": ["ScrobbleProvider", "ScrobblingService", "constructor", "httpClient", "utilityService", "baseUrl", "environment", "apiUrl", "hasTokenExpired", "provider", "get", "TextResonse", "pipe", "map", "r", "updateAniListToken", "token", "post", "updateMalToken", "username", "accessToken", "getAniListToken", "getMalToken", "getScrobbleErrors", "getScrobbleEvents", "filter", "pageNum", "undefined", "itemsPerPage", "params", "HttpParams", "addPaginationIfExists", "observe", "response", "createPaginatedResult", "PaginatedResult", "clearScrobbleErrors", "getHolds", "libraryAllowsScrobbling", "seriesId", "res", "hasHold", "addHold", "removeHold", "delete", "\u0275\u0275inject", "HttpClient", "UtilityService", "factory", "\u0275fac", "providedIn", "_ScrobblingService"]
}
