{
  "version": 3,
  "sources": ["src/app/all-series/_components/all-series/all-series.component.ts", "src/app/all-series/_components/all-series/all-series.component.html", "src/app/_routes/all-series-routing.module.ts"],
  "sourcesContent": ["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, DestroyRef,\n  EventEmitter,\n  HostListener,\n  inject,\n  OnInit\n} from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { take, debounceTime } from 'rxjs/operators';\nimport { BulkSelectionService } from 'src/app/cards/bulk-selection.service';\nimport { FilterSettings } from 'src/app/metadata-filter/filter-settings';\nimport { FilterUtilitiesService } from 'src/app/shared/_services/filter-utilities.service';\nimport { UtilityService, KEY_CODES } from 'src/app/shared/_services/utility.service';\nimport { JumpKey } from 'src/app/_models/jumpbar/jump-key';\nimport { Pagination } from 'src/app/_models/pagination';\nimport { Series } from 'src/app/_models/series';\nimport { FilterEvent } from 'src/app/_models/metadata/series-filter';\nimport { Action, ActionItem } from 'src/app/_services/action-factory.service';\nimport { ActionService } from 'src/app/_services/action.service';\nimport { JumpbarService } from 'src/app/_services/jumpbar.service';\nimport { MessageHubService, Message, EVENTS } from 'src/app/_services/message-hub.service';\nimport { SeriesService } from 'src/app/_services/series.service';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { SeriesCardComponent } from '../../../cards/series-card/series-card.component';\nimport { CardDetailLayoutComponent } from '../../../cards/card-detail-layout/card-detail-layout.component';\nimport { BulkOperationsComponent } from '../../../cards/bulk-operations/bulk-operations.component';\nimport { NgIf, DecimalPipe } from '@angular/common';\nimport { SideNavCompanionBarComponent } from '../../../sidenav/_components/side-nav-companion-bar/side-nav-companion-bar.component';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {SeriesFilterV2} from \"../../../_models/metadata/v2/series-filter-v2\";\n\n\n\n@Component({\n  selector: 'app-all-series',\n  templateUrl: './all-series.component.html',\n  styleUrls: ['./all-series.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [SideNavCompanionBarComponent, NgIf, BulkOperationsComponent, CardDetailLayoutComponent, SeriesCardComponent, DecimalPipe, TranslocoDirective]\n})\nexport class AllSeriesComponent implements OnInit {\n\n  title: string = translate('side-nav.all-series');\n  series: Series[] = [];\n  loadingSeries = false;\n  pagination: Pagination = new Pagination();\n  filter: SeriesFilterV2 | undefined = undefined;\n  filterSettings: FilterSettings = new FilterSettings();\n  filterOpen: EventEmitter<boolean> = new EventEmitter();\n  filterActiveCheck!: SeriesFilterV2;\n  filterActive: boolean = false;\n  jumpbarKeys: Array<JumpKey> = [];\n  private readonly destroyRef = inject(DestroyRef);\n\n  bulkActionCallback = (action: ActionItem<any>, data: any) => {\n    const selectedSeriesIndexies = this.bulkSelectionService.getSelectedCardsForSource('series');\n    const selectedSeries = this.series.filter((series, index: number) => selectedSeriesIndexies.includes(index + ''));\n\n    switch (action.action) {\n      case Action.AddToReadingList:\n        this.actionService.addMultipleSeriesToReadingList(selectedSeries, (success) => {\n          if (success) this.bulkSelectionService.deselectAll();\n        });\n        break;\n      case Action.AddToWantToReadList:\n        this.actionService.addMultipleSeriesToWantToReadList(selectedSeries.map(s => s.id), () => {\n          this.bulkSelectionService.deselectAll();\n        });\n        break;\n      case Action.RemoveFromWantToReadList:\n        this.actionService.removeMultipleSeriesFromWantToReadList(selectedSeries.map(s => s.id), () => {\n          this.bulkSelectionService.deselectAll();\n        });\n        break;\n      case Action.AddToCollection:\n        this.actionService.addMultipleSeriesToCollectionTag(selectedSeries, (success) => {\n          if (success) this.bulkSelectionService.deselectAll();\n        });\n        break;\n      case Action.MarkAsRead:\n        this.actionService.markMultipleSeriesAsRead(selectedSeries, () => {\n          this.loadPage();\n          this.bulkSelectionService.deselectAll();\n        });\n\n        break;\n      case Action.MarkAsUnread:\n        this.actionService.markMultipleSeriesAsUnread(selectedSeries, () => {\n          this.loadPage();\n          this.bulkSelectionService.deselectAll();\n        });\n        break;\n      case Action.Delete:\n        this.actionService.deleteMultipleSeries(selectedSeries, (successful) => {\n          if (!successful) return;\n          this.loadPage();\n          this.bulkSelectionService.deselectAll();\n        });\n        break;\n    }\n  }\n\n  constructor(private router: Router, private seriesService: SeriesService,\n    private titleService: Title, private actionService: ActionService,\n    public bulkSelectionService: BulkSelectionService, private hubService: MessageHubService,\n    private utilityService: UtilityService, private route: ActivatedRoute,\n    private filterUtilityService: FilterUtilitiesService, private jumpbarService: JumpbarService,\n    private readonly cdRef: ChangeDetectorRef) {\n\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n    this.filterUtilityService.filterPresetsFromUrl(this.route.snapshot).subscribe(filter => {\n      this.filter = filter;\n      this.title = this.route.snapshot.queryParamMap.get('title') || this.filter.name || this.title;\n      this.titleService.setTitle('Kavita - ' + this.title);\n      this.filterActiveCheck = this.filterUtilityService.createSeriesV2Filter();\n      this.filterActiveCheck!.statements.push(this.filterUtilityService.createSeriesV2DefaultStatement());\n      this.filterSettings.presetsV2 =  this.filter;\n\n      this.cdRef.markForCheck();\n    });\n  }\n\n  ngOnInit(): void {\n    this.hubService.messages$.pipe(debounceTime(6000), takeUntilDestroyed(this.destroyRef)).subscribe((event: Message<any>) => {\n      if (event.event !== EVENTS.SeriesAdded) return;\n      this.loadPage();\n    });\n  }\n\n  @HostListener('document:keydown.shift', ['$event'])\n  handleKeypress(event: KeyboardEvent) {\n    if (event.key === KEY_CODES.SHIFT) {\n      this.bulkSelectionService.isShiftDown = true;\n    }\n  }\n\n  @HostListener('document:keyup.shift', ['$event'])\n  handleKeyUp(event: KeyboardEvent) {\n    if (event.key === KEY_CODES.SHIFT) {\n      this.bulkSelectionService.isShiftDown = false;\n    }\n  }\n\n\n  updateFilter(data: FilterEvent) {\n    if (data.filterV2 === undefined) return;\n    this.filter = data.filterV2;\n\n    if (data.isFirst) {\n      this.loadPage();\n      return;\n    }\n\n    this.filterUtilityService.updateUrlFromFilter(this.filter).subscribe((encodedFilter) => {\n      this.loadPage();\n    });\n  }\n\n  loadPage() {\n    this.filterActive = !this.utilityService.deepEqual(this.filter, this.filterActiveCheck);\n    this.loadingSeries = true;\n\n    let filterName = this.route.snapshot.queryParamMap.get('name');\n    filterName = filterName ? filterName.split('ï¿½')[0] : null;\n\n    this.title = this.route.snapshot.queryParamMap.get('title') || filterName || this.filter?.name || translate('all-series.title');\n    this.cdRef.markForCheck();\n    this.seriesService.getAllSeriesV2(undefined, undefined, this.filter!).pipe(take(1)).subscribe(series => {\n      this.series = series.result;\n      this.jumpbarKeys = this.jumpbarService.getJumpKeys(this.series, (s: Series) => s.name);\n      this.pagination = series.pagination;\n      this.loadingSeries = false;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  trackByIdentity = (index: number, item: Series) => `${item.name}_${item.localizedName}_${item.pagesRead}`;\n}\n", "<ng-container *transloco=\"let t; read: 'all-series'\">\n  <app-side-nav-companion-bar [hasFilter]=\"true\" (filterOpen)=\"filterOpen.emit($event)\" [filterActive]=\"filterActive\">\n    <h2 title>\n      {{title}}\n    </h2>\n    <h6 subtitle *ngIf=\"pagination\">{{t('series-count', {num: pagination.totalItems | number})}}</h6>\n  </app-side-nav-companion-bar>\n  <app-bulk-operations [actionCallback]=\"bulkActionCallback\"></app-bulk-operations>\n  <app-card-detail-layout *ngIf=\"filter\"\n    [isLoading]=\"loadingSeries\"\n    [items]=\"series\"\n    [trackByIdentity]=\"trackByIdentity\"\n    [filterSettings]=\"filterSettings\"\n    [filterOpen]=\"filterOpen\"\n    [jumpBarKeys]=\"jumpbarKeys\"\n    (applyFilter)=\"updateFilter($event)\"\n  >\n    <ng-template #cardItem let-item let-position=\"idx\">\n      <app-series-card [data]=\"item\" [libraryId]=\"item.libraryId\" (reload)=\"loadPage()\"\n                       (selection)=\"bulkSelectionService.handleCardSelection('series', position, series.length, $event)\"\n                       [selected]=\"bulkSelectionService.isCardSelected('series', position)\" [allowSelection]=\"true\"></app-series-card>\n    </ng-template>\n  </app-card-detail-layout>\n\n</ng-container>\n", "import { Routes } from \"@angular/router\";\nimport { AllSeriesComponent } from \"../all-series/_components/all-series/all-series.component\";\n\n\nexport const routes: Routes = [\n  {path: '', component: AllSeriesComponent, pathMatch: 'full'},\n];\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r3", "\u0275\u0275pureFunction1", "_c0", "\u0275\u0275pipeBind1", "ctx_r1", "pagination", "totalItems", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r5", "\u0275\u0275nextContext", "\u0275\u0275resetView", "loadPage", "$event", "position_r6", "idx", "bulkSelectionService", "handleCardSelection", "series", "length", "\u0275\u0275property", "item_r7", "libraryId", "isCardSelected", "_r4", "updateFilter", "\u0275\u0275template", "AllSeriesComponent_ng_container_0_app_card_detail_layout_6_ng_template_1_Template", "\u0275\u0275templateRefExtractor", "loadingSeries", "trackByIdentity", "filterSettings", "filterOpen", "jumpbarKeys", "\u0275\u0275elementContainerStart", "_r1", "emit", "AllSeriesComponent_ng_container_0_h6_4_Template", "\u0275\u0275element", "AllSeriesComponent_ng_container_0_app_card_detail_layout_6_Template", "filterActive", "\u0275\u0275textInterpolate1", "title", "bulkActionCallback", "filter", "AllSeriesComponent", "constructor", "router", "seriesService", "titleService", "actionService", "hubService", "utilityService", "route", "filterUtilityService", "jumpbarService", "cdRef", "translate", "Pagination", "undefined", "FilterSettings", "EventEmitter", "destroyRef", "inject", "DestroyRef", "action", "data", "selectedSeriesIndexies", "getSelectedCardsForSource", "selectedSeries", "index", "includes", "Action", "AddToReadingList", "addMultipleSeriesToReadingList", "success", "deselectAll", "AddToWantToReadList", "addMultipleSeriesToWantToReadList", "map", "s", "id", "RemoveFromWantToReadList", "removeMultipleSeriesFromWantToReadList", "AddToCollection", "addMultipleSeriesToCollectionTag", "MarkAsRead", "markMultipleSeriesAsRead", "MarkAsUnread", "markMultipleSeriesAsUnread", "Delete", "deleteMultipleSeries", "successful", "item", "name", "localizedName", "pagesRead", "routeReuseStrategy", "shouldReuseRoute", "filterPresetsFromUrl", "snapshot", "subscribe", "queryParamMap", "get", "setTitle", "filterActiveCheck", "createSeriesV2Filter", "statements", "push", "createSeriesV2DefaultStatement", "presetsV2", "markForCheck", "ngOnInit", "messages$", "pipe", "debounceTime", "takeUntilDestroyed", "event", "EVENTS", "SeriesAdded", "handleKeypress", "key", "KEY_CODES", "SHIFT", "isShiftDown", "handleKeyUp", "filterV2", "isFirst", "updateUrlFromFilter", "encodedFilter", "deepEqual", "filterName", "split", "getAllSeriesV2", "take", "result", "getJumpKeys", "\u0275\u0275directiveInject", "Router", "SeriesService", "Title", "ActionService", "BulkSelectionService", "MessageHubService", "UtilityService", "ActivatedRoute", "FilterUtilitiesService", "JumpbarService", "ChangeDetectorRef", "selectors", "hostBindings", "rf", "ctx", "\u0275\u0275resolveDocument", "AllSeriesComponent_ng_container_0_Template", "SideNavCompanionBarComponent", "NgIf", "BulkOperationsComponent", "CardDetailLayoutComponent", "SeriesCardComponent", "DecimalPipe", "TranslocoDirective", "styles", "changeDetection", "_AllSeriesComponent", "routes", "path", "component", "AllSeriesComponent", "pathMatch"]
}
