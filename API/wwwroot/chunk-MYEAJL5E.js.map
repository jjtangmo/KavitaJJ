{
  "version": 3,
  "sources": ["src/app/user-settings/change-password/change-password.component.ts", "src/app/user-settings/change-password/change-password.component.html"],
  "sourcesContent": ["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  inject,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, Observable, of, shareReplay, take } from 'rxjs';\nimport { User } from 'src/app/_models/user';\nimport { AccountService } from 'src/app/_services/account.service';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { NgbCollapse } from '@ng-bootstrap/ng-bootstrap';\nimport { NgIf, NgFor, AsyncPipe } from '@angular/common';\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-change-password',\n    templateUrl: './change-password.component.html',\n    styleUrls: ['./change-password.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n  imports: [NgIf, NgbCollapse, NgFor, ReactiveFormsModule, AsyncPipe, TranslocoDirective]\n})\nexport class ChangePasswordComponent implements OnInit, OnDestroy {\n\n  passwordChangeForm: FormGroup = new FormGroup({});\n  user: User | undefined = undefined;\n  hasChangePasswordAbility: Observable<boolean> = of(false);\n  observableHandles: Array<any> = [];\n  passwordsMatch = false;\n  resetPasswordErrors: string[] = [];\n  isViewMode: boolean = true;\n  private readonly destroyRef = inject(DestroyRef);\n\n  public get password() { return this.passwordChangeForm.get('password'); }\n  public get confirmPassword() { return this.passwordChangeForm.get('confirmPassword'); }\n\n\n  constructor(private accountService: AccountService, private toastr: ToastrService, private readonly cdRef: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n\n    this.accountService.currentUser$.pipe(takeUntilDestroyed(this.destroyRef), shareReplay()).subscribe(user => {\n      this.user = user;\n      this.cdRef.markForCheck();\n    });\n\n    this.hasChangePasswordAbility = this.accountService.currentUser$.pipe(takeUntilDestroyed(this.destroyRef), shareReplay(), map(user => {\n      return user !== undefined && !this.accountService.hasReadOnlyRole(user) && (this.accountService.hasAdminRole(user) || this.accountService.hasChangePasswordRole(user));\n    }));\n    this.cdRef.markForCheck();\n\n    this.passwordChangeForm.addControl('password', new FormControl('', [Validators.required]));\n    this.passwordChangeForm.addControl('confirmPassword', new FormControl('', [Validators.required]));\n    this.passwordChangeForm.addControl('oldPassword', new FormControl('', [Validators.required]));\n\n    this.observableHandles.push(this.passwordChangeForm.valueChanges.subscribe(() => {\n      const values = this.passwordChangeForm.value;\n      this.passwordsMatch = values.password === values.confirmPassword;\n      this.cdRef.markForCheck();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.observableHandles.forEach(o => o.unsubscribe());\n  }\n\n  resetPasswordForm() {\n    this.passwordChangeForm.get('password')?.setValue('');\n    this.passwordChangeForm.get('confirmPassword')?.setValue('');\n    this.passwordChangeForm.get('oldPassword')?.setValue('');\n    this.resetPasswordErrors = [];\n    this.cdRef.markForCheck();\n  }\n\n  savePasswordForm() {\n    if (this.user === undefined) { return; }\n\n    const model = this.passwordChangeForm.value;\n    this.resetPasswordErrors = [];\n    this.observableHandles.push(this.accountService.resetPassword(this.user?.username, model.confirmPassword, model.oldPassword).subscribe(() => {\n      this.toastr.success(translate('toasts.password-updated'));\n      this.resetPasswordForm();\n      this.isViewMode = true;\n    }, err => {\n      this.resetPasswordErrors = err;\n    }));\n  }\n\n  toggleViewMode() {\n    this.isViewMode = !this.isViewMode;\n    this.resetPasswordForm();\n  }\n}\n", "<ng-container *transloco=\"let t; read:'change-password'\">\n  <div class=\"card mt-2\">\n    <div class=\"card-body\">\n      <div class=\"card-title\">\n        <div class=\"container-fluid row mb-2\">\n          <div class=\"col-10 col-sm-11\"><h4>{{t('password-label')}}</h4></div>\n          <div class=\"col-1 text-end\">\n            <button class=\"btn btn-primary btn-sm\" (click)=\"toggleViewMode()\" [disabled]=\"!(hasChangePasswordAbility | async)\">{{isViewMode ? t('edit') : t('cancel')}}</button>\n          </div>\n        </div>\n      </div>\n\n      <ng-container *ngIf=\"isViewMode\">\n        <div class=\"container-fluid row\">\n          <span class=\"col-12\">***************</span>\n        </div>\n      </ng-container>\n\n      <div #collapse=\"ngbCollapse\" [(ngbCollapse)]=\"isViewMode\">\n        <ng-container>\n          <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"resetPasswordErrors.length > 0\">\n            <div *ngFor=\"let error of resetPasswordErrors\">{{error}}</div>\n          </div>\n          <form [formGroup]=\"passwordChangeForm\">\n            <div class=\"mb-3\">\n              <label for=\"oldpass\" class=\"form-label\">{{t('current-password-label')}}</label>\n              <input class=\"form-control custom-input\" type=\"password\" id=\"oldpass\" formControlName=\"oldPassword\" autocomplete=\"current-password\"\n                     [class.is-invalid]=\"passwordChangeForm.get('oldPassword')?.invalid && passwordChangeForm.get('oldPassword')?.touched\">\n              <div id=\"inviteForm-validations\" class=\"invalid-feedback\" *ngIf=\"passwordChangeForm.dirty || passwordChangeForm.touched\">\n                <div *ngIf=\"passwordChangeForm.get('oldPassword')?.errors?.required\">\n                  {{t('required-field')}}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"mb-3\">\n              <label for=\"new-password\">{{t('new-password-label')}}</label>\n              <input class=\"form-control\" type=\"password\" id=\"new-password\" formControlName=\"password\" aria-describedby=\"new-password-validations\"\n                     autocomplete=\"new-password\"\n                     [class.is-invalid]=\"passwordChangeForm.get('password')?.invalid && passwordChangeForm.get('password')?.touched\">\n              <div id=\"new-password-validations\" class=\"invalid-feedback\" *ngIf=\"passwordChangeForm.dirty || passwordChangeForm.touched\">\n                <div *ngIf=\"password?.errors?.required\">\n                  {{t('required-field')}}\n                </div>\n              </div>\n            </div>\n            <div class=\"mb-3\">\n              <label for=\"confirm-password\">{{t('confirm-password-label')}}</label>\n              <input class=\"form-control\" type=\"password\" id=\"confirm-password\" formControlName=\"confirmPassword\" aria-describedby=\"confirm-password-validations\"\n                     autocomplete=\"new-password\"\n                     [class.is-invalid]=\"passwordChangeForm.get('confirmPassword')?.invalid && passwordChangeForm.get('confirmPassword')?.touched\">\n              <div id=\"confirm-password-validations\" class=\"invalid-feedback\" *ngIf=\"passwordChangeForm.dirty || passwordChangeForm.touched\">\n                <div *ngIf=\"!passwordsMatch\">\n                  {{t('passwords-must-match')}}\n                </div>\n                <div *ngIf=\"confirmPassword?.errors?.required\">\n                  {{t('required-field')}}\n                </div>\n              </div>\n            </div>\n            <div class=\"col-auto d-flex d-md-block justify-content-sm-center text-md-end mb-3\">\n              <button type=\"button\" class=\"flex-fill btn btn-secondary me-2\" aria-describedby=\"password-panel\" (click)=\"resetPasswordForm()\">{{t('reset')}}</button>\n              <button type=\"submit\" class=\"flex-fill btn btn-primary\" aria-describedby=\"password-panel\" (click)=\"savePasswordForm()\" [disabled]=\"!passwordChangeForm.valid || !(passwordChangeForm.dirty || passwordChangeForm.touched)\">{{t('save')}}</button>\n            </div>\n          </form>\n        </ng-container>\n\n        <ng-template #noPermission>\n          <p>{{t('permission-error')}}</p>\n        </ng-template>\n      </div>\n\n    </div>\n  </div>\n</ng-container>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementContainerStart", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "error_r3", "\u0275\u0275template", "ChangePasswordComponent_ng_container_0_div_16_div_1_Template", "\u0275\u0275property", "ctx_r1", "resetPasswordErrors", "\u0275\u0275textInterpolate1", "t_r4", "ChangePasswordComponent_ng_container_0_div_22_div_1_Template", "tmp_5_0", "passwordChangeForm", "get", "errors", "required", "ChangePasswordComponent_ng_container_0_div_27_div_1_Template", "password", "ChangePasswordComponent_ng_container_0_div_32_div_1_Template", "ChangePasswordComponent_ng_container_0_div_32_div_2_Template", "passwordsMatch", "confirmPassword", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleViewMode", "ChangePasswordComponent_ng_container_0_ng_container_12_Template", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "isViewMode", "ChangePasswordComponent_ng_container_0_div_16_Template", "\u0275\u0275element", "ChangePasswordComponent_ng_container_0_div_22_Template", "ChangePasswordComponent_ng_container_0_div_27_Template", "ChangePasswordComponent_ng_container_0_div_32_Template", "resetPasswordForm", "savePasswordForm", "ChangePasswordComponent_ng_container_0_ng_template_38_Template", "\u0275\u0275templateRefExtractor", "\u0275\u0275pipeBind1", "hasChangePasswordAbility", "\u0275\u0275twoWayProperty", "length", "\u0275\u0275classProp", "tmp_12_0", "invalid", "touched", "dirty", "tmp_15_0", "tmp_18_0", "valid", "ChangePasswordComponent", "constructor", "accountService", "toastr", "cdRef", "FormGroup", "user", "undefined", "of", "observableHandles", "destroyRef", "inject", "DestroyRef", "ngOnInit", "currentUser$", "pipe", "takeUntilDestroyed", "shareReplay", "subscribe", "markForCheck", "map", "hasReadOnlyRole", "hasAdminRole", "hasChangePasswordRole", "addControl", "FormControl", "Validators", "push", "valueChanges", "values", "value", "ngOnDestroy", "forEach", "o", "unsubscribe", "setValue", "model", "resetPassword", "username", "oldPassword", "success", "translate", "err", "\u0275\u0275directiveInject", "AccountService", "ToastrService", "ChangeDetectorRef", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ChangePasswordComponent_ng_container_0_Template", "NgIf", "NgbCollapse", "NgFor", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "AsyncPipe", "TranslocoDirective", "styles", "changeDetection", "_ChangePasswordComponent"]
}
