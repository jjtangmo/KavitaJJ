{
  "version": 3,
  "sources": ["src/app/book-reader/_components/table-of-contents/table-of-contents.component.ts", "src/app/book-reader/_components/table-of-contents/table-of-contents.component.html", "src/app/book-reader/_components/book-line-overlay/book-line-overlay.component.ts", "src/app/book-reader/_components/book-line-overlay/book-line-overlay.component.html", "src/app/book-reader/_components/personal-table-of-contents/personal-table-of-contents.component.ts", "src/app/book-reader/_components/personal-table-of-contents/personal-table-of-contents.component.html", "src/app/book-reader/_components/book-reader/book-reader.component.ts", "src/app/book-reader/_components/book-reader/book-reader.component.html", "src/app/_routes/book-reader.router.module.ts"],
  "sourcesContent": ["import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BookChapterItem } from '../../_models/book-chapter-item';\nimport { NgIf, NgFor } from '@angular/common';\nimport {TranslocoDirective} from \"@ngneat/transloco\";\n\n@Component({\n    selector: 'app-table-of-contents',\n    templateUrl: './table-of-contents.component.html',\n    styleUrls: ['./table-of-contents.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n    standalone: true,\n  imports: [NgIf, NgFor, TranslocoDirective]\n})\nexport class TableOfContentsComponent  {\n\n  @Input({required: true}) chapterId!: number;\n  @Input({required: true}) pageNum!: number;\n  @Input({required: true}) currentPageAnchor!: string;\n  @Input() chapters:Array<BookChapterItem> = [];\n\n  @Output() loadChapter: EventEmitter<{pageNum: number, part: string}> = new EventEmitter();\n\n  constructor() {}\n\n  cleanIdSelector(id: string) {\n    const tokens = id.split('/');\n    if (tokens.length > 0) {\n      return tokens[0];\n    }\n    return id;\n  }\n\n  loadChapterPage(pageNum: number, part: string) {\n    this.loadChapter.emit({pageNum, part});\n  }\n}\n", "<ng-container *transloco=\"let t; read: 'table-of-contents'\">\n  <div class=\"table-of-contents\">\n    <div *ngIf=\"chapters.length === 0\">\n      <em>{{t('no-data')}}</em>\n    </div>\n    <div *ngIf=\"chapters.length === 1; else nestedChildren\">\n      <ul>\n        <li *ngFor=\"let chapter of chapters[0].children\">\n          <a href=\"javascript:void(0);\" (click)=\"loadChapterPage(chapter.page, chapter.part)\">{{chapter.title}}</a>\n        </li>\n      </ul>\n    </div>\n    <ng-template #nestedChildren>\n      <ul *ngFor=\"let chapterGroup of chapters\" class=\"chapter-title\">\n        <li class=\"{{chapterGroup.page === pageNum ? 'active': ''}}\" (click)=\"loadChapterPage(chapterGroup.page, '')\">\n          {{chapterGroup.title}}\n        </li>\n        <ul *ngFor=\"let chapter of chapterGroup.children\">\n          <li class=\"{{cleanIdSelector(chapter.part) === currentPageAnchor ? 'active' : ''}}\">\n            <a href=\"javascript:void(0);\" (click)=\"loadChapterPage(chapter.page, chapter.part)\">{{chapter.title}}</a>\n          </li>\n        </ul>\n      </ul>\n    </ng-template>\n  </div>\n</ng-container>\n", "import {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  ElementRef, EventEmitter, HostListener,\n  inject,\n  Input,\n  OnInit, Output,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {fromEvent, merge, of} from \"rxjs\";\nimport {catchError} from \"rxjs/operators\";\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {ReaderService} from \"../../../_services/reader.service\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\nimport {KEY_CODES} from \"../../../shared/_services/utility.service\";\n\nenum BookLineOverlayMode {\n  None = 0,\n  Bookmark = 1\n}\n\n@Component({\n  selector: 'app-book-line-overlay',\n  standalone: true,\n    imports: [CommonModule, ReactiveFormsModule, TranslocoDirective],\n  templateUrl: './book-line-overlay.component.html',\n  styleUrls: ['./book-line-overlay.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookLineOverlayComponent implements OnInit {\n  @Input({required: true}) libraryId!: number;\n  @Input({required: true}) seriesId!: number;\n  @Input({required: true}) volumeId!: number;\n  @Input({required: true}) chapterId!: number;\n  @Input({required: true}) pageNumber: number = 0;\n  @Input({required: true}) parent: ElementRef | undefined;\n  @Output() refreshToC: EventEmitter<void> = new EventEmitter();\n  @Output() isOpen: EventEmitter<boolean> = new EventEmitter(false);\n\n  xPath: string = '';\n  selectedText: string = '';\n  mode: BookLineOverlayMode = BookLineOverlayMode.None;\n  bookmarkForm: FormGroup = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n  });\n\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly readerService = inject(ReaderService);\n\n  get BookLineOverlayMode() { return BookLineOverlayMode; }\n  constructor(private elementRef: ElementRef, private toastr: ToastrService) {}\n\n  @HostListener('window:keydown', ['$event'])\n  handleKeyPress(event: KeyboardEvent) {\n    if (event.key === KEY_CODES.ESC_KEY) {\n      this.reset();\n      this.cdRef.markForCheck();\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n  }\n\n\n  ngOnInit() {\n    if (this.parent) {\n\n      const mouseUp$ = fromEvent<MouseEvent>(this.parent.nativeElement, 'mouseup');\n      const touchEnd$ = fromEvent<TouchEvent>(this.parent.nativeElement, 'touchend');\n\n      merge(mouseUp$, touchEnd$)\n        .pipe(takeUntilDestroyed(this.destroyRef))\n        .subscribe((event: MouseEvent | TouchEvent) => {\n          this.handleEvent(event);\n        });\n    }\n  }\n\n  handleEvent(event: MouseEvent | TouchEvent) {\n    const selection = window.getSelection();\n    if (!event.target) return;\n\n\n\n    if ((selection === null || selection === undefined || selection.toString().trim() === '' || selection.toString().trim() === this.selectedText)) {\n      if (this.selectedText !== '') {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      const isRightClick = (event instanceof MouseEvent && event.button === 2);\n      if (!isRightClick) {\n        this.reset();\n      }\n\n      return;\n    }\n\n    this.selectedText = selection ? selection.toString().trim() : '';\n\n    if (this.selectedText.length > 0 && this.mode === BookLineOverlayMode.None) {\n      this.xPath = this.readerService.getXPathTo(event.target);\n      if (this.xPath !== '') {\n        this.xPath = '//' + this.xPath;\n      }\n\n      this.isOpen.emit(true);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.cdRef.markForCheck();\n  }\n\n  switchMode(mode: BookLineOverlayMode) {\n    this.mode = mode;\n    this.cdRef.markForCheck();\n    if (this.mode === BookLineOverlayMode.Bookmark) {\n      this.bookmarkForm.get('name')?.setValue(this.selectedText);\n      this.focusOnBookmarkInput();\n    }\n  }\n\n  createPTOC() {\n    this.readerService.createPersonalToC(this.libraryId, this.seriesId, this.volumeId, this.chapterId, this.pageNumber,\n      this.bookmarkForm.get('name')?.value, this.xPath).pipe(catchError(err => {\n        this.focusOnBookmarkInput();\n        return of();\n    })).subscribe(() => {\n      this.reset();\n      this.refreshToC.emit();\n      this.cdRef.markForCheck();\n    });\n  }\n\n  focusOnBookmarkInput() {\n    if (this.mode !== BookLineOverlayMode.Bookmark) return;\n    setTimeout(() => this.elementRef.nativeElement.querySelector('#bookmark-name')?.focus(), 10);\n  }\n\n  reset() {\n    this.bookmarkForm.reset();\n    this.mode = BookLineOverlayMode.None;\n    this.xPath = '';\n    this.selectedText = '';\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n    this.isOpen.emit(false);\n    this.cdRef.markForCheck();\n  }\n\n  async copy() {\n    const selection = window.getSelection();\n    if (selection) {\n      await navigator.clipboard.writeText(selection.toString());\n      this.toastr.info(translate('toasts.copied-to-clipboard'));\n    }\n    this.reset();\n  }\n\n\n}\n", "<ng-container *transloco=\"let t; read: 'book-line-overlay'\">\n  <div class=\"overlay\" *ngIf=\"selectedText.length > 0 || mode !== BookLineOverlayMode.None\">\n\n    <div class=\"row g-0 justify-content-between\">\n      <ng-container [ngSwitch]=\"mode\">\n        <ng-container *ngSwitchCase=\"BookLineOverlayMode.None\">\n          <div class=\"col-auto\">\n            <button class=\"btn btn-icon btn-sm\" (click)=\"copy()\">\n              <i class=\"fa-solid fa-copy\" aria-hidden=\"true\"></i>\n              <div>{{t('copy')}}</div>\n            </button>\n          </div>\n          <div class=\"col-auto\">\n            <button class=\"btn btn-icon btn-sm\" (click)=\"switchMode(BookLineOverlayMode.Bookmark)\">\n              <i class=\"fa-solid fa-book-bookmark\" aria-hidden=\"true\"></i>\n              <div>{{t('bookmark')}}</div>\n            </button>\n          </div>\n\n          <div class=\"col-auto\">\n            <button class=\"btn btn-icon btn-sm\" (click)=\"reset()\">\n              <i class=\"fa-solid fa-times-circle\" aria-hidden=\"true\"></i>\n              <div>{{t('close')}}</div>\n            </button>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"BookLineOverlayMode.Bookmark\">\n          <form [formGroup]=\"bookmarkForm\">\n            <div class=\"input-group\">\n              <input id=\"bookmark-name\" class=\"form-control\" formControlName=\"name\" type=\"text\" [placeholder]=\"t('book-label')\"\n                     [class.is-invalid]=\"bookmarkForm.get('name')?.invalid && bookmarkForm.get('name')?.touched\" aria-describedby=\"bookmark-name-btn\">\n              <button class=\"btn btn-outline-primary\" id=\"bookmark-name-btn\" (click)=\"createPTOC()\">{{t('save')}}</button>\n              <div id=\"bookmark-name-validations\" class=\"invalid-feedback\" *ngIf=\"bookmarkForm.dirty || bookmarkForm.touched\">\n                <div *ngIf=\"bookmarkForm.get('name')?.errors?.required\" role=\"status\">\n                  {{t('required-field')}}\n                </div>\n              </div>\n            </div>\n          </form>\n        </ng-container>\n      </ng-container>\n    </div>\n\n\n  </div>\n</ng-container>\n", "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, DestroyRef, EventEmitter,\n  Inject,\n  inject,\n  Input,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {CommonModule, DOCUMENT} from '@angular/common';\nimport {ReaderService} from \"../../../_services/reader.service\";\nimport {PersonalToC} from \"../../../_models/readers/personal-toc\";\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport {NgbTooltip} from \"@ng-bootstrap/ng-bootstrap\";\nimport {TranslocoDirective} from \"@ngneat/transloco\";\n\nexport interface PersonalToCEvent {\n  pageNum: number;\n  scrollPart: string | undefined;\n}\n\n@Component({\n  selector: 'app-personal-table-of-contents',\n  standalone: true,\n  imports: [CommonModule, NgbTooltip, TranslocoDirective],\n  templateUrl: './personal-table-of-contents.component.html',\n  styleUrls: ['./personal-table-of-contents.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PersonalTableOfContentsComponent implements OnInit {\n\n  @Input({required: true}) chapterId!: number;\n  @Input({required: true}) pageNum: number = 0;\n  @Input({required: true}) tocRefresh!: EventEmitter<void>;\n  @Output() loadChapter: EventEmitter<PersonalToCEvent> = new EventEmitter();\n\n  private readonly readerService = inject(ReaderService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n\n\n  bookmarks: {[key: number]: Array<PersonalToC>} = [];\n\n  get Pages() {\n    return Object.keys(this.bookmarks).map(p => parseInt(p, 10));\n  }\n\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  ngOnInit() {\n    this.tocRefresh.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {\n      this.load();\n    });\n\n    this.load();\n  }\n\n  load() {\n    this.readerService.getPersonalToC(this.chapterId).subscribe(res => {\n      res.forEach(t => {\n        if (!this.bookmarks.hasOwnProperty(t.pageNumber)) {\n          this.bookmarks[t.pageNumber] = [];\n        }\n        this.bookmarks[t.pageNumber].push(t);\n      })\n      this.cdRef.markForCheck();\n    });\n  }\n\n  loadChapterPage(pageNum: number, scrollPart: string | undefined) {\n    this.loadChapter.emit({pageNum, scrollPart});\n  }\n\n  removeBookmark(bookmark: PersonalToC) {\n    this.readerService.removePersonalToc(bookmark.chapterId, bookmark.pageNumber, bookmark.title).subscribe(() => {\n      this.bookmarks[bookmark.pageNumber] = this.bookmarks[bookmark.pageNumber].filter(t => t.title != bookmark.title);\n\n      if (this.bookmarks[bookmark.pageNumber].length === 0) {\n        delete this.bookmarks[bookmark.pageNumber];\n      }\n      this.cdRef.markForCheck();\n    });\n  }\n\n}\n", "<ng-container *transloco=\"let t; read: 'personal-table-of-contents'\">\n  <div class=\"table-of-contents\">\n    <div *ngIf=\"Pages.length === 0\">\n      <em>{{t('no-data')}}</em>\n    </div>\n    <ul>\n      <li *ngFor=\"let page of Pages\">\n        <span (click)=\"loadChapterPage(page, '')\">{{t('page', {value: page})}}</span>\n        <ul class=\"chapter-title\">\n          <li class=\"ellipsis\"\n              [ngbTooltip]=\"bookmark.title\"\n              placement=\"right\"\n              *ngFor=\"let bookmark of bookmarks[page]\" (click)=\"loadChapterPage(bookmark.pageNumber, bookmark.bookScrollId); $event.stopPropagation();\">\n            {{bookmark.title}}\n            <button class=\"btn btn-icon ms-1\" (click)=\"removeBookmark(bookmark); $event.stopPropagation();\">\n              <i class=\"fa-solid fa-trash\" aria-hidden=\"true\"></i>\n              <span class=\"visually-hidden\">{{t('delete', {bookmarkName: bookmark.title})}}</span>\n            </button>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, DestroyRef,\n  ElementRef, EventEmitter,\n  HostListener,\n  inject,\n  Inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  RendererStyleFlags2,\n  ViewChild\n} from '@angular/core';\nimport { DOCUMENT, NgTemplateOutlet, NgIf, NgStyle, NgClass } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { forkJoin, fromEvent, of } from 'rxjs';\nimport {catchError, debounceTime, distinctUntilChanged, map, take, tap} from 'rxjs/operators';\nimport { Chapter } from 'src/app/_models/chapter';\nimport { AccountService } from 'src/app/_services/account.service';\nimport { NavService } from 'src/app/_services/nav.service';\nimport { CHAPTER_ID_DOESNT_EXIST, CHAPTER_ID_NOT_FETCHED, ReaderService } from 'src/app/_services/reader.service';\nimport { SeriesService } from 'src/app/_services/series.service';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { BookService } from '../../_services/book.service';\nimport { KEY_CODES, UtilityService } from 'src/app/shared/_services/utility.service';\nimport { BookChapterItem } from '../../_models/book-chapter-item';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Stack } from 'src/app/shared/data-structures/stack';\nimport { MemberService } from 'src/app/_services/member.service';\nimport { ReadingDirection } from 'src/app/_models/preferences/reading-direction';\nimport {WritingStyle} from \"../../../_models/preferences/writing-style\";\nimport { MangaFormat } from 'src/app/_models/manga-format';\nimport { LibraryService } from 'src/app/_services/library.service';\nimport { LibraryType } from 'src/app/_models/library/library';\nimport { BookTheme } from 'src/app/_models/preferences/book-theme';\nimport { BookPageLayoutMode } from 'src/app/_models/readers/book-page-layout-mode';\nimport { PageStyle, ReaderSettingsComponent } from '../reader-settings/reader-settings.component';\nimport { User } from 'src/app/_models/user';\nimport { ThemeService } from 'src/app/_services/theme.service';\nimport { ScrollService } from 'src/app/_services/scroll.service';\nimport { PAGING_DIRECTION } from 'src/app/manga-reader/_models/reader-enums';\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport { TableOfContentsComponent } from '../table-of-contents/table-of-contents.component';\nimport { NgbProgressbar, NgbNav, NgbNavItem, NgbNavItemRole, NgbNavLink, NgbNavContent, NgbNavOutlet, NgbTooltip } from '@ng-bootstrap/ng-bootstrap';\nimport { DrawerComponent } from '../../../shared/drawer/drawer.component';\nimport {BookLineOverlayComponent} from \"../book-line-overlay/book-line-overlay.component\";\nimport {\n  PersonalTableOfContentsComponent,\n  PersonalToCEvent\n} from \"../personal-table-of-contents/personal-table-of-contents.component\";\nimport {translate, TranslocoDirective} from \"@ngneat/transloco\";\n\n\nenum TabID {\n  Settings = 1,\n  TableOfContents = 2,\n  PersonalTableOfContents = 3\n}\n\n\ninterface HistoryPoint {\n  /**\n   * Page Number\n   */\n  page: number;\n  /**\n   * XPath to scroll to\n   */\n  scrollPart: string;\n}\n\nconst TOP_OFFSET = -50 * 1.5; // px the sticky header takes up // TODO: Do I need this or can I change it with new fixed top height\n\nconst COLUMN_GAP = 20; // px\n/**\n * Styles that should be applied on the top level book-content tag\n */\nconst pageLevelStyles = ['margin-left', 'margin-right', 'font-size'];\n/**\n * Styles that should be applied on every element within book-content tag\n */\nconst elementLevelStyles = ['line-height', 'font-family'];\n\n@Component({\n    selector: 'app-book-reader',\n    templateUrl: './book-reader.component.html',\n    styleUrls: ['./book-reader.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('isLoading', [\n            state('false', style({ opacity: 1 })),\n            state('true', style({ opacity: 0 })),\n            transition('false <=> true', animate('200ms'))\n        ]),\n        trigger('fade', [\n            state('true', style({ opacity: 0 })),\n            state('false', style({ opacity: 0.5 })),\n            transition('false <=> true', animate('4000ms'))\n        ])\n    ],\n    standalone: true,\n  imports: [NgTemplateOutlet, DrawerComponent, NgIf, NgbProgressbar, NgbNav, NgbNavItem, NgbNavItemRole, NgbNavLink,\n    NgbNavContent, ReaderSettingsComponent, TableOfContentsComponent, NgbNavOutlet, NgStyle, NgClass, NgbTooltip,\n    BookLineOverlayComponent, PersonalTableOfContentsComponent, TranslocoDirective]\n})\nexport class BookReaderComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  private readonly route = inject(ActivatedRoute);\n  private readonly router = inject(Router);\n  private readonly accountService = inject(AccountService);\n  private readonly seriesService = inject(SeriesService);\n  private readonly readerService = inject(ReaderService);\n  private readonly renderer = inject(Renderer2);\n  private readonly navService = inject(NavService);\n  private readonly toastr = inject(ToastrService);\n  private readonly domSanitizer = inject(DomSanitizer);\n  private readonly bookService = inject(BookService);\n  private readonly memberService = inject(MemberService);\n  private readonly scrollService = inject(ScrollService);\n  private readonly utilityService = inject(UtilityService);\n  private readonly libraryService = inject(LibraryService);\n  private readonly themeService = inject(ThemeService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n\n  protected readonly BookPageLayoutMode = BookPageLayoutMode;\n  protected readonly WritingStyle = WritingStyle;\n  protected readonly TabID = TabID;\n  protected readonly ReadingDirection = ReadingDirection;\n  protected readonly PAGING_DIRECTION = PAGING_DIRECTION;\n\n  libraryId!: number;\n  seriesId!: number;\n  volumeId!: number;\n  chapterId!: number;\n  chapter!: Chapter;\n  user!: User;\n\n  /**\n   * Reading List id. Defaults to -1.\n   */\n  readingListId: number = CHAPTER_ID_DOESNT_EXIST;\n\n   /**\n    * If this is true, no progress will be saved.\n    */\n  incognitoMode: boolean = false;\n\n   /**\n    * If this is true, chapters will be fetched in the order of a reading list, rather than natural series order.\n    */\n  readingListMode: boolean = false;\n\n  /**\n   * The actual pages from the epub, used for showing on table of contents. This must be here as we need access to it for scroll anchors\n   */\n  chapters: Array<BookChapterItem> = [];\n  /**\n   * Current Page\n   */\n  pageNum = 0;\n  /**\n   * Max Pages\n   */\n  maxPages = 1;\n  /**\n   * This allows for exploration into different chapters\n   */\n  adhocPageHistory: Stack<HistoryPoint> = new Stack<HistoryPoint>();\n  /**\n   * A stack of the chapter ids we come across during continuous reading mode. When we traverse a boundary, we use this to avoid extra API calls.\n   * @see Stack\n   * TODO: See if continuousChaptersStack can be moved into reader service so we can reduce code duplication between readers (and also use ChapterInfo with it instead)\n   */\n  continuousChaptersStack: Stack<number> = new Stack();\n  /*\n   * The current page only contains an image. This is used to determine if we should show the image in the center of the screen.\n   */\n  isSingleImagePage = false;\n  /**\n   * Belongs to the drawer component\n   */\n  activeTabId: TabID = TabID.Settings;\n  /**\n   * Sub Nav tab id\n   */\n  tocId: TabID = TabID.TableOfContents;\n  /**\n   * Belongs to drawer component\n   */\n  drawerOpen = false;\n  /**\n   * If the word/line overlay is open\n   */\n  isLineOverlayOpen = false;\n  /**\n   * If the action bar is visible\n   */\n  actionBarVisible = true;\n  /**\n   * Book reader setting that hides the menuing system\n   */\n  immersiveMode: boolean = false;\n  /**\n   * If we are loading from backend\n   */\n  isLoading = true;\n  /**\n   * Title of the book. Rendered in action bars\n   */\n  bookTitle: string = '';\n  /**\n   * The boolean that decides if the clickToPaginate overlay is visible or not.\n   */\n  clickToPaginateVisualOverlay = false;\n  clickToPaginateVisualOverlayTimeout: any = undefined; // For animation\n  clickToPaginateVisualOverlayTimeout2: any = undefined; // For kicking off animation, giving enough time to render html\n  updateImageSizeTimeout: any = undefined;\n  /**\n   * This is the html we get from the server\n   */\n  page: SafeHtml | undefined = undefined;\n  /**\n   * Next Chapter Id. This is not guaranteed to be a valid ChapterId. Prefetched on page load (non-blocking).\n   */\n   nextChapterId: number = CHAPTER_ID_NOT_FETCHED;\n   /**\n    * Previous Chapter Id. This is not guaranteed to be a valid ChapterId. Prefetched on page load (non-blocking).\n    */\n   prevChapterId: number = CHAPTER_ID_NOT_FETCHED;\n   /**\n    * Is there a next chapter. If not, this will disable UI controls.\n    */\n   nextChapterDisabled: boolean = false;\n   /**\n    * Is there a previous chapter. If not, this will disable UI controls.\n    */\n   prevChapterDisabled: boolean = false;\n   /**\n    * Has the next chapter been prefetched. Prefetched means the backend will cache the files.\n    */\n   nextChapterPrefetched: boolean = false;\n   /**\n    * Has the previous chapter been prefetched. Prefetched means the backend will cache the files.\n    */\n   prevChapterPrefetched: boolean = false;\n  /**\n   * If the prev page allows a page change to occur.\n   */\n   prevPageDisabled = false;\n   /**\n    * If the next page allows a page change to occur.\n    */\n   nextPageDisabled = false;\n\n  /**\n   * Internal property used to capture all the different css properties to render on all elements. This is a cached version that is updated from reader-settings component\n   */\n  pageStyles!: PageStyle;\n\n  /**\n   * Offset for drawer and rendering canvas. Fixed to 62px.\n   */\n  topOffset: number = 38;\n  /**\n   * Used for showing/hiding bottom action bar. Calculates if there is enough scroll to show it.\n   * Will hide if all content in book is absolute positioned\n   */\n  horizontalScrollbarNeeded = false;\n  scrollbarNeeded = false;\n  readingDirection: ReadingDirection = ReadingDirection.LeftToRight;\n  clickToPaginate = false;\n  /**\n   * Used solely for fullscreen to apply a hack\n   */\n  darkMode = true;\n  /**\n   * A anchors that map to the page number. When you click on one of these, we will load a given page up for the user.\n   */\n  pageAnchors: {[n: string]: number } = {};\n  currentPageAnchor: string = '';\n  /**\n   * Last seen progress part path\n   */\n  lastSeenScrollPartPath: string = '';\n  /**\n   * Library Type used for rendering chapter or issue\n   */\n   libraryType: LibraryType = LibraryType.Book;\n  /**\n   * If the web browser is in fullscreen mode\n   */\n  isFullscreen: boolean = false;\n\n  /**\n   * How to render the page content\n   */\n  layoutMode: BookPageLayoutMode = BookPageLayoutMode.Default;\n\n  /**\n   * Width of the document (in non-column layout), used for column layout virtual paging\n   */\n  windowWidth: number = 0;\n  windowHeight: number = 0;\n\n  /**\n   * used to track if a click is a drag or not, for opening menu\n   */\n  mousePosition = {\n    x: 0,\n    y: 0\n  };\n\n  /**\n   * Used to keep track of direction user is paging, to help with virtual paging on column layout\n   */\n  pagingDirection: PAGING_DIRECTION = PAGING_DIRECTION.FORWARD;\n\n  writingStyle: WritingStyle = WritingStyle.Horizontal;\n\n\n  /**\n   * When the user is highlighting something, then we remove pagination\n   */\n  hidePagination = false;\n\n  /**\n   * Used to refresh the Personal PoC\n   */\n  refreshPToC: EventEmitter<void> = new EventEmitter<void>();\n\n  private readonly destroyRef = inject(DestroyRef);\n\n  @ViewChild('bookContainer', {static: false}) bookContainerElemRef!: ElementRef<HTMLDivElement>;\n  /**\n   * book-content class\n   */\n  @ViewChild('readingHtml', {static: false}) bookContentElemRef!: ElementRef<HTMLDivElement>;\n  @ViewChild('readingSection', {static: false}) readingSectionElemRef!: ElementRef<HTMLDivElement>;\n  @ViewChild('stickyTop', {static: false}) stickyTopElemRef!: ElementRef<HTMLDivElement>;\n  @ViewChild('reader', {static: false}) reader!: ElementRef;\n\n  /**\n   * Disables the Left most button\n   */\n  get IsPrevDisabled(): boolean {\n    if (this.readingDirection === ReadingDirection.LeftToRight) {\n      // Acting as Previous button\n      return this.isPrevPageDisabled();\n    }\n\n    // Acting as a Next button\n    return this.isNextPageDisabled();\n  }\n\n  get IsNextDisabled(): boolean {\n    if (this.readingDirection === ReadingDirection.LeftToRight) {\n      // Acting as Next button\n      return this.isNextPageDisabled();\n    }\n    // Acting as Previous button\n    return this.isPrevPageDisabled();\n  }\n\n  isNextPageDisabled() {\n    const [currentVirtualPage, totalVirtualPages, _] = this.getVirtualPage();\n    const condition = (this.nextPageDisabled || this.nextChapterId === CHAPTER_ID_DOESNT_EXIST) && this.pageNum + 1 > this.maxPages - 1;\n      if (this.layoutMode !== BookPageLayoutMode.Default) {\n        return condition && currentVirtualPage === totalVirtualPages;\n      }\n      return condition;\n  }\n\n  isPrevPageDisabled() {\n    const [currentVirtualPage,,] = this.getVirtualPage();\n    const condition =  (this.prevPageDisabled || this.prevChapterId === CHAPTER_ID_DOESNT_EXIST) && this.pageNum === 0;\n      if (this.layoutMode !== BookPageLayoutMode.Default) {\n        return condition && currentVirtualPage === 0;\n      }\n      return condition;\n  }\n\n  /**\n   * Determines if we show >> or >\n   */\n  get IsNextChapter(): boolean {\n    if (this.layoutMode === BookPageLayoutMode.Default) {\n      return this.pageNum + 1 >= this.maxPages;\n    }\n\n    const [currentVirtualPage, totalVirtualPages, _] = this.getVirtualPage();\n    if (this.bookContentElemRef == null) return this.pageNum + 1 >= this.maxPages;\n\n    return this.pageNum + 1 >= this.maxPages && (currentVirtualPage === totalVirtualPages);\n  }\n  /**\n   * Determines if we show << or <\n   */\n  get IsPrevChapter(): boolean {\n    if (this.layoutMode === BookPageLayoutMode.Default) {\n      return this.pageNum === 0;\n    }\n\n    const [currentVirtualPage,,] = this.getVirtualPage();\n    if (this.bookContentElemRef == null) return this.pageNum + 1 >= this.maxPages;\n\n    return this.pageNum === 0 && (currentVirtualPage === 0);\n  }\n\n  get ColumnWidth() {\n    const base = this.writingStyle === WritingStyle.Vertical ? this.windowHeight : this.windowWidth;\n    switch (this.layoutMode) {\n      case BookPageLayoutMode.Default:\n        return 'unset';\n      case BookPageLayoutMode.Column1:\n        return ((base / 2) - 4) + 'px';\n      case BookPageLayoutMode.Column2:\n        return (base / 4) + 'px';\n      default:\n        return 'unset';\n    }\n  }\n\n  get ColumnHeight() {\n    if (this.layoutMode !== BookPageLayoutMode.Default || this.writingStyle === WritingStyle.Vertical) {\n      // Take the height after page loads, subtract the top/bottom bar\n      const height = this.windowHeight  - (this.topOffset * 2);\n      return height + 'px';\n    }\n    return 'unset';\n  }\n\n  get VerticalBookContentWidth() {\n    if (this.layoutMode !== BookPageLayoutMode.Default && this.writingStyle !== WritingStyle.Horizontal ) {\n      const width = this.getVerticalPageWidth()\n      return width + 'px';\n    }\n    return '';\n  }\n\n  get ColumnLayout() {\n    switch (this.layoutMode) {\n      case BookPageLayoutMode.Default:\n        return '';\n      case BookPageLayoutMode.Column1:\n        return 'column-layout-1';\n      case BookPageLayoutMode.Column2:\n        return 'column-layout-2';\n    }\n  }\n\n  get WritingStyleClass() {\n    switch (this.writingStyle) {\n        case WritingStyle.Horizontal:\n          return '';\n        case WritingStyle.Vertical:\n            return 'writing-style-vertical';\n    }\n  }\n\n  get PageWidthForPagination() {\n    if (this.layoutMode === BookPageLayoutMode.Default && this.writingStyle === WritingStyle.Vertical && this.horizontalScrollbarNeeded) {\n      return 'unset';\n    }\n    return '100%'\n  }\n\n  get PageHeightForPagination() {\n    if (this.layoutMode === BookPageLayoutMode.Default) {\n      // if the book content is less than the height of the container, override and return height of container for pagination area\n      if (this.bookContainerElemRef?.nativeElement?.clientHeight > this.bookContentElemRef?.nativeElement?.clientHeight) {\n        return (this.bookContainerElemRef?.nativeElement?.clientHeight || 0) + 'px';\n      }\n\n      return (this.bookContentElemRef?.nativeElement?.scrollHeight || 0)  - ((this.topOffset * (this.immersiveMode ? 0 : 1)) * 2) + 'px';\n    }\n\n    if (this.immersiveMode) return this.windowHeight + 'px';\n    return (this.windowHeight) - (this.topOffset * 2) + 'px';\n  }\n\n  constructor(@Inject(DOCUMENT) private document: Document) {\n      this.navService.hideNavBar();\n      this.themeService.clearThemes();\n      this.navService.hideSideNav();\n      this.cdRef.markForCheck();\n  }\n\n  /**\n   * After the page has loaded, setup the scroll handler. The scroll handler has 2 parts. One is if there are page anchors setup (aka page anchor elements linked with the\n   * table of content) then we calculate what has already been reached and grab the last reached one to save progress. If page anchors aren't setup (toc missing), then try to save progress\n   * based on the last seen scroll part (xpath).\n   */\n  ngAfterViewInit() {\n    // check scroll offset and if offset is after any of the \"id\" markers, save progress\n    fromEvent(this.reader.nativeElement, 'scroll')\n      .pipe(\n        debounceTime(200),\n        takeUntilDestroyed(this.destroyRef))\n      .subscribe((event) => {\n        if (this.isLoading) return;\n\n        this.handleScrollEvent();\n    });\n\n    fromEvent<MouseEvent>(this.bookContainerElemRef.nativeElement, 'mousemove')\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        distinctUntilChanged(),\n        tap((e) => {\n          const selection = window.getSelection();\n          this.hidePagination = selection !== null && selection.toString().trim() !== '';\n          this.cdRef.markForCheck();\n        })\n      )\n      .subscribe();\n\n    fromEvent<MouseEvent>(this.bookContainerElemRef.nativeElement, 'mouseup')\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        distinctUntilChanged(),\n        tap((e) => {\n          this.hidePagination = false;\n          this.cdRef.markForCheck();\n        })\n      )\n      .subscribe();\n\n  }\n\n  handleScrollEvent() {\n    // Highlight the current chapter we are on\n    if (Object.keys(this.pageAnchors).length !== 0) {\n      // get the height of the document, so we can capture markers that are halfway on the document viewport\n      const verticalOffset = this.reader.nativeElement?.scrollTop || (this.scrollService.scrollPosition + (this.document.body.offsetHeight / 2));\n\n      const alreadyReached = Object.values(this.pageAnchors).filter((i: number) => i <= verticalOffset);\n      if (alreadyReached.length > 0) {\n        this.currentPageAnchor = Object.keys(this.pageAnchors)[alreadyReached.length - 1];\n      } else {\n        this.currentPageAnchor = '';\n      }\n\n      this.cdRef.markForCheck();\n    }\n\n    // Find the element that is on screen to bookmark against\n    const xpath: string | null | undefined = this.getFirstVisibleElementXPath();\n    if (xpath !== null && xpath !== undefined) this.lastSeenScrollPartPath = xpath;\n\n    if (this.lastSeenScrollPartPath !== '') {\n      this.saveProgress();\n    }\n  }\n\n  saveProgress() {\n    let tempPageNum = this.pageNum;\n    if (this.pageNum == this.maxPages - 1) {\n      tempPageNum = this.pageNum + 1;\n    }\n\n    if (!this.incognitoMode) {\n      this.readerService.saveProgress(this.libraryId, this.seriesId, this.volumeId, this.chapterId, tempPageNum, this.lastSeenScrollPartPath).pipe(take(1)).subscribe(() => {/* No operation */});\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearTimeout(this.clickToPaginateVisualOverlayTimeout);\n    this.clearTimeout(this.clickToPaginateVisualOverlayTimeout2);\n\n    this.readerService.disableWakeLock();\n\n    this.themeService.clearBookTheme();\n\n    this.themeService.currentTheme$.pipe(take(1)).subscribe(theme => {\n      this.themeService.setTheme(theme.name);\n    });\n\n    this.navService.showNavBar();\n    this.navService.showSideNav();\n  }\n\n  ngOnInit(): void {\n    const libraryId = this.route.snapshot.paramMap.get('libraryId');\n    const seriesId = this.route.snapshot.paramMap.get('seriesId');\n    const chapterId = this.route.snapshot.paramMap.get('chapterId');\n\n    if (libraryId === null || seriesId === null || chapterId === null) {\n      this.router.navigateByUrl('/home');\n      return;\n    }\n\n\n    this.libraryId = parseInt(libraryId, 10);\n    this.seriesId = parseInt(seriesId, 10);\n    this.chapterId = parseInt(chapterId, 10);\n    this.incognitoMode = this.route.snapshot.queryParamMap.get('incognitoMode') === 'true';\n\n    const readingListId = this.route.snapshot.queryParamMap.get('readingListId');\n    if (readingListId != null) {\n      this.readingListMode = true;\n      this.readingListId = parseInt(readingListId, 10);\n    }\n    this.cdRef.markForCheck();\n\n\n    this.memberService.hasReadingProgress(this.libraryId).pipe(take(1)).subscribe(hasProgress => {\n      if (!hasProgress) {\n        this.toggleDrawer();\n        this.toastr.info(translate('toasts.book-settings-info'));\n      }\n    });\n\n    this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n      if (user) {\n        this.user = user;\n        this.init();\n      }\n    });\n  }\n\n  init() {\n    this.nextChapterId = CHAPTER_ID_NOT_FETCHED;\n    this.prevChapterId = CHAPTER_ID_NOT_FETCHED;\n    this.nextChapterDisabled = false;\n    this.prevChapterDisabled = false;\n    this.nextChapterPrefetched = false;\n    this.cdRef.markForCheck();\n\n\n    this.bookService.getBookInfo(this.chapterId).subscribe(info => {\n      if (this.readingListMode && info.seriesFormat !== MangaFormat.EPUB) {\n        // Redirect to the manga reader.\n        const params = this.readerService.getQueryParamsObject(this.incognitoMode, this.readingListMode, this.readingListId);\n        this.router.navigate(this.readerService.getNavigationArray(info.libraryId, info.seriesId, this.chapterId, info.seriesFormat), {queryParams: params});\n        return;\n      }\n\n      this.bookTitle = info.bookTitle;\n      this.cdRef.markForCheck();\n\n      forkJoin({\n        chapter: this.seriesService.getChapter(this.chapterId),\n        progress: this.readerService.getProgress(this.chapterId),\n        chapters: this.bookService.getBookChapters(this.chapterId),\n      }).subscribe(results => {\n        this.chapter = results.chapter;\n        this.volumeId = results.chapter.volumeId;\n        this.maxPages = results.chapter.pages;\n        this.chapters = results.chapters;\n        this.pageNum = results.progress.pageNum;\n        this.cdRef.markForCheck();\n        if (results.progress.bookScrollId) this.lastSeenScrollPartPath = results.progress.bookScrollId;\n\n        this.continuousChaptersStack.push(this.chapterId);\n\n        this.libraryService.getLibraryType(this.libraryId).pipe(take(1)).subscribe(type => {\n          this.libraryType = type;\n        });\n\n        this.updateImageSizes();\n\n        if (this.pageNum >= this.maxPages) {\n          this.pageNum = this.maxPages - 1;\n          this.cdRef.markForCheck();\n          this.saveProgress();\n        }\n\n        this.readerService.getNextChapter(this.seriesId, this.volumeId, this.chapterId, this.readingListId).pipe(take(1)).subscribe(chapterId => {\n          this.nextChapterId = chapterId;\n          if (chapterId === CHAPTER_ID_DOESNT_EXIST || chapterId === this.chapterId) {\n            this.nextChapterDisabled = true;\n            this.nextChapterPrefetched = true;\n            this.cdRef.markForCheck();\n            return;\n          }\n          this.setPageNum(this.pageNum);\n        });\n        this.readerService.getPrevChapter(this.seriesId, this.volumeId, this.chapterId, this.readingListId).pipe(take(1)).subscribe(chapterId => {\n          this.prevChapterId = chapterId;\n          if (chapterId === CHAPTER_ID_DOESNT_EXIST || chapterId === this.chapterId) {\n            this.prevChapterDisabled = true;\n            this.prevChapterPrefetched = true; // If there is no prev chapter, then mark it as prefetched\n            this.cdRef.markForCheck();\n            return;\n          }\n          this.setPageNum(this.pageNum);\n        });\n\n        // Check if user progress has part, if so load it so we scroll to it\n        this.loadPage(results.progress.bookScrollId || undefined);\n        this.readerService.enableWakeLock(this.reader.nativeElement);\n      }, () => {\n        setTimeout(() => {\n          this.closeReader();\n        }, 200);\n      });\n    });\n  }\n\n  @HostListener('window:resize', ['$event'])\n  @HostListener('window:orientationchange', ['$event'])\n  onResize(){\n    // Update the window Height\n    this.updateWidthAndHeightCalcs();\n    this.updateImageSizes();\n    const resumeElement = this.getFirstVisibleElementXPath();\n    if (this.layoutMode !== BookPageLayoutMode.Default && resumeElement !== null && resumeElement !== undefined) {\n      this.scrollTo(resumeElement); // This works pretty well, but not perfect\n    }\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  handleKeyPress(event: KeyboardEvent) {\n    const activeElement = document.activeElement as HTMLElement;\n    const isInputFocused = activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA';\n    if (isInputFocused) return;\n\n    if (event.key === KEY_CODES.RIGHT_ARROW) {\n      this.movePage(this.readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.FORWARD : PAGING_DIRECTION.BACKWARDS);\n    } else if (event.key === KEY_CODES.LEFT_ARROW) {\n      this.movePage(this.readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.BACKWARDS : PAGING_DIRECTION.FORWARD);\n    } else if (event.key === KEY_CODES.ESC_KEY) {\n      const isHighlighting = window.getSelection()?.toString() != '';\n      if (isHighlighting) return;\n      this.closeReader();\n    } else if (event.key === KEY_CODES.SPACE) {\n      this.toggleDrawer();\n      event.stopPropagation();\n      event.preventDefault();\n    } else if (event.key === KEY_CODES.G) {\n      this.goToPage();\n    } else if (event.key === KEY_CODES.F) {\n      this.toggleFullscreen()\n    }\n  }\n\n  onWheel(event: WheelEvent) {\n    // This allows the user to scroll the page horizontally without holding shift\n    if (this.layoutMode !== BookPageLayoutMode.Default || this.writingStyle !== WritingStyle.Vertical) {\n      return;\n    }\n    if (event.deltaY !== 0) {\n      event.preventDefault()\n      this.scrollService.scrollToX(  event.deltaY + this.reader.nativeElement.scrollLeft, this.reader.nativeElement);\n    }\n}\n\n  closeReader() {\n    this.readerService.closeReader(this.readingListMode, this.readingListId);\n  }\n\n  sortElements(a: Element, b: Element) {\n    const aTop = a.getBoundingClientRect().top;\n      const bTop = b.getBoundingClientRect().top;\n      if (aTop < bTop) {\n        return -1;\n      }\n      if (aTop > bTop) {\n        return 1;\n      }\n\n      return 0;\n  }\n\n  loadNextChapter() {\n    if (this.nextPageDisabled) { return; }\n    this.isLoading = true;\n    if (this.nextChapterId === CHAPTER_ID_NOT_FETCHED || this.nextChapterId === this.chapterId) {\n      this.readerService.getNextChapter(this.seriesId, this.volumeId, this.chapterId, this.readingListId).pipe(take(1)).subscribe(chapterId => {\n        this.nextChapterId = chapterId;\n        this.loadChapter(chapterId, 'Next');\n      });\n    } else {\n      this.loadChapter(this.nextChapterId, 'Next');\n    }\n  }\n\n  loadPrevChapter() {\n    if (this.prevPageDisabled) { return; }\n\n    this.isLoading = true;\n    this.cdRef.markForCheck();\n    this.continuousChaptersStack.pop();\n    const prevChapter = this.continuousChaptersStack.peek();\n    if (prevChapter != this.chapterId) {\n      if (prevChapter !== undefined) {\n        this.chapterId = prevChapter;\n        this.init();\n        return;\n      }\n    }\n\n    if (this.prevChapterPrefetched && this.prevChapterId === CHAPTER_ID_DOESNT_EXIST) {\n      this.isLoading = false;\n      this.cdRef.markForCheck();\n      return;\n    }\n\n    if (this.prevChapterId === CHAPTER_ID_NOT_FETCHED || this.prevChapterId === this.chapterId && !this.prevChapterPrefetched) {\n      this.readerService.getPrevChapter(this.seriesId, this.volumeId, this.chapterId, this.readingListId).pipe(take(1)).subscribe(chapterId => {\n        this.prevChapterId = chapterId;\n        this.loadChapter(chapterId, 'Prev');\n      });\n    } else {\n      this.loadChapter(this.prevChapterId, 'Prev');\n    }\n  }\n\n  loadChapter(chapterId: number, direction: 'Next' | 'Prev') {\n    if (chapterId >= 0) {\n      this.chapterId = chapterId;\n      this.continuousChaptersStack.push(chapterId);\n      // Load chapter Id onto route but don't reload\n      const newRoute = this.readerService.getNextChapterUrl(this.router.url, this.chapterId, this.incognitoMode, this.readingListMode, this.readingListId);\n      window.history.replaceState({}, '', newRoute);\n      const msg = translate(direction === 'Next' ? 'toasts.load-next-chapter' : 'toasts.load-prev-chapter', {entity: this.utilityService.formatChapterName(this.libraryType).toLowerCase()});\n      this.toastr.info(msg, '', {timeOut: 3000});\n      this.cdRef.markForCheck();\n      this.init();\n    } else {\n      // This will only happen if no actual chapter can be found\n      const msg = translate(direction === 'Next' ? 'toasts.no-next-chapter' : 'toasts.no-prev-chapter', {entity: this.utilityService.formatChapterName(this.libraryType).toLowerCase()});\n      this.toastr.warning(msg);\n      this.isLoading = false;\n      if (direction === 'Prev') {\n        this.prevPageDisabled = true;\n      } else {\n        this.nextPageDisabled = true;\n      }\n      this.cdRef.markForCheck();\n    }\n  }\n\n  loadChapterPage(event: {pageNum: number, part: string}) {\n    this.setPageNum(event.pageNum);\n    this.loadPage('id(\"' + event.part + '\")');\n  }\n\n  /**\n   * From personal table of contents/bookmark\n   * @param event\n   */\n  loadChapterPart(event: PersonalToCEvent) {\n    this.setPageNum(event.pageNum);\n    this.loadPage(event.scrollPart);\n  }\n\n  /**\n   * Adds a click handler for any anchors that have 'kavita-page'. If 'kavita-page' present, changes page to kavita-page and optionally passes a part value\n   * from 'kavita-part', which will cause the reader to scroll to the marker.\n   */\n  addLinkClickHandlers() {\n    const links = this.readingSectionElemRef.nativeElement.querySelectorAll('a');\n      links.forEach((link: any) => {\n        link.addEventListener('click', (e: any) => {\n          e.stopPropagation();\n          let targetElem = e.target;\n          if (e.target.nodeName !== 'A' && e.target.parentNode.nodeName === 'A') {\n            // Certain combos like <a><sup>text</sup></a> can cause the target to be the sup tag and not the anchor\n            targetElem = e.target.parentNode;\n          }\n          if (!targetElem.attributes.hasOwnProperty('kavita-page')) { return; }\n          const page = parseInt(targetElem.attributes['kavita-page'].value, 10);\n          if (this.adhocPageHistory.peek()?.page !== this.pageNum) {\n            this.adhocPageHistory.push({page: this.pageNum, scrollPart: this.lastSeenScrollPartPath});\n          }\n\n          const partValue = targetElem.attributes.hasOwnProperty('kavita-part') ? targetElem.attributes['kavita-part'].value : undefined;\n          if (partValue && page === this.pageNum) {\n            this.scrollTo(targetElem.attributes['kavita-part'].value);\n            return;\n          }\n\n          this.setPageNum(page);\n          this.loadPage(partValue);\n        });\n      });\n  }\n\n  moveFocus() {\n    const elems = this.document.getElementsByClassName('reading-section');\n    if (elems.length > 0) {\n      (elems[0] as HTMLDivElement).focus();\n    }\n  }\n\n\n  promptForPage() {\n    const question = translate('book-reader.go-to-page-prompt', {totalPages: this.maxPages - 1});\n    const goToPageNum = window.prompt(question, '');\n    if (goToPageNum === null || goToPageNum.trim().length === 0) { return null; }\n    return goToPageNum;\n  }\n\n  goToPage(pageNum?: number) {\n    let page = pageNum;\n    if (pageNum === null || pageNum === undefined) {\n      const goToPageNum = this.promptForPage();\n      if (goToPageNum === null) { return; }\n      page = parseInt(goToPageNum.trim(), 10);\n    }\n\n    if (page === undefined || this.pageNum === page) { return; }\n\n    if (page > this.maxPages) {\n      page = this.maxPages;\n    } else if (page < 0) {\n      page = 0;\n    }\n\n    if (!(page === 0 || page === this.maxPages - 1)) {\n      page -= 1;\n    }\n\n    this.pageNum = page;\n    this.loadPage();\n  }\n\n\n\n\n  loadPage(part?: string | undefined, scrollTop?: number | undefined) {\n    this.isLoading = true;\n    this.cdRef.markForCheck();\n\n    this.bookService.getBookPage(this.chapterId, this.pageNum).pipe(take(1)).subscribe(content => {\n      content = content.replace(/font-size:[^;]*;/ig, '').replace(/%2520/g, '%20').replace(/OEBPS\\/Styles\\/\\.\\.\\/Fonts/g, 'Fonts')\n      this.isSingleImagePage = this.checkSingleImagePage(content) // This needs be performed before we set this.page to avoid image jumping\n      this.updateSingleImagePageStyles()\n      this.page = this.domSanitizer.bypassSecurityTrustHtml(content); // PERF: Potential optimization to prefetch next/prev page and store in localStorage\n\n\n      this.cdRef.markForCheck();\n\n      setTimeout(() => {\n        this.addLinkClickHandlers();\n        this.updateReaderStyles(this.pageStyles);\n\n        const imgs = this.readingSectionElemRef.nativeElement.querySelectorAll('img');\n        if (imgs === null || imgs.length === 0) {\n          this.setupPage(part, scrollTop);\n          return;\n        }\n\n        Promise.all(Array.from(imgs)\n          .filter(img => !img.complete)\n          .map(img => new Promise(resolve => { img.onload = img.onerror = resolve; })))\n          .then(() => {\n            this.setupPage(part, scrollTop);\n            this.updateImageSizes();\n          });\n      }, 10);\n    });\n  }\n\n  /**\n   * Updates the image properties to fit the current layout mode and screen size\n   */\n  updateImageSizes() {\n    const isVerticalWritingStyle = this.writingStyle === WritingStyle.Vertical;\n    const height = this.windowHeight - (this.topOffset * 2);\n    let maxHeight = 'unset';\n    let maxWidth = '';\n    switch (this.layoutMode) {\n      case BookPageLayoutMode.Default:\n        if (isVerticalWritingStyle) {\n          maxHeight = `${height}px`;\n        } else {\n          maxWidth = `${this.getVerticalPageWidth()}px`;\n        }\n        break\n\n      case BookPageLayoutMode.Column1:\n        maxHeight = `${height}px`;\n        maxWidth = `${this.getVerticalPageWidth()}px`;\n        break\n\n      case BookPageLayoutMode.Column2:\n        maxWidth = `${this.getVerticalPageWidth()}px`;\n        if (isVerticalWritingStyle && !this.isSingleImagePage)  {\n          maxHeight = `${height / 2}px`;\n        } else {\n          maxHeight = `${height}px`;\n        }\n        break\n    }\n    this.document.documentElement.style.setProperty('--book-reader-content-max-height', maxHeight);\n    this.document.documentElement.style.setProperty('--book-reader-content-max-width', maxWidth);\n\n  }\n\n  updateSingleImagePageStyles() {\n    if (this.isSingleImagePage && this.layoutMode !== BookPageLayoutMode.Default) {\n      this.document.documentElement.style.setProperty('--book-reader-content-position', 'absolute');\n      this.document.documentElement.style.setProperty('--book-reader-content-top', '50%');\n      this.document.documentElement.style.setProperty('--book-reader-content-left', '50%');\n      this.document.documentElement.style.setProperty('--book-reader-content-transform', 'translate(-50%, -50%)');\n    } else {\n        this.document.documentElement.style.setProperty('--book-reader-content-position', '');\n        this.document.documentElement.style.setProperty('--book-reader-content-top', '');\n        this.document.documentElement.style.setProperty('--book-reader-content-left', '');\n        this.document.documentElement.style.setProperty('--book-reader-content-transform', '');\n    }\n  }\n\n  checkSingleImagePage(content: string) {\n    // Exclude the style element from the HTML content as it messes up innerText\n    const htmlContent = content.replace(/<style>.*<\\/style>/s, '');\n\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(htmlContent, 'text/html');\n    const html = doc.querySelector('html');\n\n    if (html?.innerText.trim() !== '') {\n      return false;\n    }\n\n    const images = doc.querySelectorAll('img, svg');\n    return images.length === 1;\n\n  }\n\n\n  setupPage(part?: string | undefined, scrollTop?: number | undefined) {\n    this.isLoading = false;\n    this.cdRef.markForCheck();\n\n    // Virtual Paging stuff\n    this.updateWidthAndHeightCalcs();\n    this.updateLayoutMode(this.layoutMode || BookPageLayoutMode.Default);\n\n    // Find all the part ids and their top offset\n    this.setupPageAnchors();\n\n\n    if (part !== undefined && part !== '') {\n      this.scrollTo(part);\n    } else if (scrollTop !== undefined && scrollTop !== 0) {\n      this.scrollService.scrollTo(scrollTop, this.reader.nativeElement);\n    } else if ((this.writingStyle === WritingStyle.Vertical) && (this.layoutMode === BookPageLayoutMode.Default)) {\n       setTimeout(()=> this.scrollService.scrollToX(this.bookContentElemRef.nativeElement.clientWidth, this.reader.nativeElement));\n    } else {\n\n      if (this.layoutMode === BookPageLayoutMode.Default) {\n        this.scrollService.scrollTo(0, this.reader.nativeElement);\n      } else if (this.writingStyle === WritingStyle.Vertical) {\n        if (this.pagingDirection === PAGING_DIRECTION.BACKWARDS) {\n            setTimeout(() => this.scrollService.scrollTo(this.bookContentElemRef.nativeElement.scrollHeight, this.bookContentElemRef.nativeElement, 'auto'));\n        } else {\n            setTimeout(() => this.scrollService.scrollTo(0, this.bookContentElemRef.nativeElement,'auto' ));\n        }\n      }\n      else {\n        // We need to check if we are paging back, because we need to adjust the scroll\n        if (this.pagingDirection === PAGING_DIRECTION.BACKWARDS) {\n          setTimeout(() => this.scrollService.scrollToX(this.bookContentElemRef.nativeElement.scrollWidth, this.bookContentElemRef.nativeElement));\n        } else {\n          setTimeout(() => this.scrollService.scrollToX(0, this.bookContentElemRef.nativeElement));\n        }\n      }\n    }\n\n    // we need to click the document before arrow keys will scroll down.\n    this.reader.nativeElement.focus();\n    this.saveProgress();\n    this.isLoading = false;\n    this.cdRef.markForCheck();\n  }\n\n\n  goBack() {\n    if (!this.adhocPageHistory.isEmpty()) {\n      const page = this.adhocPageHistory.pop();\n      if (page !== undefined) {\n        this.setPageNum(page.page);\n        this.loadPage(page.scrollPart);\n      }\n    }\n  }\n\n  setPageNum(pageNum: number) {\n    this.pageNum = Math.max(Math.min(pageNum, this.maxPages), 0);\n    this.cdRef.markForCheck();\n\n    if (this.pageNum >= this.maxPages - 10) {\n      // Tell server to cache the next chapter\n      if (!this.nextChapterPrefetched && this.nextChapterId !== CHAPTER_ID_DOESNT_EXIST) {\n        this.readerService.getChapterInfo(this.nextChapterId).pipe(take(1), catchError(err => {\n          this.nextChapterDisabled = true;\n          this.cdRef.markForCheck();\n          return of(null);\n        })).subscribe(res => {\n          this.nextChapterPrefetched = true;\n        });\n      }\n    } else if (this.pageNum <= 10) {\n      if (!this.prevChapterPrefetched && this.prevChapterId !== CHAPTER_ID_DOESNT_EXIST) {\n        this.readerService.getChapterInfo(this.prevChapterId).pipe(take(1), catchError(err => {\n          this.prevChapterDisabled = true;\n          this.cdRef.markForCheck();\n          return of(null);\n        })).subscribe(res => {\n          this.prevChapterPrefetched = true;\n        });\n      }\n    }\n  }\n\n  /**\n   * Given a direction, calls the next or prev page method\n   * @param direction Direction to move\n   */\n  movePage(direction: PAGING_DIRECTION) {\n    if (direction === PAGING_DIRECTION.BACKWARDS) {\n      this.prevPage();\n      return;\n    }\n\n    this.nextPage();\n  }\n\n  prevPage() {\n    const oldPageNum = this.pageNum;\n\n    this.pagingDirection = PAGING_DIRECTION.BACKWARDS;\n\n    // We need to handle virtual paging before we increment the actual page\n    if (this.layoutMode !== BookPageLayoutMode.Default) {\n      const [currentVirtualPage, _, pageWidth] = this.getVirtualPage();\n\n      if (currentVirtualPage > 1) {\n        // -2 apparently goes back 1 virtual page...\n        if (this.writingStyle === WritingStyle.Vertical) {\n          this.scrollService.scrollTo((currentVirtualPage - 2) * pageWidth, this.bookContentElemRef.nativeElement, 'auto');\n        } else {\n          this.scrollService.scrollToX((currentVirtualPage - 2) * pageWidth, this.bookContentElemRef.nativeElement);\n        }\n        this.handleScrollEvent();\n        return;\n      }\n    }\n\n    this.setPageNum(this.pageNum - 1);\n\n    if (oldPageNum === 0) {\n      // Move to next volume/chapter automatically\n      this.loadPrevChapter();\n      return;\n    }\n\n    if (oldPageNum === this.pageNum) { return; }\n    this.loadPage();\n  }\n\n  nextPage(event?: any) {\n    if (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n    this.pagingDirection = PAGING_DIRECTION.FORWARD;\n    // We need to handle virtual paging before we increment the actual page\n    if (this.layoutMode !== BookPageLayoutMode.Default) {\n      const [currentVirtualPage, totalVirtualPages, pageWidth] = this.getVirtualPage();\n\n      if (currentVirtualPage < totalVirtualPages) {\n        // +0 apparently goes forward 1 virtual page...\n        if (this.writingStyle === WritingStyle.Vertical) {\n          this.scrollService.scrollTo( (currentVirtualPage) * pageWidth, this.bookContentElemRef.nativeElement, 'auto');\n        } else {\n          this.scrollService.scrollToX((currentVirtualPage) * pageWidth, this.bookContentElemRef.nativeElement);\n        }\n        this.handleScrollEvent();\n        return;\n      }\n    }\n\n    const oldPageNum = this.pageNum;\n    if (oldPageNum + 1 === this.maxPages) {\n      // Move to next volume/chapter automatically\n      this.loadNextChapter();\n      return;\n    }\n\n\n    this.setPageNum(this.pageNum + 1);\n\n    if (oldPageNum === this.pageNum) { return; }\n\n    this.loadPage();\n  }\n\n  /**\n   *\n   * @returns Total Page width (excluding margin)\n   */\n  getPageWidth() {\n    if (this.readingSectionElemRef == null) return 0;\n    const margin = (this.convertVwToPx(parseInt(this.pageStyles['margin-left'], 10)) * 2);\n    return this.readingSectionElemRef.nativeElement.clientWidth - margin + COLUMN_GAP;\n  }\n\n  getPageHeight() {\n    if (this.readingSectionElemRef == null) return 0;\n    const height = (parseInt(this.ColumnHeight.replace('px', ''), 10));\n\n    return height - COLUMN_GAP;\n  }\n\n  getVerticalPageWidth() {\n    const margin = (window.innerWidth * (parseInt(this.pageStyles['margin-left'], 10) / 100)) * 2;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n    return windowWidth - margin;\n  }\n\n  convertVwToPx(vwValue: number) {\n    const viewportWidth = Math.max(this.readingSectionElemRef.nativeElement.clientWidth || 0, window.innerWidth || 0);\n    return (vwValue * viewportWidth) / 100;\n  }\n\n  /**\n   * currentVirtualPage starts at 1\n   * @returns\n   */\n  getVirtualPage() {\n    if (!this.bookContentElemRef || !this.readingSectionElemRef) return [1, 1, 0];\n\n    const [scrollOffset, totalScroll] = this.getScrollOffsetAndTotalScroll();\n    const pageSize = this.getPageSize();\n    const totalVirtualPages = Math.max(1, Math.ceil(totalScroll / pageSize));\n    const delta = scrollOffset - totalScroll;\n    let currentVirtualPage = 1;\n\n    //If first virtual page, i.e. totalScroll and delta are the same value\n    if (totalScroll === delta) {\n      currentVirtualPage = 1;\n        // If second virtual page\n    } else if (totalScroll - delta === pageSize) {\n      currentVirtualPage = 2;\n      // Otherwise do math to get correct page. i.e. scroll + pageHeight/pageWidth (this accounts for first page offset)\n    } else {\n      currentVirtualPage = Math.min(Math.max(1, Math.round((scrollOffset + pageSize) / pageSize)), totalVirtualPages);\n    }\n\n    return [currentVirtualPage, totalVirtualPages, pageSize];\n  }\n\n  private getScrollOffsetAndTotalScroll() {\n    const { nativeElement: bookContent } = this.bookContentElemRef;\n    const scrollOffset = this.writingStyle === WritingStyle.Vertical\n        ? bookContent.scrollTop\n        : bookContent.scrollLeft;\n    const totalScroll = this.writingStyle === WritingStyle.Vertical\n        ? bookContent.scrollHeight\n        : bookContent.scrollWidth;\n    return [scrollOffset, totalScroll];\n  }\n\n  private getPageSize() {\n    return this.writingStyle === WritingStyle.Vertical\n        ? this.getPageHeight()\n        : this.getPageWidth();\n  }\n\n\n  getFirstVisibleElementXPath() {\n    let resumeElement: string | null = null;\n    if (this.bookContentElemRef === null) return null;\n\n    const intersectingEntries = Array.from(this.bookContentElemRef.nativeElement.querySelectorAll('div,o,p,ul,li,a,img,h1,h2,h3,h4,h5,h6,span'))\n      .filter(element => !element.classList.contains('no-observe'))\n      .filter(entry => {\n        return this.utilityService.isInViewport(entry, this.topOffset);\n      });\n\n    intersectingEntries.sort(this.sortElements);\n\n    if (intersectingEntries.length > 0) {\n      let path = this.readerService.getXPathTo(intersectingEntries[0]);\n      if (path === '') { return; }\n      if (!path.startsWith('id')) {\n      path = '//html[1]/' + path;\n      }\n      resumeElement = path;\n    }\n    return resumeElement;\n  }\n\n  /**\n   * Applies styles onto the html of the book page\n   */\n  updateReaderStyles(pageStyles: PageStyle) {\n    this.pageStyles = pageStyles;\n    if (this.bookContentElemRef === undefined || !this.bookContentElemRef.nativeElement) return;\n\n    // Before we apply styles, let's get an element on the screen so we can scroll to it after any shifts\n    const resumeElement: string | null | undefined = this.getFirstVisibleElementXPath();\n\n    // Needs to update the image size when reading mode is vertically\n    this.updateImageSizes();\n\n    // Line Height must be placed on each element in the page\n\n    // Apply page level overrides\n    Object.entries(this.pageStyles).forEach(item => {\n      if (item[1] == '100%' || item[1] == '0px' || item[1] == 'inherit') {\n        // Remove the style or skip\n        this.renderer.removeStyle(this.bookContentElemRef.nativeElement, item[0]);\n        return;\n      }\n      if (pageLevelStyles.includes(item[0])) {\n        this.renderer.setStyle(this.bookContentElemRef.nativeElement, item[0], item[1], RendererStyleFlags2.Important);\n      }\n    });\n\n    const individualElementStyles = Object.entries(this.pageStyles).filter(item => elementLevelStyles.includes(item[0]));\n    for(let i = 0; i < this.bookContentElemRef.nativeElement.children.length; i++) {\n      const elem = this.bookContentElemRef.nativeElement.children.item(i);\n      if (elem?.tagName === 'STYLE') continue;\n      individualElementStyles.forEach(item => {\n          if (item[1] == '100%' || item[1] == '0px' || item[1] == 'inherit') {\n            // Remove the style or skip\n            this.renderer.removeStyle(elem, item[0]);\n            return;\n          }\n          this.renderer.setStyle(elem, item[0], item[1], RendererStyleFlags2.Important);\n        });\n    }\n\n    // After layout shifts, we need to refocus the scroll bar\n    if (this.layoutMode !== BookPageLayoutMode.Default && resumeElement !== null && resumeElement !== undefined) {\n      this.updateWidthAndHeightCalcs();\n      this.scrollTo(resumeElement); // This works pretty well, but not perfect\n    }\n  }\n\n  /**\n   * Applies styles and classes that control theme\n   * @param theme\n   */\n  updateColorTheme(theme: BookTheme) {\n    // Remove all themes\n    Array.from(this.document.querySelectorAll('style[id^=\"brtheme-\"]')).forEach(elem => elem.remove());\n\n    this.darkMode = theme.isDarkTheme;\n\n    const styleElem = this.renderer.createElement('style');\n    styleElem.id = theme.selector;\n    styleElem.innerHTML = theme.content;\n\n\n    this.renderer.appendChild(this.document.querySelector('.reading-section'), styleElem);\n    // I need to also apply the selector onto the body so that any css variables will take effect\n    this.themeService.setBookTheme(theme.selector);\n  }\n\n  updateWidthAndHeightCalcs() {\n    this.windowHeight = Math.max(this.readingSectionElemRef.nativeElement.clientHeight, window.innerHeight);\n    this.windowWidth = Math.max(this.readingSectionElemRef.nativeElement.clientWidth, window.innerWidth);\n\n    // Recalculate if bottom action bar is needed\n    this.scrollbarNeeded = this.bookContentElemRef?.nativeElement?.clientHeight > this.reader?.nativeElement?.clientHeight;\n    this.horizontalScrollbarNeeded = this.bookContentElemRef?.nativeElement?.clientWidth > this.reader?.nativeElement?.clientWidth;\n    this.cdRef.markForCheck();\n  }\n\n  toggleDrawer() {\n    this.drawerOpen = !this.drawerOpen;\n\n    if (this.immersiveMode) {\n      this.actionBarVisible = false;\n    }\n    this.cdRef.markForCheck();\n  }\n\n  scrollTo(partSelector: string) {\n    if (partSelector.startsWith('#')) {\n      partSelector = partSelector.substr(1, partSelector.length);\n    }\n\n    let element: Element | null = null;\n    if (partSelector.startsWith('//') || partSelector.startsWith('id(')) {\n      // Part selector is a XPATH\n      element = this.getElementFromXPath(partSelector);\n    } else {\n      element = this.document.querySelector('*[id=\"' + partSelector + '\"]');\n    }\n\n    if (element === null) return;\n\n    if(this.layoutMode === BookPageLayoutMode.Default && this.writingStyle === WritingStyle.Vertical ) {\n      const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n      const scrollLeft = element.getBoundingClientRect().left + window.pageXOffset - (windowWidth - element.getBoundingClientRect().width);\n      setTimeout(() => this.scrollService.scrollToX(scrollLeft, this.reader.nativeElement, 'smooth'), 10);\n    }\n    else if ((this.layoutMode === BookPageLayoutMode.Default) && (this.writingStyle === WritingStyle.Horizontal)) {\n      const fromTopOffset = element.getBoundingClientRect().top + window.pageYOffset + TOP_OFFSET;\n      // We need to use a delay as webkit browsers (aka apple devices) don't always have the document rendered by this point\n      setTimeout(() => this.scrollService.scrollTo(fromTopOffset, this.reader.nativeElement), 10);\n    } else {\n      setTimeout(() => (element as Element).scrollIntoView({'block': 'start', 'inline': 'start'}));\n    }\n  }\n\n  getElementFromXPath(path: string) {\n    const node = this.document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    if (node?.nodeType === Node.ELEMENT_NODE) {\n      return node as Element;\n    }\n    return null;\n  }\n\n  /**\n   * Turns off Incognito mode. This can only happen once if the user clicks the icon. This will modify URL state\n   */\n   turnOffIncognito() {\n    this.incognitoMode = false;\n    const newRoute = this.readerService.getNextChapterUrl(this.router.url, this.chapterId, this.incognitoMode, this.readingListMode, this.readingListId);\n    window.history.replaceState({}, '', newRoute);\n    this.toastr.info('Incognito mode is off. Progress will now start being tracked.');\n    this.saveProgress();\n  }\n\n  toggleFullscreen() {\n    this.isFullscreen = this.readerService.checkFullscreenMode();\n    if (this.isFullscreen) {\n      this.readerService.toggleFullscreen(this.reader.nativeElement, () => {\n        this.isFullscreen = false;\n        this.cdRef.markForCheck();\n        this.renderer.removeStyle(this.reader.nativeElement, 'background');\n      });\n    } else {\n      this.readerService.toggleFullscreen(this.reader.nativeElement, () => {\n        this.isFullscreen = true;\n        this.cdRef.markForCheck();\n        // HACK: This is a bug with how browsers change the background color for fullscreen mode\n        this.renderer.setStyle(this.reader.nativeElement, 'background', this.themeService.getCssVariable('--bs-body-color'));\n        if (!this.darkMode) {\n          this.renderer.setStyle(this.reader.nativeElement, 'background', 'white');\n        }\n      });\n    }\n  }\n\n  updateWritingStyle(writingStyle: WritingStyle) {\n    this.writingStyle = writingStyle;\n    setTimeout(() => this.updateImageSizes());\n    if (this.layoutMode !== BookPageLayoutMode.Default) {\n      const lastSelector = this.lastSeenScrollPartPath;\n      setTimeout(() => {\n        this.scrollTo(lastSelector);\n      });\n    } else if (this.bookContentElemRef !== undefined) {\n      const resumeElement = this.getFirstVisibleElementXPath();\n      if (resumeElement) {\n        setTimeout(() => {\n          this.scrollTo(resumeElement);\n        });\n      }\n    }\n    this.cdRef.markForCheck();\n  }\n\n  updateLayoutMode(mode: BookPageLayoutMode) {\n    const layoutModeChanged = mode !== this.layoutMode;\n    this.layoutMode = mode;\n    this.cdRef.markForCheck();\n\n    this.clearTimeout(this.updateImageSizeTimeout);\n    this.updateImageSizeTimeout = setTimeout( () => {\n      this.updateImageSizes()\n    }, 200);\n\n    this.updateSingleImagePageStyles()\n\n    // Calculate if bottom actionbar is needed. On a timeout to get accurate heights\n    if (this.bookContentElemRef == null) {\n      setTimeout(() => this.updateLayoutMode(this.layoutMode), 10);\n      return;\n    }\n    setTimeout(() => {\n      this.scrollbarNeeded = this.bookContentElemRef?.nativeElement?.clientHeight > this.reader?.nativeElement?.clientHeight;\n      this.horizontalScrollbarNeeded = this.bookContentElemRef?.nativeElement?.clientWidth > this.reader?.nativeElement?.clientWidth;\n      this.cdRef.markForCheck();\n    });\n\n    // When I switch layout, I might need to resume the progress point.\n    if (mode === BookPageLayoutMode.Default && layoutModeChanged) {\n      const lastSelector = this.lastSeenScrollPartPath;\n      setTimeout(() => this.scrollTo(lastSelector));\n    }\n  }\n\n  updateReadingDirection(readingDirection: ReadingDirection) {\n    this.readingDirection = readingDirection;\n    this.cdRef.markForCheck();\n  }\n\n  updateImmersiveMode(immersiveMode: boolean) {\n    this.immersiveMode = immersiveMode;\n    if (this.immersiveMode && !this.drawerOpen) {\n      this.actionBarVisible = false;\n    }\n    this.updateReadingSectionHeight();\n    this.cdRef.markForCheck();\n  }\n\n  updateReadingSectionHeight() {\n    const renderer = this.renderer;\n    const elem = this.readingSectionElemRef;\n    setTimeout(() => {\n      if (renderer === undefined || elem === undefined) return;\n      if (this.immersiveMode) {\n      } else {\n        renderer.setStyle(elem, 'height', 'calc(var(--vh, 1vh) * 100 - ' + this.topOffset + 'px)', RendererStyleFlags2.Important);\n      }\n    });\n  }\n\n  // Table of Contents\n  cleanIdSelector(id: string) {\n    const tokens = id.split('/');\n    if (tokens.length > 0) {\n      return tokens[0];\n    }\n    return id;\n  }\n\n  getPageMarkers(ids: Array<string>) {\n    try {\n      return this.document.querySelectorAll(ids.map(id => '#' + this.cleanIdSelector(id)).join(', '));\n    } catch (Exception) {\n      // Fallback to anchors instead. Some books have ids that are not valid for querySelectors, so anchors should be used instead\n      return this.document.querySelectorAll(ids.map(id => '[href=\"#' + id + '\"]').join(', '));\n    }\n  }\n\n  setupPageAnchors() {\n    this.pageAnchors = {};\n    this.currentPageAnchor = '';\n    this.cdRef.markForCheck();\n    const ids = this.chapters.map(item => item.children).flat().filter(item => item.page === this.pageNum).map(item => item.part).filter(item => item.length > 0);\n    if (ids.length > 0) {\n      const elems = this.getPageMarkers(ids);\n      elems.forEach(elem => {\n        this.pageAnchors[elem.id] = elem.getBoundingClientRect().top;\n      });\n    }\n  }\n\n  // Settings Handlers\n  showPaginationOverlay(clickToPaginate: boolean) {\n    this.clickToPaginate = clickToPaginate;\n    this.cdRef.markForCheck();\n\n    this.clearTimeout(this.clickToPaginateVisualOverlayTimeout2);\n    if (!clickToPaginate) { return; }\n\n    this.clickToPaginateVisualOverlayTimeout2 = setTimeout(() => {\n      this.showClickToPaginateVisualOverlay();\n    }, 200);\n  }\n\n  clearTimeout(timeoutId: number | undefined) {\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId);\n      timeoutId = undefined;\n    }\n  }\n\n  showClickToPaginateVisualOverlay() {\n    this.clickToPaginateVisualOverlay = true;\n    this.cdRef.markForCheck();\n\n    if (this.clickToPaginateVisualOverlay && this.clickToPaginateVisualOverlayTimeout !== undefined) {\n      clearTimeout(this.clickToPaginateVisualOverlayTimeout);\n      this.clickToPaginateVisualOverlayTimeout = undefined;\n    }\n    this.clickToPaginateVisualOverlayTimeout = setTimeout(() => {\n      this.clickToPaginateVisualOverlay = false;\n      this.cdRef.markForCheck();\n    }, 1000);\n\n  }\n\n  /**\n   * Responsible for returning the class to show an overlay or not\n   * @param side\n   * @returns\n   */\n  clickOverlayClass(side: 'right' | 'left') {\n    // TODO: See if we can use RXjs or a component to manage this aka an observable that emits the highlight to show at any given time\n    if (!this.clickToPaginateVisualOverlay) {\n      return '';\n    }\n\n    if (this.readingDirection === ReadingDirection.LeftToRight) {\n      return side === 'right' ? 'highlight' : 'highlight-2';\n    }\n    return side === 'right' ? 'highlight-2' : 'highlight';\n  }\n\n  handleReaderClick(event: MouseEvent) {\n    if (!this.clickToPaginate) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.toggleMenu(event);\n      return;\n    }\n\n    const isHighlighting = window.getSelection()?.toString() != '';\n    if (isHighlighting) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n  }\n\n  toggleMenu(event: MouseEvent) {\n    const targetElement = (event.target as Element);\n    const mouseOffset = 5;\n\n    if (!this.immersiveMode) return;\n    if (targetElement.getAttribute('onclick') !== null || targetElement.getAttribute('href') !== null || targetElement.getAttribute('role') !== null || targetElement.getAttribute('kavita-part') != null) {\n      // Don't do anything, it's actionable\n      return;\n    }\n\n    if (\n      Math.abs(this.mousePosition.x - event.clientX) <= mouseOffset &&\n      Math.abs(this.mousePosition.y - event.clientY) <= mouseOffset\n    ) {\n      this.actionBarVisible = !this.actionBarVisible;\n      this.cdRef.markForCheck();\n    }\n  }\n\n  mouseDown($event: MouseEvent) {\n    this.mousePosition.x = $event.clientX;\n    this.mousePosition.y = $event.clientY;\n  }\n\n  refreshPersonalToC() {\n    this.refreshPToC.emit();\n  }\n\n  updateLineOverlayOpen(isOpen: boolean) {\n    this.isLineOverlayOpen = isOpen;\n    this.cdRef.markForCheck();\n  }\n}\n", "<div class=\"container-flex {{darkMode ? 'dark-mode' : ''}} reader-container {{ColumnLayout}} {{WritingStyleClass}}\"\n     tabindex=\"0\" #reader>\n  <ng-container *transloco=\"let t; read: 'book-reader'\">\n    <div class=\"fixed-top\" #stickyTop>\n      <a class=\"visually-hidden-focusable focus-visible\" href=\"javascript:void(0);\" (click)=\"moveFocus()\">{{t('skip-header')}}</a>\n      <ng-container [ngTemplateOutlet]=\"actionBar\"  [ngTemplateOutletContext]=\"{isTop: true}\"></ng-container>\n      <app-book-line-overlay [parent]=\"bookContainerElemRef\" *ngIf=\"page !== undefined\"\n                             [libraryId]=\"libraryId\"\n                             [volumeId]=\"volumeId\"\n                             [chapterId]=\"chapterId\"\n                             [seriesId]=\"seriesId\"\n                             [pageNumber]=\"pageNum\"\n                             (isOpen)=\"updateLineOverlayOpen($event)\"\n                             (refreshToC)=\"refreshPersonalToC()\">\n      </app-book-line-overlay>\n      <app-drawer #commentDrawer=\"drawer\" [(isOpen)]=\"drawerOpen\" [options]=\"{topOffset: topOffset}\">\n        <div header>\n          <h5 class=\"mb-0\">{{t('title')}}</h5>\n          <span style=\"font-size: 14px; color: var(--primary-color)\" tabindex=\"0\" role=\"button\" (click)=\"closeReader()\">{{t('close-reader')}}</span>\n        </div>\n        <div subheader>\n          <div class=\"pagination-cont\">\n            <ng-container *ngIf=\"layoutMode !== BookPageLayoutMode.Default\">\n              <div class=\"virt-pagination-cont\">\n                <div class=\"g-0 text-center\">\n                  {{t('page-label')}}\n                </div>\n                <div class=\"d-flex align-items-center justify-content-between text-center row g-0\" *ngIf=\"getVirtualPage() as vp\" >\n                  <button class=\"btn btn-small btn-icon col-1\" (click)=\"prevPage()\" [title]=\"t('prev-page')\">\n                    <i class=\"fa-solid fa-caret-left\" aria-hidden=\"true\"></i>\n                  </button>\n                  <div class=\"col-1\">{{vp[0]}}</div>\n                  <div class=\"col-8\">\n                    <ngb-progressbar [title]=\"t('virtual-pages')\" type=\"primary\" height=\"5px\" (click)=\"loadPage()\" [value]=\"vp[0]\" [max]=\"vp[1]\"></ngb-progressbar>\n                  </div>\n                  <div class=\"col-1 btn-icon\" (click)=\"loadPage()\" [title]=\"t('go-to-last-page')\">{{vp[1]}}</div>\n                  <button class=\"btn btn-small btn-icon col-1\" (click)=\"nextPage()\" [title]=\"t('next-page')\"><i class=\"fa-solid fa-caret-right\" aria-hidden=\"true\"></i></button>\n                </div>\n              </div>\n            </ng-container>\n\n            <div class=\"g-0 text-center\">\n              {{t('pagination-header')}}\n            </div>\n            <div class=\"d-flex align-items-center justify-content-between text-center row g-0\">\n              <button class=\"btn btn-small btn-icon col-1\" [disabled]=\"prevChapterDisabled\" (click)=\"loadPrevChapter()\" [title]=\"t('prev-chapter')\"><i class=\"fa fa-fast-backward\" aria-hidden=\"true\"></i></button>\n              <div class=\"col-1\" (click)=\"goToPage(0)\">{{pageNum}}</div>\n              <div class=\"col-8\">\n                <ngb-progressbar class=\"clickable\" [title]=\"t('go-to-page')\" (click)=\"goToPage()\" type=\"primary\" height=\"5px\" [value]=\"pageNum\" [max]=\"maxPages - 1\"></ngb-progressbar>\n              </div>\n              <div class=\"col-1 btn-icon\" (click)=\"goToPage(maxPages - 1)\" [title]=\"t('go-to-last-page')\">{{maxPages - 1}}</div>\n              <button class=\"btn btn-small btn-icon col-1\"  [disabled]=\"nextChapterDisabled\" (click)=\"loadNextChapter()\" [title]=\"t('next-chapter')\"><i class=\"fa fa-fast-forward\" aria-hidden=\"true\"></i></button>\n            </div>\n          </div>\n        </div>\n        <div body class=\"drawer-body\">\n          <nav role=\"navigation\">\n            <ul ngbNav #nav=\"ngbNav\" [(activeId)]=\"activeTabId\" class=\"reader-pills nav nav-pills mb-2\" [destroyOnHide]=\"false\">\n              <li [ngbNavItem]=\"TabID.Settings\">\n                <a ngbNavLink>{{t('settings-header')}}</a>\n                <ng-template ngbNavContent>\n                  <app-reader-settings\n                    (colorThemeUpdate)=\"updateColorTheme($event)\"\n                    (styleUpdate)=\"updateReaderStyles($event)\"\n                    (clickToPaginateChanged)=\"showPaginationOverlay($event)\"\n                    (fullscreen)=\"toggleFullscreen()\"\n                    (bookReaderWritingStyle)=\"updateWritingStyle($event)\"\n                    (layoutModeUpdate)=\"updateLayoutMode($event)\"\n                    (readingDirection)=\"updateReadingDirection($event)\"\n                    (immersiveMode)=\"updateImmersiveMode($event)\"\n                  ></app-reader-settings>\n                </ng-template>\n              </li>\n\n              <li [ngbNavItem]=\"TabID.TableOfContents\">\n                <a ngbNavLink>{{t('table-of-contents-header')}}</a>\n                <ng-template ngbNavContent>\n                  <ul #subnav=\"ngbNav\" ngbNav [(activeId)]=\"tocId\" class=\"reader-pills nav nav-pills mb-2\" [destroyOnHide]=\"false\">\n                    <li [ngbNavItem]=\"TabID.TableOfContents\">\n                      <a ngbNavLink>{{t('toc-header')}}</a>\n                      <ng-template ngbNavContent>\n                        <app-table-of-contents [chapters]=\"chapters\" [chapterId]=\"chapterId\" [pageNum]=\"pageNum\"\n                                               [currentPageAnchor]=\"currentPageAnchor\" (loadChapter)=\"loadChapterPage($event)\"></app-table-of-contents>\n                      </ng-template>\n                    </li>\n                    <li [ngbNavItem]=\"TabID.PersonalTableOfContents\">\n                      <a ngbNavLink>{{t('bookmarks-header')}}</a>\n                      <ng-template ngbNavContent>\n                        <app-personal-table-of-contents [chapterId]=\"chapterId\" [pageNum]=\"pageNum\" (loadChapter)=\"loadChapterPart($event)\"\n                                                        [tocRefresh]=\"refreshPToC\"></app-personal-table-of-contents>\n                      </ng-template>\n                    </li>\n                  </ul>\n                  <div [ngbNavOutlet]=\"subnav\" class=\"mt-3\"></div>\n                </ng-template>\n              </li>\n            </ul>\n          </nav>\n          <div [ngbNavOutlet]=\"nav\" class=\"mt-3\"></div>\n        </div>\n      </app-drawer>\n    </div>\n\n    <div #readingSection class=\"reading-section {{ColumnLayout}} {{WritingStyleClass}}\" [ngStyle]=\"{'width': PageWidthForPagination}\"\n         [ngClass]=\"{'immersive' : immersiveMode || !actionBarVisible}\" [@isLoading]=\"isLoading\" (click)=\"handleReaderClick($event)\">\n\n      <ng-container *ngIf=\"clickToPaginate && !hidePagination\">\n        <div class=\"left {{clickOverlayClass('left')}} no-observe\"\n             (click)=\"movePage(readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.BACKWARDS : PAGING_DIRECTION.FORWARD)\"\n             [ngClass]=\"{'immersive' : immersiveMode}\"\n             tabindex=\"-1\"\n             [ngStyle]=\"{height: PageHeightForPagination}\"></div>\n        <div class=\"{{scrollbarNeeded ? 'right-with-scrollbar' : 'right'}} {{clickOverlayClass('right')}} no-observe\"\n             (click)=\"movePage(readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.FORWARD : PAGING_DIRECTION.BACKWARDS)\"\n             [ngClass]=\"{'immersive' : immersiveMode}\"\n             tabindex=\"-1\"\n             [ngStyle]=\"{height: PageHeightForPagination}\"></div>\n      </ng-container>\n        <div #bookContainer class=\"book-container {{WritingStyleClass}}\"\n          [ngClass]=\"{'immersive' : immersiveMode}\"\n             (mousedown)=\"mouseDown($event)\" >\n\n        <div #readingHtml class=\"book-content {{ColumnLayout}} {{WritingStyleClass}}\"\n             [ngStyle]=\"{'max-height': ColumnHeight, 'max-width': VerticalBookContentWidth, 'width': VerticalBookContentWidth, 'column-width': ColumnWidth}\"\n             [ngClass]=\"{'immersive': immersiveMode && actionBarVisible}\"\n             [innerHtml]=\"page\" *ngIf=\"page !== undefined\" (click)=\"toggleMenu($event)\" (mousedown)=\"mouseDown($event)\" (wheel)=\"onWheel($event)\"></div>\n        <div *ngIf=\"page !== undefined && (scrollbarNeeded || layoutMode !== BookPageLayoutMode.Default) && !(writingStyle === WritingStyle.Vertical && layoutMode === BookPageLayoutMode.Default)\"\n             (click)=\"$event.stopPropagation();\"\n             [ngClass]=\"{'bottom-bar': layoutMode !== BookPageLayoutMode.Default}\">\n          <ng-container [ngTemplateOutlet]=\"actionBar\" [ngTemplateOutletContext]=\"{isTop: false}\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-template #actionBar let-isTop>\n      <div class=\"action-bar row g-0 justify-content-between\" *ngIf=\"!immersiveMode || drawerOpen || actionBarVisible\">\n        <button class=\"btn btn-outline-secondary btn-icon col-2 col-xs-1\"\n                (click)=\"!isTop && movePage(readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.BACKWARDS : PAGING_DIRECTION.FORWARD)\"\n                [disabled]=\"readingDirection === ReadingDirection.LeftToRight ? IsPrevDisabled : IsNextDisabled\"\n                title=\"{{readingDirection === ReadingDirection.LeftToRight ? t('previous') : t('next')}} Page\">\n          <i class=\"fa {{(readingDirection === ReadingDirection.LeftToRight ? IsPrevChapter : IsNextChapter) ? 'fa-angle-double-left' : 'fa-angle-left'}} {{readingDirection === ReadingDirection.RightToLeft ? 'next-page-highlight' : ''}}\" aria-hidden=\"true\"></i>\n        </button>\n        <button *ngIf=\"!this.adhocPageHistory.isEmpty()\" class=\"btn btn-outline-secondary btn-icon col-2 col-xs-1\" (click)=\"goBack()\" [title]=\"t('go-back')\">\n          <i class=\"fa fa-reply\" aria-hidden=\"true\"></i>\n        </button>\n        <button class=\"btn btn-secondary col-2 col-xs-1\" (click)=\"toggleDrawer()\">\n          <i class=\"fa fa-bars\" aria-hidden=\"true\"></i></button>\n        <div class=\"book-title col-2 d-none d-sm-block\">\n          @if(isLoading) {\n            <div class=\"spinner-border spinner-border-sm text-primary\" style=\"border-radius: 50%;\" role=\"status\">\n              <span class=\"visually-hidden\">{{t('loading-book')}}</span>\n            </div>\n          } @else {\n            <span *ngIf=\"incognitoMode\" (click)=\"turnOffIncognito()\" role=\"button\" [attr.aria-label]=\"t('incognito-mode-alt')\">\n                (<i class=\"fa fa-glasses\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">{{t('incognito-mode-label')}}</span>)</span>\n            <span class=\"book-title-text ms-1\" [ngbTooltip]=\"bookTitle\">{{bookTitle}}</span>\n          }\n        </div>\n        <button class=\"btn btn-secondary col-2 col-xs-1\" (click)=\"closeReader()\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i></button>\n        <button class=\"btn btn-outline-secondary btn-icon col-2  col-xs-1\"\n                [disabled]=\"readingDirection === ReadingDirection.LeftToRight ? IsNextDisabled : IsPrevDisabled\"\n                (click)=\"!isTop && movePage(readingDirection === ReadingDirection.LeftToRight ? PAGING_DIRECTION.FORWARD : PAGING_DIRECTION.BACKWARDS)\"\n                 title=\"{{readingDirection === ReadingDirection.LeftToRight ? t('next') : t('previous')}} Page\">\n          <i class=\"fa {{(readingDirection === ReadingDirection.LeftToRight ? IsNextChapter : IsPrevChapter) ? 'fa-angle-double-right' : 'fa-angle-right'}} {{readingDirection === ReadingDirection.LeftToRight ? 'next-page-highlight' : ''}}\" aria-hidden=\"true\"></i>\n        </button>\n      </div>\n    </ng-template>\n  </ng-container>\n</div>\n", "import { Routes } from '@angular/router';\nimport { BookReaderComponent } from '../book-reader/_components/book-reader/book-reader.component';\n\nexport const routes: Routes = [\n  {\n      path: ':chapterId',\n      component: BookReaderComponent,\n  }\n];\n\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r1", "\u0275\u0275listener", "chapter_r3", "\u0275\u0275restoreView", "_r2", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "loadChapterPage", "page", "part", "title", "\u0275\u0275template", "TableOfContentsComponent_ng_container_0_div_3_li_2_Template", "\u0275\u0275property", "chapters", "children", "chapter_r8", "_r7", "\u0275\u0275classMap", "cleanIdSelector", "currentPageAnchor", "chapterGroup_r6", "_r5", "TableOfContentsComponent_ng_container_0_ng_template_4_ul_0_ul_3_Template", "pageNum", "\u0275\u0275textInterpolate1", "TableOfContentsComponent_ng_container_0_ng_template_4_ul_0_Template", "\u0275\u0275elementContainerStart", "TableOfContentsComponent_ng_container_0_div_2_Template", "TableOfContentsComponent_ng_container_0_div_3_Template", "TableOfContentsComponent_ng_container_0_ng_template_4_Template", "\u0275\u0275templateRefExtractor", "length", "nestedChildren_r9", "TableOfContentsComponent", "constructor", "loadChapter", "EventEmitter", "id", "tokens", "split", "emit", "selectors", "inputs", "chapterId", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "TableOfContentsComponent_ng_container_0_Template", "NgIf", "NgFor", "TranslocoDirective", "styles", "_TableOfContentsComponent", "\u0275\u0275elementContainerStart", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "copy", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "switchMode", "BookLineOverlayMode", "Bookmark", "reset", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r3", "\u0275\u0275textInterpolate1", "\u0275\u0275template", "BookLineOverlayComponent_ng_container_0_div_1_ng_container_4_div_6_div_1_Template", "\u0275\u0275property", "tmp_5_0", "bookmarkForm", "get", "errors", "required", "_r4", "createPTOC", "BookLineOverlayComponent_ng_container_0_div_1_ng_container_4_div_6_Template", "\u0275\u0275classProp", "invalid", "touched", "dirty", "BookLineOverlayComponent_ng_container_0_div_1_ng_container_3_Template", "BookLineOverlayComponent_ng_container_0_div_1_ng_container_4_Template", "mode", "None", "BookLineOverlayComponent_ng_container_0_div_1_Template", "selectedText", "length", "BookLineOverlayComponent", "constructor", "elementRef", "toastr", "pageNumber", "refreshToC", "EventEmitter", "isOpen", "xPath", "FormGroup", "name", "FormControl", "Validators", "destroyRef", "inject", "DestroyRef", "cdRef", "ChangeDetectorRef", "readerService", "ReaderService", "handleKeyPress", "event", "key", "KEY_CODES", "ESC_KEY", "markForCheck", "stopPropagation", "preventDefault", "ngOnInit", "parent", "mouseUp$", "fromEvent", "nativeElement", "touchEnd$", "merge", "pipe", "takeUntilDestroyed", "subscribe", "handleEvent", "selection", "window", "getSelection", "target", "toString", "trim", "MouseEvent", "button", "getXPathTo", "emit", "setValue", "focusOnBookmarkInput", "createPersonalToC", "libraryId", "seriesId", "volumeId", "chapterId", "value", "catchError", "err", "of", "setTimeout", "querySelector", "focus", "removeAllRanges", "__async", "navigator", "clipboard", "writeText", "info", "translate", "\u0275\u0275directiveInject", "ElementRef", "ToastrService", "selectors", "hostBindings", "rf", "ctx", "$event", "\u0275\u0275resolveWindow", "BookLineOverlayComponent_ng_container_0_Template", "CommonModule", "NgIf", "NgSwitch", "NgSwitchCase", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "TranslocoDirective", "styles", "changeDetection", "_BookLineOverlayComponent", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r1", "\u0275\u0275listener", "$event", "bookmark_r6", "\u0275\u0275restoreView", "_r5", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "loadChapterPage", "pageNumber", "bookScrollId", "\u0275\u0275resetView", "stopPropagation", "removeBookmark", "\u0275\u0275element", "\u0275\u0275property", "title", "\u0275\u0275textInterpolate1", "\u0275\u0275pureFunction1", "_c1", "page_r3", "_r2", "\u0275\u0275template", "PersonalTableOfContentsComponent_ng_container_0_li_4_li_4_Template", "_c0", "bookmarks", "\u0275\u0275elementContainerStart", "PersonalTableOfContentsComponent_ng_container_0_div_2_Template", "PersonalTableOfContentsComponent_ng_container_0_li_4_Template", "Pages", "length", "PersonalTableOfContentsComponent", "Object", "keys", "map", "p", "parseInt", "constructor", "document", "pageNum", "loadChapter", "EventEmitter", "readerService", "inject", "ReaderService", "cdRef", "ChangeDetectorRef", "destroyRef", "DestroyRef", "ngOnInit", "tocRefresh", "pipe", "takeUntilDestroyed", "subscribe", "load", "getPersonalToC", "chapterId", "res", "forEach", "t", "hasOwnProperty", "push", "markForCheck", "scrollPart", "emit", "bookmark", "removePersonalToc", "filter", "\u0275\u0275directiveInject", "DOCUMENT", "selectors", "inputs", "outputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "PersonalTableOfContentsComponent_ng_container_0_Template", "CommonModule", "NgForOf", "NgIf", "NgbTooltip", "TranslocoDirective", "styles", "changeDetection", "_PersonalTableOfContentsComponent", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updateLineOverlayOpen", "refreshPersonalToC", "\u0275\u0275elementEnd", "\u0275\u0275property", "bookContainerElemRef", "libraryId", "volumeId", "chapterId", "seriesId", "pageNum", "_r4", "prevPage", "\u0275\u0275element", "\u0275\u0275text", "loadPage", "nextPage", "\u0275\u0275advance", "t_r6", "\u0275\u0275textInterpolate", "vp_r5", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "BookReaderComponent_ng_container_2_ng_container_16_div_4_Template", "\u0275\u0275textInterpolate1", "getVirtualPage", "_r7", "updateColorTheme", "updateReaderStyles", "showPaginationOverlay", "toggleFullscreen", "updateWritingStyle", "updateLayoutMode", "updateReadingDirection", "updateImmersiveMode", "_r9", "loadChapterPage", "chapters", "currentPageAnchor", "_r10", "loadChapterPart", "refreshPToC", "\u0275\u0275twoWayListener", "_r8", "i0", "\u0275\u0275twoWayBindingSet", "tocId", "BookReaderComponent_ng_container_2_ng_template_41_ng_template_5_Template", "BookReaderComponent_ng_container_2_ng_template_41_ng_template_9_Template", "\u0275\u0275twoWayProperty", "TabID", "TableOfContents", "PersonalTableOfContents", "subnav_r11", "_r12", "movePage", "readingDirection", "ReadingDirection", "LeftToRight", "PAGING_DIRECTION", "BACKWARDS", "FORWARD", "\u0275\u0275classMapInterpolate1", "clickOverlayClass", "\u0275\u0275pureFunction1", "_c8", "immersiveMode", "_c9", "PageHeightForPagination", "\u0275\u0275classMapInterpolate2", "scrollbarNeeded", "_r13", "toggleMenu", "mouseDown", "onWheel", "ColumnLayout", "WritingStyleClass", "\u0275\u0275pureFunction4", "_c10", "ColumnHeight", "VerticalBookContentWidth", "ColumnWidth", "actionBarVisible", "page", "\u0275\u0275sanitizeHtml", "_r14", "stopPropagation", "\u0275\u0275elementContainer", "_c11", "layoutMode", "BookPageLayoutMode", "Default", "actionBar_r15", "\u0275\u0275pureFunction0", "_c12", "_r18", "goBack", "_r19", "turnOffIncognito", "BookReaderComponent_ng_container_2_ng_template_50_div_0_Conditional_8_span_0_Template", "incognitoMode", "bookTitle", "_r16", "isTop_r17", "$implicit", "BookReaderComponent_ng_container_2_ng_template_50_div_0_button_3_Template", "toggleDrawer", "BookReaderComponent_ng_container_2_ng_template_50_div_0_Conditional_7_Template", "BookReaderComponent_ng_container_2_ng_template_50_div_0_Conditional_8_Template", "closeReader", "\u0275\u0275propertyInterpolate1", "IsPrevDisabled", "IsNextDisabled", "IsPrevChapter", "IsNextChapter", "RightToLeft", "adhocPageHistory", "isEmpty", "\u0275\u0275conditional", "isLoading", "BookReaderComponent_ng_container_2_ng_template_50_div_0_Template", "drawerOpen", "_r1", "moveFocus", "BookReaderComponent_ng_container_2_app_book_line_overlay_6_Template", "BookReaderComponent_ng_container_2_ng_container_16_Template", "loadPrevChapter", "goToPage", "maxPages", "loadNextChapter", "activeTabId", "BookReaderComponent_ng_container_2_ng_template_37_Template", "BookReaderComponent_ng_container_2_ng_template_41_Template", "handleReaderClick", "BookReaderComponent_ng_container_2_ng_container_45_Template", "BookReaderComponent_ng_container_2_div_48_Template", "BookReaderComponent_ng_container_2_div_49_Template", "BookReaderComponent_ng_container_2_ng_template_50_Template", "\u0275\u0275templateRefExtractor", "_c5", "undefined", "_c6", "topOffset", "prevChapterDisabled", "nextChapterDisabled", "Settings", "nav_r20", "_c7", "PageWidthForPagination", "clickToPaginate", "hidePagination", "writingStyle", "WritingStyle", "Vertical", "TOP_OFFSET", "COLUMN_GAP", "pageLevelStyles", "elementLevelStyles", "BookReaderComponent", "isPrevPageDisabled", "isNextPageDisabled", "currentVirtualPage", "totalVirtualPages", "_", "condition", "nextPageDisabled", "nextChapterId", "CHAPTER_ID_DOESNT_EXIST", "prevPageDisabled", "prevChapterId", "bookContentElemRef", "base", "windowHeight", "windowWidth", "Column1", "Column2", "Horizontal", "getVerticalPageWidth", "horizontalScrollbarNeeded", "nativeElement", "clientHeight", "scrollHeight", "constructor", "document", "route", "inject", "ActivatedRoute", "router", "Router", "accountService", "AccountService", "seriesService", "SeriesService", "readerService", "ReaderService", "renderer", "Renderer2", "navService", "NavService", "toastr", "ToastrService", "domSanitizer", "DomSanitizer", "bookService", "BookService", "memberService", "MemberService", "scrollService", "ScrollService", "utilityService", "UtilityService", "libraryService", "LibraryService", "themeService", "ThemeService", "cdRef", "ChangeDetectorRef", "readingListId", "readingListMode", "Stack", "continuousChaptersStack", "isSingleImagePage", "isLineOverlayOpen", "clickToPaginateVisualOverlay", "clickToPaginateVisualOverlayTimeout", "clickToPaginateVisualOverlayTimeout2", "updateImageSizeTimeout", "CHAPTER_ID_NOT_FETCHED", "nextChapterPrefetched", "prevChapterPrefetched", "darkMode", "pageAnchors", "lastSeenScrollPartPath", "libraryType", "LibraryType", "Book", "isFullscreen", "mousePosition", "x", "y", "pagingDirection", "EventEmitter", "destroyRef", "DestroyRef", "hideNavBar", "clearThemes", "hideSideNav", "markForCheck", "ngAfterViewInit", "fromEvent", "reader", "pipe", "debounceTime", "takeUntilDestroyed", "subscribe", "event", "handleScrollEvent", "distinctUntilChanged", "tap", "e", "selection", "window", "getSelection", "toString", "trim", "Object", "keys", "length", "verticalOffset", "scrollTop", "scrollPosition", "body", "offsetHeight", "alreadyReached", "values", "filter", "i", "xpath", "getFirstVisibleElementXPath", "saveProgress", "tempPageNum", "take", "ngOnDestroy", "clearTimeout", "disableWakeLock", "clearBookTheme", "currentTheme$", "theme", "setTheme", "name", "showNavBar", "showSideNav", "ngOnInit", "snapshot", "paramMap", "get", "navigateByUrl", "parseInt", "queryParamMap", "hasReadingProgress", "hasProgress", "info", "translate", "currentUser$", "user", "init", "getBookInfo", "seriesFormat", "MangaFormat", "EPUB", "params", "getQueryParamsObject", "navigate", "getNavigationArray", "queryParams", "forkJoin", "chapter", "getChapter", "progress", "getProgress", "getBookChapters", "results", "pages", "bookScrollId", "push", "getLibraryType", "type", "updateImageSizes", "getNextChapter", "setPageNum", "getPrevChapter", "enableWakeLock", "setTimeout", "onResize", "updateWidthAndHeightCalcs", "resumeElement", "scrollTo", "handleKeyPress", "activeElement", "tagName", "key", "KEY_CODES", "RIGHT_ARROW", "LEFT_ARROW", "ESC_KEY", "SPACE", "preventDefault", "G", "F", "deltaY", "scrollToX", "scrollLeft", "sortElements", "a", "b", "aTop", "getBoundingClientRect", "top", "bTop", "loadChapter", "pop", "prevChapter", "peek", "direction", "newRoute", "getNextChapterUrl", "url", "history", "replaceState", "msg", "entity", "formatChapterName", "toLowerCase", "timeOut", "warning", "part", "scrollPart", "addLinkClickHandlers", "readingSectionElemRef", "querySelectorAll", "forEach", "link", "addEventListener", "targetElem", "target", "nodeName", "parentNode", "attributes", "hasOwnProperty", "value", "partValue", "elems", "getElementsByClassName", "focus", "promptForPage", "question", "totalPages", "goToPageNum", "prompt", "getBookPage", "content", "replace", "checkSingleImagePage", "updateSingleImagePageStyles", "bypassSecurityTrustHtml", "pageStyles", "imgs", "setupPage", "Promise", "all", "Array", "from", "img", "complete", "map", "resolve", "onload", "onerror", "then", "isVerticalWritingStyle", "height", "maxHeight", "maxWidth", "documentElement", "style", "setProperty", "htmlContent", "doc", "DOMParser", "parseFromString", "querySelector", "innerText", "setupPageAnchors", "clientWidth", "scrollWidth", "Math", "max", "min", "getChapterInfo", "catchError", "err", "of", "res", "oldPageNum", "pageWidth", "getPageWidth", "margin", "convertVwToPx", "getPageHeight", "innerWidth", "vwValue", "viewportWidth", "scrollOffset", "totalScroll", "getScrollOffsetAndTotalScroll", "pageSize", "getPageSize", "ceil", "delta", "round", "bookContent", "intersectingEntries", "element", "classList", "contains", "entry", "isInViewport", "sort", "path", "getXPathTo", "startsWith", "entries", "item", "removeStyle", "includes", "setStyle", "RendererStyleFlags2", "Important", "individualElementStyles", "children", "elem", "remove", "isDarkTheme", "styleElem", "createElement", "id", "selector", "innerHTML", "appendChild", "setBookTheme", "innerHeight", "partSelector", "substr", "getElementFromXPath", "left", "pageXOffset", "width", "fromTopOffset", "pageYOffset", "scrollIntoView", "node", "evaluate", "XPathResult", "FIRST_ORDERED_NODE_TYPE", "singleNodeValue", "nodeType", "Node", "ELEMENT_NODE", "checkFullscreenMode", "getCssVariable", "lastSelector", "mode", "layoutModeChanged", "updateReadingSectionHeight", "cleanIdSelector", "tokens", "split", "getPageMarkers", "ids", "join", "flat", "showClickToPaginateVisualOverlay", "timeoutId", "side", "targetElement", "mouseOffset", "getAttribute", "abs", "clientX", "clientY", "emit", "isOpen", "\u0275\u0275directiveInject", "DOCUMENT", "selectors", "viewQuery", "rf", "ctx", "\u0275\u0275resolveWindow", "BookReaderComponent_ng_container_2_Template", "\u0275\u0275classMapInterpolate3", "NgTemplateOutlet", "DrawerComponent", "NgIf", "NgbProgressbar", "NgbNav", "NgbNavItem", "NgbNavItemRole", "NgbNavLink", "NgbNavContent", "ReaderSettingsComponent", "TableOfContentsComponent", "NgbNavOutlet", "NgStyle", "NgClass", "NgbTooltip", "BookLineOverlayComponent", "PersonalTableOfContentsComponent", "TranslocoDirective", "styles", "data", "animation", "trigger", "state", "opacity", "transition", "animate", "changeDetection", "_BookReaderComponent", "routes", "path", "component", "BookReaderComponent"]
}
