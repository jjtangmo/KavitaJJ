{
  "version": 3,
  "sources": ["src/app/_models/scrobbling/scrobble-event-filter.ts", "src/app/_single-module/user-scrobble-history/user-scrobble-history.component.ts", "src/app/_single-module/user-scrobble-history/user-scrobble-history.component.html"],
  "sourcesContent": ["export enum ScrobbleEventSortField {\n  None = 0,\n  Created = 1,\n  LastModified = 2,\n  Type= 3,\n  Series = 4,\n  IsProcessed = 5\n}\n\nexport interface ScrobbleEventFilter {\n  field: ScrobbleEventSortField;\n  isDescending: boolean;\n  query?: string;\n}\n", "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, inject, OnInit} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {ScrobbleProvider, ScrobblingService} from \"../../_services/scrobbling.service\";\nimport {takeUntilDestroyed} from \"@angular/core/rxjs-interop\";\nimport {ScrobbleEvent, ScrobbleEventType} from \"../../_models/scrobbling/scrobble-event\";\nimport {ScrobbleEventTypePipe} from \"../scrobble-event-type.pipe\";\nimport {NgbPagination, NgbTooltip} from \"@ng-bootstrap/ng-bootstrap\";\nimport {ScrobbleEventSortField} from \"../../_models/scrobbling/scrobble-event-filter\";\nimport {debounceTime, take} from \"rxjs/operators\";\nimport {PaginatedResult, Pagination} from \"../../_models/pagination\";\nimport {SortableHeader, SortEvent} from \"../table/_directives/sortable-header.directive\";\nimport {FormControl, FormGroup, ReactiveFormsModule} from \"@angular/forms\";\nimport {translate, TranslocoModule} from \"@ngneat/transloco\";\nimport {DefaultValuePipe} from \"../../_pipes/default-value.pipe\";\nimport {TranslocoLocaleModule} from \"@ngneat/transloco-locale\";\nimport {UtcToLocalTimePipe} from \"../../_pipes/utc-to-local-time.pipe\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {LooseLeafOrDefaultNumber, SpecialVolumeNumber} from \"../../_models/chapter\";\n\n@Component({\n  selector: 'app-user-scrobble-history',\n  standalone: true,\n  imports: [CommonModule, ScrobbleEventTypePipe, NgbPagination, ReactiveFormsModule, SortableHeader, TranslocoModule,\n    DefaultValuePipe, TranslocoLocaleModule, UtcToLocalTimePipe, NgbTooltip],\n  templateUrl: './user-scrobble-history.component.html',\n  styleUrls: ['./user-scrobble-history.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserScrobbleHistoryComponent implements OnInit {\n\n  private readonly scrobblingService = inject(ScrobblingService);\n  private readonly cdRef = inject(ChangeDetectorRef);\n  private readonly destroyRef = inject(DestroyRef);\n  private readonly toastr = inject(ToastrService);\n  protected readonly ScrobbleEventType = ScrobbleEventType;\n\n  pagination: Pagination | undefined;\n  events: Array<ScrobbleEvent> = [];\n  formGroup: FormGroup = new FormGroup({\n    'filter': new FormControl('', [])\n  });\n\n  ngOnInit() {\n    this.loadPage({column: 'createdUtc', direction: 'desc'});\n\n    this.scrobblingService.hasTokenExpired(ScrobbleProvider.AniList).subscribe(hasExpired => {\n      if (hasExpired) {\n        this.toastr.error(translate('toasts.anilist-token-expired'));\n      }\n      this.cdRef.markForCheck();\n    });\n\n    this.formGroup.get('filter')?.valueChanges.pipe(debounceTime(200), takeUntilDestroyed(this.destroyRef)).subscribe(query => {\n      this.loadPage();\n    })\n  }\n\n  onPageChange(pageNum: number) {\n    let prevPage = 0;\n    if (this.pagination) {\n      prevPage = this.pagination.currentPage;\n      this.pagination.currentPage = pageNum;\n    }\n    if (prevPage !== pageNum) {\n      this.loadPage();\n    }\n\n  }\n\n  updateSort(sortEvent: SortEvent<ScrobbleEvent>) {\n    this.loadPage(sortEvent);\n  }\n\n  loadPage(sortEvent?: SortEvent<ScrobbleEvent>) {\n    if (sortEvent && this.pagination) {\n      this.pagination.currentPage = 1;\n      this.cdRef.markForCheck();\n    }\n    const page = this.pagination?.currentPage || 0;\n    const pageSize = this.pagination?.itemsPerPage || 0;\n    const isDescending = sortEvent?.direction === 'desc';\n    const field = this.mapSortColumnField(sortEvent?.column);\n    const query = this.formGroup.get('filter')?.value;\n\n    this.scrobblingService.getScrobbleEvents({query, field, isDescending}, page, pageSize)\n      .pipe(take(1))\n      .subscribe((result: PaginatedResult<ScrobbleEvent[]>) => {\n      this.events = result.result;\n      this.pagination = result.pagination;\n      this.cdRef.markForCheck();\n    });\n  }\n\n  private mapSortColumnField(column: string | undefined) {\n    switch (column) {\n      case 'createdUtc': return ScrobbleEventSortField.Created;\n      case 'isProcessed': return ScrobbleEventSortField.IsProcessed;\n      case 'lastModifiedUtc': return ScrobbleEventSortField.LastModified;\n      case 'seriesName': return ScrobbleEventSortField.Series;\n    }\n    return ScrobbleEventSortField.None;\n  }\n\n\n    protected readonly SpecialVolumeNumber = SpecialVolumeNumber;\n  protected readonly LooseLeafOrDefaultNumber = LooseLeafOrDefaultNumber;\n}\n", "<ng-container *transloco=\"let t; read:'user-scrobble-history'\">\n  <h5>{{t('title')}}</h5>\n  <p>{{t('description')}}</p>\n  <div class=\"row g-0 mb-2\">\n    <div class=\"col-md-10\">\n      <form [formGroup]=\"formGroup\">\n        <div class=\"form-group pe-1\">\n          <label for=\"filter\">{{t('filter-label')}}</label>\n          <input id=\"filter\" type=\"text\" class=\"form-control\" formControlName=\"filter\" autocomplete=\"off\"/>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-md-2 mt-4\">\n      @if(pagination) {\n        <ngb-pagination [(page)]=\"pagination.currentPage\"\n                        [pageSize]=\"pagination.itemsPerPage\"\n                        [collectionSize]=\"pagination.totalItems\"\n                        (pageChange)=\"onPageChange($event)\"\n        ></ngb-pagination>\n      }\n    </div>\n  </div>\n  <table class=\"table table-striped table-hover table-sm scrollable\">\n    <thead>\n    <tr>\n      <th scope=\"col\" sortable=\"createdUtc\" (sort)=\"updateSort($event)\">\n        {{t('created-header')}}\n      </th>\n      <th scope=\"col\" sortable=\"lastModifiedUtc\" (sort)=\"updateSort($event)\" direction=\"desc\">\n        {{t('last-modified-header')}}\n      </th>\n      <th scope=\"col\">\n        {{t('type-header')}}\n      </th>\n      <th scope=\"col\" sortable=\"seriesName\" (sort)=\"updateSort($event)\">\n        {{t('series-header')}}\n      </th>\n      <th scope=\"col\">\n        {{t('data-header')}}\n      </th>\n      <th scope=\"col\">\n        {{t('is-processed-header')}}\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    @if (events.length === 0) {\n      <tr>\n        <td colspan=\"6\">{{t('no-data')}}</td>\n      </tr>\n    }\n\n    <tr *ngFor=\"let item of events; let idx = index;\">\n      <td>\n        {{item.createdUtc | utcToLocalTime  | defaultValue}}\n      </td>\n      <td>\n        {{item.lastModifiedUtc | utcToLocalTime | defaultValue }}\n      </td>\n      <td>\n        {{item.scrobbleEventType | scrobbleEventType}}\n      </td>\n      <td id=\"scrobble-history--{{idx}}\">\n        <a href=\"/library/{{item.libraryId}}/series/{{item.seriesId}}\" target=\"_blank\">{{item.seriesName}}</a>\n      </td>\n      <td>\n        @switch (item.scrobbleEventType) {\n          @case (ScrobbleEventType.ChapterRead) {\n            @if(item.volumeNumber === LooseLeafOrDefaultNumber) {\n              {{t('chapter-num', {num: item.chapterNumber})}}\n            }\n            @else if (item.chapterNumber === LooseLeafOrDefaultNumber) {\n              {{t('volume-num', {num: item.volumeNumber})}}\n            }\n            @else if (item.chapterNumber === LooseLeafOrDefaultNumber && item.volumeNumber === SpecialVolumeNumber) {\n              Special\n            }\n            @else {\n              {{t('volume-and-chapter-num', {v: item.volumeNumber, n: item.chapterNumber})}}\n            }\n          }\n          @case (ScrobbleEventType.ScoreUpdated) {\n            {{t('rating', {r: item.rating})}}\n          }\n          @default {\n            {{t('not-applicable')}}\n          }\n        }\n      </td>\n      <td>\n        @if(item.isProcessed) {\n          <i class=\"fa-solid fa-check-circle icon\" aria-hidden=\"true\"></i>\n        } @else if (item.isErrored) {\n          <i class=\"fa-solid fa-circle-exclamation icon error\" aria-hidden=\"true\" [ngbTooltip]=\"item.errorDetails\"></i>\n        } @else {\n          <i class=\"fa-regular fa-circle icon\" aria-hidden=\"true\"></i>\n        }\n        <span class=\"visually-hidden\" attr.aria-labelledby=\"scrobble-history--{{idx}}\">\n          {{item.isProcessed ? t('processed') : t('not-processed')}}\n        </span>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</ng-container>\n"],
  "mappings": "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",
  "names": ["ScrobbleEventSortField", "\u0275\u0275elementStart", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r2", "ctx_r2", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "pagination", "currentPage", "\u0275\u0275resetView", "\u0275\u0275listener", "onPageChange", "\u0275\u0275elementEnd", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "itemsPerPage", "totalItems", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "t_r4", "\u0275\u0275textInterpolate1", "\u0275\u0275pureFunction1", "_c0", "item_r5", "chapterNumber", "volumeNumber", "\u0275\u0275pureFunction2", "_c1", "\u0275\u0275template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_16_Conditional_0_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_16_Conditional_1_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_16_Conditional_2_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_16_Conditional_3_Template", "\u0275\u0275conditional", "LooseLeafOrDefaultNumber", "SpecialVolumeNumber", "_c2", "rating", "\u0275\u0275element", "errorDetails", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_16_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_17_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Case_18_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Conditional_20_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Conditional_21_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Conditional_22_Template", "\u0275\u0275pipeBind1", "createdUtc", "lastModifiedUtc", "scrobbleEventType", "\u0275\u0275propertyInterpolate1", "idx_r6", "\u0275\u0275propertyInterpolate2", "libraryId", "seriesId", "\u0275\u0275sanitizeUrl", "seriesName", "tmp_11_0", "ScrobbleEventType", "ChapterRead", "ScoreUpdated", "isProcessed", "isErrored", "\u0275\u0275attributeInterpolate1", "\u0275\u0275elementContainerStart", "UserScrobbleHistoryComponent_ng_container_0_Conditional_13_Template", "_r1", "updateSort", "UserScrobbleHistoryComponent_ng_container_0_Conditional_30_Template", "UserScrobbleHistoryComponent_ng_container_0_tr_31_Template", "formGroup", "events", "length", "UserScrobbleHistoryComponent", "constructor", "scrobblingService", "inject", "ScrobblingService", "cdRef", "ChangeDetectorRef", "destroyRef", "DestroyRef", "toastr", "ToastrService", "FormGroup", "FormControl", "ngOnInit", "loadPage", "column", "direction", "hasTokenExpired", "ScrobbleProvider", "AniList", "subscribe", "hasExpired", "error", "translate", "markForCheck", "get", "valueChanges", "pipe", "debounceTime", "takeUntilDestroyed", "query", "pageNum", "prevPage", "sortEvent", "page", "pageSize", "isDescending", "field", "mapSortColumnField", "value", "getScrobbleEvents", "take", "result", "ScrobbleEventSortField", "Created", "IsProcessed", "LastModified", "Series", "None", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "UserScrobbleHistoryComponent_ng_container_0_Template", "CommonModule", "NgForOf", "ScrobbleEventTypePipe", "NgbPagination", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "FormGroupDirective", "FormControlName", "SortableHeader", "TranslocoModule", "TranslocoDirective", "DefaultValuePipe", "TranslocoLocaleModule", "UtcToLocalTimePipe", "NgbTooltip", "styles", "changeDetection", "_UserScrobbleHistoryComponent"]
}
