{
  "version": 3,
  "sources": ["src/app/admin/settings.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {map, of} from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { TextResonse } from '../_types/text-response';\nimport { ServerSettings } from './_models/server-settings';\n\n/**\n * Used only for the Test Email Service call\n */\nexport interface EmailTestResult {\n  successful: boolean;\n  errorMessage: string;\n  emailAddress: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n\n  baseUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getServerSettings() {\n    return this.http.get<ServerSettings>(this.baseUrl + 'settings');\n  }\n\n  updateServerSettings(model: ServerSettings) {\n    return this.http.post<ServerSettings>(this.baseUrl + 'settings', model);\n  }\n\n  resetServerSettings() {\n    return this.http.post<ServerSettings>(this.baseUrl + 'settings/reset', {});\n  }\n\n  resetIPAddressesSettings() {\n    return this.http.post<ServerSettings>(this.baseUrl + 'settings/reset-ip-addresses', {});\n  }\n\n  resetBaseUrl() {\n    return this.http.post<ServerSettings>(this.baseUrl + 'settings/reset-base-url', {});\n  }\n\n  testEmailServerSettings() {\n    return this.http.post<EmailTestResult>(this.baseUrl + 'settings/test-email-url', {});\n  }\n\n  isEmailSetup() {\n    return this.http.get<string>(this.baseUrl + 'server/is-email-setup', TextResonse).pipe(map(d => d == \"true\"));\n  }\n\n  getTaskFrequencies() {\n    return this.http.get<string[]>(this.baseUrl + 'settings/task-frequencies');\n  }\n\n  getLoggingLevels() {\n    return this.http.get<string[]>(this.baseUrl + 'settings/log-levels');\n  }\n\n  getLibraryTypes() {\n    return this.http.get<string[]>(this.baseUrl + 'settings/library-types');\n  }\n\n  getOpdsEnabled() {\n    return this.http.get<string>(this.baseUrl + 'settings/opds-enabled', TextResonse).pipe(map(d => d === 'true'));\n  }\n\n  isValidCronExpression(val: string) {\n    if (val === '' || val === undefined || val === null) return of(false);\n    return this.http.get<string>(this.baseUrl + 'settings/is-valid-cron?cronExpression=' + val, TextResonse).pipe(map(d => d === 'true'));\n\n  }\n}\n"],
  "mappings": "uFAmBA,IAAaA,GAAe,IAAA,CAAtB,IAAOA,EAAP,MAAOA,CAAe,CAI1BC,YAAoBC,EAAgB,CAAhB,KAAAA,KAAAA,EAFpB,KAAAC,QAAUC,EAAYC,MAEkB,CAExCC,mBAAiB,CACf,OAAO,KAAKJ,KAAKK,IAAoB,KAAKJ,QAAU,UAAU,CAChE,CAEAK,qBAAqBC,EAAqB,CACxC,OAAO,KAAKP,KAAKQ,KAAqB,KAAKP,QAAU,WAAYM,CAAK,CACxE,CAEAE,qBAAmB,CACjB,OAAO,KAAKT,KAAKQ,KAAqB,KAAKP,QAAU,iBAAkB,CAAA,CAAE,CAC3E,CAEAS,0BAAwB,CACtB,OAAO,KAAKV,KAAKQ,KAAqB,KAAKP,QAAU,8BAA+B,CAAA,CAAE,CACxF,CAEAU,cAAY,CACV,OAAO,KAAKX,KAAKQ,KAAqB,KAAKP,QAAU,0BAA2B,CAAA,CAAE,CACpF,CAEAW,yBAAuB,CACrB,OAAO,KAAKZ,KAAKQ,KAAsB,KAAKP,QAAU,0BAA2B,CAAA,CAAE,CACrF,CAEAY,cAAY,CACV,OAAO,KAAKb,KAAKK,IAAY,KAAKJ,QAAU,wBAAyBa,CAAW,EAAEC,KAAKC,EAAIC,GAAKA,GAAK,MAAM,CAAC,CAC9G,CAEAC,oBAAkB,CAChB,OAAO,KAAKlB,KAAKK,IAAc,KAAKJ,QAAU,2BAA2B,CAC3E,CAEAkB,kBAAgB,CACd,OAAO,KAAKnB,KAAKK,IAAc,KAAKJ,QAAU,qBAAqB,CACrE,CAEAmB,iBAAe,CACb,OAAO,KAAKpB,KAAKK,IAAc,KAAKJ,QAAU,wBAAwB,CACxE,CAEAoB,gBAAc,CACZ,OAAO,KAAKrB,KAAKK,IAAY,KAAKJ,QAAU,wBAAyBa,CAAW,EAAEC,KAAKC,EAAIC,GAAKA,IAAM,MAAM,CAAC,CAC/G,CAEAK,sBAAsBC,EAAW,CAC/B,OAAIA,IAAQ,IAAMA,IAAQC,QAAaD,IAAQ,KAAaE,EAAG,EAAK,EAC7D,KAAKzB,KAAKK,IAAY,KAAKJ,QAAU,yCAA2CsB,EAAKT,CAAW,EAAEC,KAAKC,EAAIC,GAAKA,IAAM,MAAM,CAAC,CAEtI,yCAtDWnB,GAAe4B,EAAAC,CAAA,CAAA,CAAA,wBAAf7B,EAAe8B,QAAf9B,EAAe+B,UAAAC,WAFd,MAAM,CAAA,EAEd,IAAOhC,EAAPiC,SAAOjC,CAAe,GAAA",
  "names": ["SettingsService", "constructor", "http", "baseUrl", "environment", "apiUrl", "getServerSettings", "get", "updateServerSettings", "model", "post", "resetServerSettings", "resetIPAddressesSettings", "resetBaseUrl", "testEmailServerSettings", "isEmailSetup", "TextResonse", "pipe", "map", "d", "getTaskFrequencies", "getLoggingLevels", "getLibraryTypes", "getOpdsEnabled", "isValidCronExpression", "val", "undefined", "of", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "_SettingsService"]
}
