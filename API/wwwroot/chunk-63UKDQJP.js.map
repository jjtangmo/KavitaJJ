{
  "version": 3,
  "sources": ["src/app/_models/metadata/publication-status.ts", "src/app/_pipes/time-ago.pipe.ts", "src/app/_pipes/publication-status.pipe.ts"],
  "sourcesContent": ["export enum PublicationStatus {\n    OnGoing = 0,\n    Hiatus = 1,\n    Completed = 2,\n    Cancelled = 3,\n    Ended = 4\n}", "import {ChangeDetectorRef, NgZone, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {TranslocoService} from \"@ngneat/transloco\";\n\n/**\n * MIT License\n\nCopyright (c) 2016 Andrew Poyntz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nThis code was taken from https://github.com/AndrewPoyntz/time-ago-pipe/blob/master/time-ago.pipe.ts\nand modified\n */\n\n@Pipe({\n  name: 'timeAgo',\n  pure: false,\n  standalone: true\n})\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\n\n\tprivate timer: number | null = null;\n\tconstructor(private readonly changeDetectorRef: ChangeDetectorRef, private ngZone: NgZone,\n              private translocoService: TranslocoService) {}\n\n\ttransform(value: string) {\n\n    if (value === '' || value === null || value === undefined || value.split('T')[0] === '0001-01-01')  {\n      return this.translocoService.translate('time-ago-pipe.never');\n    }\n\n\t\tthis.removeTimer();\n\t\tconst d = new Date(value);\n\t\tconst now = new Date();\n\t\tconst seconds = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));\n\t\tconst timeToUpdate = (Number.isNaN(seconds)) ? 1000 : this.getSecondsUntilUpdate(seconds) * 1000;\n\n    \tthis.timer = this.ngZone.runOutsideAngular(() => {\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\treturn window.setTimeout(() => {\n\t\t\t\t\tthis.ngZone.run(() => this.changeDetectorRef.markForCheck());\n\t\t\t\t}, timeToUpdate);\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\t\tconst minutes = Math.round(Math.abs(seconds / 60));\n\t\tconst hours = Math.round(Math.abs(minutes / 60));\n\t\tconst days = Math.round(Math.abs(hours / 24));\n\t\tconst months = Math.round(Math.abs(days/30.416));\n\t\tconst years = Math.round(Math.abs(days/365));\n\n\t\tif (Number.isNaN(seconds)){\n\t\t\treturn '';\n\t\t}\n\n\t\tif (seconds <= 45) {\n\t\t\t\treturn this.translocoService.translate('time-ago-pipe.just-now');\n    }\n\t\tif (seconds <= 90) {\n      return this.translocoService.translate('time-ago-pipe.min-ago');\n    }\n\t\tif (minutes <= 45) {\n      return this.translocoService.translate('time-ago-pipe.mins-ago', {value: minutes});\n    }\n\t\tif (minutes <= 90) {\n      return this.translocoService.translate('time-ago-pipe.hour-ago');\n    }\n\t\tif (hours <= 22) {\n      return this.translocoService.translate('time-ago-pipe.hours-ago', {value: hours});\n    }\n\t\tif (hours <= 36) {\n      return this.translocoService.translate('time-ago-pipe.day-ago');\n    }\n\t\tif (days <= 25) {\n      return this.translocoService.translate('time-ago-pipe.days-ago', {value: days});\n    }\n\t\tif (days <= 45) {\n      return this.translocoService.translate('time-ago-pipe.month-ago');\n    }\n\t\tif (days <= 345) {\n      return this.translocoService.translate('time-ago-pipe.months-ago', {value: months});\n    }\n\t\tif (days <= 545) {\n      return this.translocoService.translate('time-ago-pipe.year-ago');\n    }\n    return this.translocoService.translate('time-ago-pipe.years-ago', {value: years});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.removeTimer();\n\t}\n\n\tprivate removeTimer() {\n\t\tif (this.timer) {\n\t\t\twindow.clearTimeout(this.timer);\n\t\t\tthis.timer = null;\n\t\t}\n\t}\n\n\tprivate getSecondsUntilUpdate(seconds:number) {\n\t\tconst min = 60;\n\t\tconst hr = min * 60;\n\t\tconst day = hr * 24;\n\t\tif (seconds < min) { // less than 1 min, update every 2 secs\n\t\t\treturn 2;\n\t\t} else if (seconds < hr) { // less than an hour, update every 30 secs\n\t\t\treturn 30;\n\t\t} else if (seconds < day) { // less then a day, update every 5 mins\n\t\t\treturn 300;\n\t\t} else { // update every hour\n\t\t\treturn 3600;\n\t\t}\n\t}\n\n}\n", "import {Pipe, PipeTransform} from '@angular/core';\nimport { PublicationStatus } from '../_models/metadata/publication-status';\nimport {TranslocoService} from \"@ngneat/transloco\";\n\n@Pipe({\n  name: 'publicationStatus',\n  standalone: true\n})\nexport class PublicationStatusPipe implements PipeTransform {\n  constructor(private translocoService: TranslocoService) {}\n\n  transform(value: PublicationStatus): string {\n    switch (value) {\n      case PublicationStatus.OnGoing:\n        return this.translocoService.translate('publication-status-pipe.ongoing');\n      case PublicationStatus.Hiatus:\n        return this.translocoService.translate('publication-status-pipe.hiatus');\n      case PublicationStatus.Completed:\n        return this.translocoService.translate('publication-status-pipe.completed');\n      case PublicationStatus.Cancelled:\n        return this.translocoService.translate('publication-status-pipe.cancelled');\n      case PublicationStatus.Ended:\n        return this.translocoService.translate('publication-status-pipe.ended');\n      default:\n        return '';\n    }\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["PublicationStatus", "TimeAgoPipe", "constructor", "changeDetectorRef", "ngZone", "translocoService", "timer", "transform", "value", "undefined", "split", "translate", "removeTimer", "d", "Date", "seconds", "Math", "round", "abs", "getTime", "timeToUpdate", "Number", "isNaN", "getSecondsUntilUpdate", "runOutsideAngular", "window", "setTimeout", "run", "markForCheck", "minutes", "hours", "days", "months", "years", "ngOnDestroy", "clearTimeout", "min", "hr", "day", "\u0275\u0275directiveInject", "ChangeDetectorRef", "NgZone", "TranslocoService", "pure", "standalone", "_TimeAgoPipe", "PublicationStatusPipe", "constructor", "translocoService", "transform", "value", "PublicationStatus", "OnGoing", "translate", "Hiatus", "Completed", "Cancelled", "Ended", "\u0275\u0275directiveInject", "TranslocoService", "pure", "standalone", "_PublicationStatusPipe"]
}
